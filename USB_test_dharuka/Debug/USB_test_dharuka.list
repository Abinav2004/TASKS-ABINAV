
USB_test_dharuka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  00009100  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb8  08007cb8  00009100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00008cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08007cc0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  20000100  08007dc0  00009100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  08007dc0  00009718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012489  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ee  00000000  00000000  0001b5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd0  00000000  00000000  0001f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b7  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c56  00000000  00000000  00038dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed54  00000000  00000000  0004da55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc7a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004630  00000000  00000000  000dc7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e0e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007c40 	.word	0x08007c40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	08007c40 	.word	0x08007c40

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <USBRxHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Once the data is recieved from USB this function is called.Open usbd_cdc_if.c file to check
void USBRxHandler(uint8_t* buf,uint16_t len){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	switch(set)
 80004d0:	4b62      	ldr	r3, [pc, #392]	@ (800065c <USBRxHandler+0x198>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <USBRxHandler+0x1a>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d063      	beq.n	80005a4 <USBRxHandler+0xe0>
			TIM2->CCR2=value1[3];
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,value2[3]);
			set=0;
			return;
	}
	return;
 80004dc:	e0ba      	b.n	8000654 <USBRxHandler+0x190>
			memset(Buffer1,0,64);
 80004de:	2240      	movs	r2, #64	@ 0x40
 80004e0:	2100      	movs	r1, #0
 80004e2:	485f      	ldr	r0, [pc, #380]	@ (8000660 <USBRxHandler+0x19c>)
 80004e4:	f007 fb72 	bl	8007bcc <memset>
			memset(Buffer2,0,64);
 80004e8:	2240      	movs	r2, #64	@ 0x40
 80004ea:	2100      	movs	r1, #0
 80004ec:	485d      	ldr	r0, [pc, #372]	@ (8000664 <USBRxHandler+0x1a0>)
 80004ee:	f007 fb6d 	bl	8007bcc <memset>
			memcpy(Buffer1,buf,len);
 80004f2:	887b      	ldrh	r3, [r7, #2]
 80004f4:	461a      	mov	r2, r3
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	4859      	ldr	r0, [pc, #356]	@ (8000660 <USBRxHandler+0x19c>)
 80004fa:	f007 fb93 	bl	8007c24 <memcpy>
			memset(buf,0,len);
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f007 fb61 	bl	8007bcc <memset>
			if(Buffer1[3]<=53)
 800050a:	4b55      	ldr	r3, [pc, #340]	@ (8000660 <USBRxHandler+0x19c>)
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	2b35      	cmp	r3, #53	@ 0x35
 8000510:	d841      	bhi.n	8000596 <USBRxHandler+0xd2>
				Buffer_operation_strich(Buffer3,Buffer2,Buffer1);
 8000512:	4a53      	ldr	r2, [pc, #332]	@ (8000660 <USBRxHandler+0x19c>)
 8000514:	4953      	ldr	r1, [pc, #332]	@ (8000664 <USBRxHandler+0x1a0>)
 8000516:	4854      	ldr	r0, [pc, #336]	@ (8000668 <USBRxHandler+0x1a4>)
 8000518:	f000 f8b6 	bl	8000688 <Buffer_operation_strich>
				size=Buffer_trim_size(Buffer3);
 800051c:	4852      	ldr	r0, [pc, #328]	@ (8000668 <USBRxHandler+0x1a4>)
 800051e:	f000 f8e5 	bl	80006ec <Buffer_trim_size>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b51      	ldr	r3, [pc, #324]	@ (800066c <USBRxHandler+0x1a8>)
 8000528:	701a      	strb	r2, [r3, #0]
				byte_stream_operation(Buffer3);
 800052a:	484f      	ldr	r0, [pc, #316]	@ (8000668 <USBRxHandler+0x1a4>)
 800052c:	f000 f966 	bl	80007fc <byte_stream_operation>
				TIM3->CCR1=value1[0];
 8000530:	4b4f      	ldr	r3, [pc, #316]	@ (8000670 <USBRxHandler+0x1ac>)
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4b4f      	ldr	r3, [pc, #316]	@ (8000674 <USBRxHandler+0x1b0>)
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,value2[0]);
 8000538:	4b4f      	ldr	r3, [pc, #316]	@ (8000678 <USBRxHandler+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	2120      	movs	r1, #32
 8000540:	484e      	ldr	r0, [pc, #312]	@ (800067c <USBRxHandler+0x1b8>)
 8000542:	f001 f84b 	bl	80015dc <HAL_GPIO_WritePin>
				TIM4->CCR3=value1[1];
 8000546:	4b4a      	ldr	r3, [pc, #296]	@ (8000670 <USBRxHandler+0x1ac>)
 8000548:	785a      	ldrb	r2, [r3, #1]
 800054a:	4b4d      	ldr	r3, [pc, #308]	@ (8000680 <USBRxHandler+0x1bc>)
 800054c:	63da      	str	r2, [r3, #60]	@ 0x3c
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,value2[1]);
 800054e:	4b4a      	ldr	r3, [pc, #296]	@ (8000678 <USBRxHandler+0x1b4>)
 8000550:	785b      	ldrb	r3, [r3, #1]
 8000552:	461a      	mov	r2, r3
 8000554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000558:	4848      	ldr	r0, [pc, #288]	@ (800067c <USBRxHandler+0x1b8>)
 800055a:	f001 f83f 	bl	80015dc <HAL_GPIO_WritePin>
				TIM2->CCR1=value1[2];
 800055e:	4b44      	ldr	r3, [pc, #272]	@ (8000670 <USBRxHandler+0x1ac>)
 8000560:	789a      	ldrb	r2, [r3, #2]
 8000562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000566:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,value2[2]);
 8000568:	4b43      	ldr	r3, [pc, #268]	@ (8000678 <USBRxHandler+0x1b4>)
 800056a:	789b      	ldrb	r3, [r3, #2]
 800056c:	461a      	mov	r2, r3
 800056e:	2140      	movs	r1, #64	@ 0x40
 8000570:	4844      	ldr	r0, [pc, #272]	@ (8000684 <USBRxHandler+0x1c0>)
 8000572:	f001 f833 	bl	80015dc <HAL_GPIO_WritePin>
				TIM2->CCR2=value1[3];
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <USBRxHandler+0x1ac>)
 8000578:	78da      	ldrb	r2, [r3, #3]
 800057a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800057e:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,value2[3]);
 8000580:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <USBRxHandler+0x1b4>)
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	461a      	mov	r2, r3
 8000586:	2104      	movs	r1, #4
 8000588:	483e      	ldr	r0, [pc, #248]	@ (8000684 <USBRxHandler+0x1c0>)
 800058a:	f001 f827 	bl	80015dc <HAL_GPIO_WritePin>
				set=0;
 800058e:	4b33      	ldr	r3, [pc, #204]	@ (800065c <USBRxHandler+0x198>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
				return;
 8000594:	e05e      	b.n	8000654 <USBRxHandler+0x190>
			set++;
 8000596:	4b31      	ldr	r3, [pc, #196]	@ (800065c <USBRxHandler+0x198>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <USBRxHandler+0x198>)
 80005a0:	701a      	strb	r2, [r3, #0]
			return;
 80005a2:	e057      	b.n	8000654 <USBRxHandler+0x190>
			memset(Buffer2,0,64);
 80005a4:	2240      	movs	r2, #64	@ 0x40
 80005a6:	2100      	movs	r1, #0
 80005a8:	482e      	ldr	r0, [pc, #184]	@ (8000664 <USBRxHandler+0x1a0>)
 80005aa:	f007 fb0f 	bl	8007bcc <memset>
			memcpy(Buffer2,buf,len);
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	461a      	mov	r2, r3
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	482b      	ldr	r0, [pc, #172]	@ (8000664 <USBRxHandler+0x1a0>)
 80005b6:	f007 fb35 	bl	8007c24 <memcpy>
			memset(buf,0,len);
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f007 fb03 	bl	8007bcc <memset>
			memset(Buffer3,0,64);
 80005c6:	2240      	movs	r2, #64	@ 0x40
 80005c8:	2100      	movs	r1, #0
 80005ca:	4827      	ldr	r0, [pc, #156]	@ (8000668 <USBRxHandler+0x1a4>)
 80005cc:	f007 fafe 	bl	8007bcc <memset>
			Buffer_operation_strich(Buffer3,Buffer2,Buffer1);
 80005d0:	4a23      	ldr	r2, [pc, #140]	@ (8000660 <USBRxHandler+0x19c>)
 80005d2:	4924      	ldr	r1, [pc, #144]	@ (8000664 <USBRxHandler+0x1a0>)
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <USBRxHandler+0x1a4>)
 80005d6:	f000 f857 	bl	8000688 <Buffer_operation_strich>
			size=Buffer_trim_size(Buffer3);
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <USBRxHandler+0x1a4>)
 80005dc:	f000 f886 	bl	80006ec <Buffer_trim_size>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b21      	ldr	r3, [pc, #132]	@ (800066c <USBRxHandler+0x1a8>)
 80005e6:	701a      	strb	r2, [r3, #0]
			byte_stream_operation(Buffer3);
 80005e8:	481f      	ldr	r0, [pc, #124]	@ (8000668 <USBRxHandler+0x1a4>)
 80005ea:	f000 f907 	bl	80007fc <byte_stream_operation>
			TIM3->CCR1=value1[0];
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <USBRxHandler+0x1ac>)
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <USBRxHandler+0x1b0>)
 80005f4:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,value2[0]);
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <USBRxHandler+0x1b4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	2120      	movs	r1, #32
 80005fe:	481f      	ldr	r0, [pc, #124]	@ (800067c <USBRxHandler+0x1b8>)
 8000600:	f000 ffec 	bl	80015dc <HAL_GPIO_WritePin>
			TIM4->CCR3=value1[1];
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <USBRxHandler+0x1ac>)
 8000606:	785a      	ldrb	r2, [r3, #1]
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <USBRxHandler+0x1bc>)
 800060a:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,value2[1]);
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <USBRxHandler+0x1b4>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	461a      	mov	r2, r3
 8000612:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000616:	4819      	ldr	r0, [pc, #100]	@ (800067c <USBRxHandler+0x1b8>)
 8000618:	f000 ffe0 	bl	80015dc <HAL_GPIO_WritePin>
			TIM2->CCR1=value1[2];
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <USBRxHandler+0x1ac>)
 800061e:	789a      	ldrb	r2, [r3, #2]
 8000620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000624:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,value2[2]);
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <USBRxHandler+0x1b4>)
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	461a      	mov	r2, r3
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <USBRxHandler+0x1c0>)
 8000630:	f000 ffd4 	bl	80015dc <HAL_GPIO_WritePin>
			TIM2->CCR2=value1[3];
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <USBRxHandler+0x1ac>)
 8000636:	78da      	ldrb	r2, [r3, #3]
 8000638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800063c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,value2[3]);
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <USBRxHandler+0x1b4>)
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	461a      	mov	r2, r3
 8000644:	2104      	movs	r1, #4
 8000646:	480f      	ldr	r0, [pc, #60]	@ (8000684 <USBRxHandler+0x1c0>)
 8000648:	f000 ffc8 	bl	80015dc <HAL_GPIO_WritePin>
			set=0;
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <USBRxHandler+0x198>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			return;
 8000652:	bf00      	nop
}
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000324 	.word	0x20000324
 8000660:	200001f4 	.word	0x200001f4
 8000664:	20000234 	.word	0x20000234
 8000668:	20000274 	.word	0x20000274
 800066c:	20000325 	.word	0x20000325
 8000670:	20000304 	.word	0x20000304
 8000674:	40000400 	.word	0x40000400
 8000678:	20000314 	.word	0x20000314
 800067c:	40020400 	.word	0x40020400
 8000680:	40000800 	.word	0x40000800
 8000684:	40020000 	.word	0x40020000

08000688 <Buffer_operation_strich>:
//function that takes first 64bytes from buffer1 and next 64 bytes from buffer2 and stores in buffer3
void Buffer_operation_strich(uint8_t *buf3,uint8_t *buf2,uint8_t *buf1)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	for(uint8_t i=0;i<64;i++)
 8000694:	2300      	movs	r3, #0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	e00a      	b.n	80006b0 <Buffer_operation_strich+0x28>
	{
		buf3[i]=buf1[i];
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	441a      	add	r2, r3
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	68f9      	ldr	r1, [r7, #12]
 80006a4:	440b      	add	r3, r1
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	3301      	adds	r3, #1
 80006ae:	75fb      	strb	r3, [r7, #23]
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80006b4:	d9f1      	bls.n	800069a <Buffer_operation_strich+0x12>
	}
	for(uint8_t i=0;i<64;i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	75bb      	strb	r3, [r7, #22]
 80006ba:	e00c      	b.n	80006d6 <Buffer_operation_strich+0x4e>
	{
		buf3[64+i]=buf2[i];
 80006bc:	7dbb      	ldrb	r3, [r7, #22]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	441a      	add	r2, r3
 80006c2:	7dbb      	ldrb	r3, [r7, #22]
 80006c4:	3340      	adds	r3, #64	@ 0x40
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	440b      	add	r3, r1
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	3301      	adds	r3, #1
 80006d4:	75bb      	strb	r3, [r7, #22]
 80006d6:	7dbb      	ldrb	r3, [r7, #22]
 80006d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80006da:	d9ef      	bls.n	80006bc <Buffer_operation_strich+0x34>
	}
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <Buffer_trim_size>:
// Function used to calculate the size of bytestream to start with the operation
uint8_t Buffer_trim_size(uint8_t *buf)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	for(j=0;j<128;j++)
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <Buffer_trim_size+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e015      	b.n	8000728 <Buffer_trim_size+0x3c>
	{
		if (buf[j]=='.' && buf[j+1]== 0)
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <Buffer_trim_size+0x60>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b2e      	cmp	r3, #46	@ 0x2e
 800070a:	d107      	bne.n	800071c <Buffer_trim_size+0x30>
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <Buffer_trim_size+0x60>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <Buffer_trim_size+0x48>
	for(j=0;j<128;j++)
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <Buffer_trim_size+0x60>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <Buffer_trim_size+0x60>)
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <Buffer_trim_size+0x60>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	dae4      	bge.n	80006fc <Buffer_trim_size+0x10>
 8000732:	e000      	b.n	8000736 <Buffer_trim_size+0x4a>
		{
			break;
 8000734:	bf00      	nop
		}
	}
	return j-1;
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <Buffer_trim_size+0x60>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	b2db      	uxtb	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000327 	.word	0x20000327

08000750 <filter_bytestream>:
// Function that takes out the values from the byte stream and puts in the respective arrays
void filter_bytestream(uint8_t *buf)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	memset(id,0,16);
 8000758:	2210      	movs	r2, #16
 800075a:	2100      	movs	r1, #0
 800075c:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <filter_bytestream+0x94>)
 800075e:	f007 fa35 	bl	8007bcc <memset>
	memset(value1,0,16);
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
 8000766:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <filter_bytestream+0x98>)
 8000768:	f007 fa30 	bl	8007bcc <memset>
	memset(value2,0,16);
 800076c:	2210      	movs	r2, #16
 800076e:	2100      	movs	r1, #0
 8000770:	481e      	ldr	r0, [pc, #120]	@ (80007ec <filter_bytestream+0x9c>)
 8000772:	f007 fa2b 	bl	8007bcc <memset>
	while(idx<size)
 8000776:	e029      	b.n	80007cc <filter_bytestream+0x7c>
	{
			id[nxt]=buf[idx+1];
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <filter_bytestream+0xa0>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <filter_bytestream+0xa4>)
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	7819      	ldrb	r1, [r3, #0]
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <filter_bytestream+0x94>)
 800078a:	5499      	strb	r1, [r3, r2]
			value1[nxt]=buf[idx+3];
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <filter_bytestream+0xa0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3303      	adds	r3, #3
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <filter_bytestream+0xa4>)
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	7819      	ldrb	r1, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <filter_bytestream+0x98>)
 800079e:	5499      	strb	r1, [r3, r2]
			value2[nxt]=buf[idx+5];
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <filter_bytestream+0xa0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3305      	adds	r3, #5
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <filter_bytestream+0xa4>)
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	7819      	ldrb	r1, [r3, #0]
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <filter_bytestream+0x9c>)
 80007b2:	5499      	strb	r1, [r3, r2]
			idx+=8;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <filter_bytestream+0xa0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3308      	adds	r3, #8
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <filter_bytestream+0xa0>)
 80007be:	701a      	strb	r2, [r3, #0]
			nxt++;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <filter_bytestream+0xa4>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <filter_bytestream+0xa4>)
 80007ca:	701a      	strb	r2, [r3, #0]
	while(idx<size)
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <filter_bytestream+0xa0>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <filter_bytestream+0xa8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3cf      	bcc.n	8000778 <filter_bytestream+0x28>
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002f4 	.word	0x200002f4
 80007e8:	20000304 	.word	0x20000304
 80007ec:	20000314 	.word	0x20000314
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000326 	.word	0x20000326
 80007f8:	20000325 	.word	0x20000325

080007fc <byte_stream_operation>:

// Function that reinitialize all the values
void byte_stream_operation(uint8_t* buf)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	filter_bytestream(buf);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffa3 	bl	8000750 <filter_bytestream>
	nxt=0;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <byte_stream_operation+0x28>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	idx=14;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <byte_stream_operation+0x2c>)
 8000812:	220e      	movs	r2, #14
 8000814:	701a      	strb	r2, [r3, #0]
	j=0;
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <byte_stream_operation+0x30>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000326 	.word	0x20000326
 8000828:	20000000 	.word	0x20000000
 800082c:	20000327 	.word	0x20000327

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fba6 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f824 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f9a0 	bl	8000b80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000840:	f000 f88c 	bl	800095c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000844:	f000 f8ec 	bl	8000a20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000848:	f000 f942 	bl	8000ad0 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800084c:	f006 fc96 	bl	800717c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // starting and providing  the respective PWM signals to the Drivers
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	@ (8000878 <main+0x48>)
 8000854:	f002 fdac 	bl	80033b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000858:	2108      	movs	r1, #8
 800085a:	4808      	ldr	r0, [pc, #32]	@ (800087c <main+0x4c>)
 800085c:	f002 fda8 	bl	80033b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000860:	2100      	movs	r1, #0
 8000862:	4807      	ldr	r0, [pc, #28]	@ (8000880 <main+0x50>)
 8000864:	f002 fda4 	bl	80033b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000868:	2104      	movs	r1, #4
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <main+0x50>)
 800086c:	f002 fda0 	bl	80033b0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 fbf9 	bl	8001068 <HAL_Delay>
 8000876:	e7fb      	b.n	8000870 <main+0x40>
 8000878:	20000164 	.word	0x20000164
 800087c:	200001ac 	.word	0x200001ac
 8000880:	2000011c 	.word	0x2000011c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	@ 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f007 f99a 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <SystemClock_Config+0xd0>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xd4>)
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008f8:	2319      	movs	r3, #25
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008fc:	2390      	movs	r3, #144	@ 0x90
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000904:	2303      	movs	r3, #3
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f002 f8cf 	bl	8002ab0 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000918:	f000 f9be 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800092e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2102      	movs	r1, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb30 	bl	8002fa0 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000946:	f000 f9a7 	bl	8000c98 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	@ 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097e:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 8000980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14-1;
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 8000988:	220d      	movs	r2, #13
 800098a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 8000994:	22ff      	movs	r2, #255	@ 0xff
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009a4:	481d      	ldr	r0, [pc, #116]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 80009a6:	f002 fcb3 	bl	8003310 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f972 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4619      	mov	r1, r3
 80009c2:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 80009c4:	f003 f8a4 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80009ce:	f000 f963 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	@ 0x60
 80009d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 80009ea:	f002 fd91 	bl	8003510 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009f4:	f000 f950 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2204      	movs	r2, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 8000a00:	f002 fd86 	bl	8003510 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f945 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a0e:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <MX_TIM2_Init+0xc0>)
 8000a10:	f000 f9bc 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	@ 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000011c 	.word	0x2000011c

08000a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <MX_TIM3_Init+0xac>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14-1;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a4a:	220d      	movs	r2, #13
 8000a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a56:	22ff      	movs	r2, #255	@ 0xff
 8000a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a66:	4818      	ldr	r0, [pc, #96]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a68:	f002 fc52 	bl	8003310 <HAL_TIM_PWM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a72:	f000 f911 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000a86:	f003 f843 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000a90:	f000 f902 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a94:	2360      	movs	r3, #96	@ 0x60
 8000a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000aac:	f002 fd30 	bl	8003510 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000ab6:	f000 f8ef 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <MX_TIM3_Init+0xa8>)
 8000abc:	f000 f966 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000164 	.word	0x20000164
 8000acc:	40000400 	.word	0x40000400

08000ad0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000af4:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <MX_TIM4_Init+0xac>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14-1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000afa:	220d      	movs	r2, #13
 8000afc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b06:	22ff      	movs	r2, #255	@ 0xff
 8000b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b16:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b18:	f002 fbfa 	bl	8003310 <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000b22:	f000 f8b9 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4619      	mov	r1, r3
 8000b34:	4810      	ldr	r0, [pc, #64]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b36:	f002 ffeb 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000b40:	f000 f8aa 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	@ 0x60
 8000b46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2208      	movs	r2, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b5c:	f002 fcd8 	bl	8003510 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b66:	f000 f897 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b6a:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM4_Init+0xa8>)
 8000b6c:	f000 f90e 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001ac 	.word	0x200001ac
 8000b7c:	40000800 	.word	0x40000800

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a33      	ldr	r2, [pc, #204]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <MX_GPIO_Init+0x108>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000c0e:	f000 fce5 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Dir4_Pin|Dir3_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2144      	movs	r1, #68	@ 0x44
 8000c16:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <MX_GPIO_Init+0x110>)
 8000c18:	f000 fce0 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dir1_Pin|Dir2_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000c22:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0x114>)
 8000c24:	f000 fcda 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000c42:	f000 fb47 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir4_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = Dir4_Pin|Dir3_Pin;
 8000c46:	2344      	movs	r3, #68	@ 0x44
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_GPIO_Init+0x110>)
 8000c5e:	f000 fb39 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir1_Pin Dir2_Pin */
  GPIO_InitStruct.Pin = Dir1_Pin|Dir2_Pin;
 8000c62:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_GPIO_Init+0x114>)
 8000c7c:	f000 fb2a 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d22:	e026      	b.n	8000d72 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <HAL_TIM_PWM_MspInit+0x90>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10e      	bne.n	8000d4c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
}
 8000d4a:	e012      	b.n	8000d72 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x94>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10d      	bne.n	8000d72 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	bf00      	nop
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40000800 	.word	0x40000800

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dac:	d11e      	bne.n	8000dec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a33      	ldr	r2, [pc, #204]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Speed4_Pin|Speed3_Pin;
 8000dca:	2322      	movs	r3, #34	@ 0x22
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4828      	ldr	r0, [pc, #160]	@ (8000e88 <HAL_TIM_MspPostInit+0xfc>)
 8000de6:	f000 fa75 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dea:	e047      	b.n	8000e7c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <HAL_TIM_MspPostInit+0x100>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11e      	bne.n	8000e34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Speed1_Pin;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e22:	2302      	movs	r3, #2
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Speed1_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4818      	ldr	r0, [pc, #96]	@ (8000e90 <HAL_TIM_MspPostInit+0x104>)
 8000e2e:	f000 fa51 	bl	80012d4 <HAL_GPIO_Init>
}
 8000e32:	e023      	b.n	8000e7c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a16      	ldr	r2, [pc, #88]	@ (8000e94 <HAL_TIM_MspPostInit+0x108>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d11e      	bne.n	8000e7c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_TIM_MspPostInit+0xf8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Speed2_Pin;
 8000e5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Speed2_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	@ (8000e90 <HAL_TIM_MspPostInit+0x104>)
 8000e78:	f000 fa2c 	bl	80012d4 <HAL_GPIO_Init>
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40000800 	.word	0x40000800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f89b 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <OTG_FS_IRQHandler+0x10>)
 8000efe:	f000 fcca 	bl	8001896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20001014 	.word	0x20001014

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f006 fe3d 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fc65 	bl	8000830 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000f74:	08007cc0 	.word	0x08007cc0
  ldr r2, =_sbss
 8000f78:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000f7c:	20001718 	.word	0x20001718

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f94f 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe74 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f967 	bl	80012ba <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f92f 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000004 	.word	0x20000004
 8001020:	2000000c 	.word	0x2000000c
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000328 	.word	0x20000328

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000328 	.word	0x20000328

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	@ (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e159      	b.n	80015a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8148 	bne.w	800159e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a2 	beq.w	800159e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a56      	ldr	r2, [pc, #344]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b54      	ldr	r3, [pc, #336]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a52      	ldr	r2, [pc, #328]	@ (80015c0 <HAL_GPIO_Init+0x2ec>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a49      	ldr	r2, [pc, #292]	@ (80015c4 <HAL_GPIO_Init+0x2f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x202>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a48      	ldr	r2, [pc, #288]	@ (80015c8 <HAL_GPIO_Init+0x2f4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x1fe>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	@ (80015cc <HAL_GPIO_Init+0x2f8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	@ (80015d0 <HAL_GPIO_Init+0x2fc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x1f6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	@ (80015d4 <HAL_GPIO_Init+0x300>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x1f2>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	@ (80015c0 <HAL_GPIO_Init+0x2ec>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f aea2 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af02      	add	r7, sp, #8
 8001614:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e101      	b.n	8001824 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f005 ffbc 	bl	80075b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800164e:	d102      	bne.n	8001656 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fbdd 	bl	8003e1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c1a      	ldrb	r2, [r3, #16]
 8001668:	f88d 2000 	strb.w	r2, [sp]
 800166c:	3304      	adds	r3, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	f002 fabc 	bl	8003bec <USB_CoreInit>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0ce      	b.n	8001824 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fbd5 	bl	8003e3c <USB_SetCurrentMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0bf      	b.n	8001824 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e04a      	b.n	8001740 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3315      	adds	r3, #21
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3314      	adds	r3, #20
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	b298      	uxth	r0, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	332e      	adds	r3, #46	@ 0x2e
 80016e6:	4602      	mov	r2, r0
 80016e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3318      	adds	r3, #24
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	331c      	adds	r3, #28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3320      	adds	r3, #32
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3324      	adds	r3, #36	@ 0x24
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3301      	adds	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3af      	bcc.n	80016aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e044      	b.n	80017da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3b5      	bcc.n	8001750 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7c1a      	ldrb	r2, [r3, #16]
 80017ec:	f88d 2000 	strb.w	r2, [sp]
 80017f0:	3304      	adds	r3, #4
 80017f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f4:	f002 fb6e 	bl	8003ed4 <USB_DevInit>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00c      	b.n	8001824 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fbb2 	bl	8004f86 <USB_DevDisconnect>

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_PCD_Start+0x1c>
 8001844:	2302      	movs	r3, #2
 8001846:	e022      	b.n	800188e <HAL_PCD_Start+0x62>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001868:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fabf 	bl	8003df8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fb60 	bl	8004f44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b08d      	sub	sp, #52	@ 0x34
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fc1e 	bl	80050ee <USB_GetMode>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 848c 	bne.w	80021d2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fb82 	bl	8004fc8 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8482 	beq.w	80021d0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fb6f 	bl	8004fc8 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d107      	bne.n	8001904 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f002 0202 	and.w	r2, r2, #2
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fb5d 	bl	8004fc8 <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b10      	cmp	r3, #16
 8001916:	d161      	bne.n	80019dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0210 	bic.w	r2, r2, #16
 8001926:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 020f 	and.w	r2, r3, #15
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	0c5b      	lsrs	r3, r3, #17
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	2b02      	cmp	r3, #2
 8001952:	d124      	bne.n	800199e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d035      	beq.n	80019cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800196a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	6a38      	ldr	r0, [r7, #32]
 8001974:	f003 f994 	bl	8004ca0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001984:	441a      	add	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001996:	441a      	add	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	e016      	b.n	80019cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	0c5b      	lsrs	r3, r3, #17
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d110      	bne.n	80019cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019b0:	2208      	movs	r2, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	6a38      	ldr	r0, [r7, #32]
 80019b6:	f003 f973 	bl	8004ca0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019c6:	441a      	add	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0210 	orr.w	r2, r2, #16
 80019da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 faf1 	bl	8004fc8 <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80019f0:	f040 80a7 	bne.w	8001b42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 faf6 	bl	8004fee <USB_ReadDevAllOutEpInterrupt>
 8001a02:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a04:	e099      	b.n	8001b3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 808e 	beq.w	8001b2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fb1a 	bl	8005056 <USB_ReadDevOutEPInterrupt>
 8001a22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fea2 	bl	800278c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2308      	movs	r3, #8
 8001a62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 ff78 	bl	800295c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a82:	461a      	mov	r2, r3
 8001a84:	2310      	movs	r3, #16
 8001a86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d030      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9a:	2b80      	cmp	r3, #128	@ 0x80
 8001a9c:	d109      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	78db      	ldrb	r3, [r3, #3]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 fe67 	bl	80077b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aee:	461a      	mov	r2, r3
 8001af0:	2302      	movs	r3, #2
 8001af2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b26:	461a      	mov	r2, r3
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f af62 	bne.w	8001a06 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fa3e 	bl	8004fc8 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b56:	f040 80db 	bne.w	8001d10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fa5f 	bl	8005022 <USB_ReadDevAllInEpInterrupt>
 8001b64:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b6a:	e0cd      	b.n	8001d08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80c2 	beq.w	8001cfc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fa85 	bl	8005092 <USB_ReadDevInEPInterrupt>
 8001b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d057      	beq.n	8001c44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69f9      	ldr	r1, [r7, #28]
 8001bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	799b      	ldrb	r3, [r3, #6]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d132      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3320      	adds	r3, #32
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4403      	add	r3, r0
 8001bf2:	331c      	adds	r3, #28
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4419      	add	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4403      	add	r3, r0
 8001c06:	3320      	adds	r3, #32
 8001c08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d113      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x3a2>
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3324      	adds	r3, #36	@ 0x24
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d108      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c30:	461a      	mov	r2, r3
 8001c32:	2101      	movs	r1, #1
 8001c34:	f003 fa8c 	bl	8005150 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f005 fd3b 	bl	80076ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c76:	461a      	mov	r2, r3
 8001c78:	2310      	movs	r3, #16
 8001c7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c92:	461a      	mov	r2, r3
 8001c94:	2340      	movs	r3, #64	@ 0x40
 8001c96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ca4:	6a38      	ldr	r0, [r7, #32]
 8001ca6:	f002 fa79 	bl	800419c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3304      	adds	r3, #4
 8001cbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	78db      	ldrb	r3, [r3, #3]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 fd7e 	bl	80077d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fcbb 	bl	8002672 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	3301      	adds	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f af2e 	bne.w	8001b6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 f957 	bl	8004fc8 <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d24:	d122      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d108      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fea2 	bl	8002a98 <HAL_PCDEx_LPM_Callback>
 8001d54:	e002      	b.n	8001d5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f005 fd1c 	bl	8007794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f929 	bl	8004fc8 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d80:	d112      	bne.n	8001da8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f005 fcd8 	bl	8007748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001da6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 f90b 	bl	8004fc8 <USB_ReadInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dbc:	f040 80b7 	bne.w	8001f2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 f9de 	bl	800419c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001de4:	e046      	b.n	8001e74 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001df2:	461a      	mov	r2, r3
 8001df4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001df8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e0a:	0151      	lsls	r1, r2, #5
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	440a      	add	r2, r1
 8001e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001e14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e26:	461a      	mov	r2, r3
 8001e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e3e:	0151      	lsls	r1, r2, #5
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	440a      	add	r2, r1
 8001e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	3301      	adds	r3, #1
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	791b      	ldrb	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d3b2      	bcc.n	8001de6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001e92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7bdb      	ldrb	r3, [r3, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eac:	f043 030b 	orr.w	r3, r3, #11
 8001eb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ec2:	f043 030b 	orr.w	r3, r3, #11
 8001ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec8:	e015      	b.n	8001ef6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ed8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001edc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001ee0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ef0:	f043 030b 	orr.w	r3, r3, #11
 8001ef4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f003 f919 	bl	8005150 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f848 	bl	8004fc8 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f42:	d123      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f8de 	bl	800510a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 f99b 	bl	800428e <USB_GetDevSpeed>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	f001 f9c8 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8001f68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4620      	mov	r0, r4
 8001f72:	f001 fe9f 	bl	8003cb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f005 fbc7 	bl	800770a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f819 	bl	8004fc8 <USB_ReadInterrupts>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f005 fba4 	bl	80076ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f002 0208 	and.w	r2, r2, #8
 8001fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 f804 	bl	8004fc8 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b80      	cmp	r3, #128	@ 0x80
 8001fc8:	d123      	bne.n	8002012 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e014      	b.n	8002006 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fb08 	bl	8002610 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	3301      	adds	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	461a      	mov	r2, r3
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	4293      	cmp	r3, r2
 8002010:	d3e4      	bcc.n	8001fdc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f002 ffd6 	bl	8004fc8 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002026:	d13c      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
 800202c:	e02b      	b.n	8002086 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3318      	adds	r3, #24
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d115      	bne.n	8002080 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002054:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	da12      	bge.n	8002080 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3317      	adds	r3, #23
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fac8 	bl	8002610 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	3301      	adds	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	461a      	mov	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	4293      	cmp	r3, r2
 8002090:	d3cd      	bcc.n	800202e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ff8e 	bl	8004fc8 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020b6:	d156      	bne.n	8002166 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b8:	2301      	movs	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80020bc:	e045      	b.n	800214a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d12e      	bne.n	8002144 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da2b      	bge.n	8002144 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80020f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d121      	bne.n	8002144 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10a      	bne.n	8002144 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800213c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002140:	6053      	str	r3, [r2, #4]
            break;
 8002142:	e008      	b.n	8002156 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	4293      	cmp	r3, r2
 8002154:	d3b3      	bcc.n	80020be <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f002 ff2c 	bl	8004fc8 <USB_ReadInterrupts>
 8002170:	4603      	mov	r3, r0
 8002172:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217a:	d10a      	bne.n	8002192 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f005 fb3b 	bl	80077f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 ff16 	bl	8004fc8 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d115      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 fb2b 	bl	8007814 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e000      	b.n	80021d2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80021d0:	bf00      	nop
    }
  }
}
 80021d2:	3734      	adds	r7, #52	@ 0x34
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_PCD_SetAddress+0x1a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e012      	b.n	8002218 <HAL_PCD_SetAddress+0x40>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fe75 	bl	8004ef8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	70fb      	strb	r3, [r7, #3]
 8002232:	460b      	mov	r3, r1
 8002234:	803b      	strh	r3, [r7, #0]
 8002236:	4613      	mov	r3, r2
 8002238:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800223e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	da0f      	bge.n	8002266 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 020f 	and.w	r2, r3, #15
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	3310      	adds	r3, #16
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	705a      	strb	r2, [r3, #1]
 8002264:	e00f      	b.n	8002286 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002292:	883a      	ldrh	r2, [r7, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	78ba      	ldrb	r2, [r7, #2]
 800229c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022b0:	78bb      	ldrb	r3, [r7, #2]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d102      	bne.n	80022bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_EP_Open+0xaa>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e00e      	b.n	80022e8 <HAL_PCD_EP_Open+0xc8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 fffd 	bl	80042d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da0f      	bge.n	8002324 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3310      	adds	r3, #16
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00f      	b.n	8002344 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_Close+0x6e>
 800235a:	2302      	movs	r3, #2
 800235c:	e00e      	b.n	800237c <HAL_PCD_EP_Close+0x8c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f002 f83b 	bl	80043e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	460b      	mov	r3, r1
 8002392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2200      	movs	r2, #0
 80023c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	799b      	ldrb	r3, [r3, #6]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	799b      	ldrb	r3, [r3, #6]
 80023e8:	461a      	mov	r2, r3
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	f002 f8d8 	bl	80045a0 <USB_EPStartXfer>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3310      	adds	r3, #16
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2201      	movs	r2, #1
 8002468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	799b      	ldrb	r3, [r3, #6]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	461a      	mov	r2, r3
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	f002 f886 	bl	80045a0 <USB_EPStartXfer>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	7912      	ldrb	r2, [r2, #4]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04f      	b.n	800255c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da0f      	bge.n	80024e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3310      	adds	r3, #16
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	705a      	strb	r2, [r3, #1]
 80024e2:	e00d      	b.n	8002500 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_PCD_EP_SetStall+0x82>
 800251c:	2302      	movs	r3, #2
 800251e:	e01d      	b.n	800255c <HAL_PCD_EP_SetStall+0xbe>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fc0e 	bl	8004d50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7999      	ldrb	r1, [r3, #6]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800254c:	461a      	mov	r2, r3
 800254e:	f002 fdff 	bl	8005150 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	7912      	ldrb	r2, [r2, #4]
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e042      	b.n	8002608 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da0f      	bge.n	80025aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3310      	adds	r3, #16
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	705a      	strb	r2, [r3, #1]
 80025a8:	e00f      	b.n	80025ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	3304      	adds	r3, #4
 80025c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_PCD_EP_ClrStall+0x86>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e00e      	b.n	8002608 <HAL_PCD_EP_ClrStall+0xa4>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fc17 	bl	8004e2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800261c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da0c      	bge.n	800263e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 020f 	and.w	r2, r3, #15
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3310      	adds	r3, #16
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e00c      	b.n	8002658 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fa36 	bl	8004ad0 <USB_EPStopXfer>
 8002664:	4603      	mov	r3, r0
 8002666:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002668:	7afb      	ldrb	r3, [r7, #11]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	@ 0x28
 8002676:	af02      	add	r7, sp, #8
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	3310      	adds	r3, #16
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d901      	bls.n	80026aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d902      	bls.n	80026c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3303      	adds	r3, #3
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ce:	e02a      	b.n	8002726 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d902      	bls.n	80026ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3303      	adds	r3, #3
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4603      	mov	r3, r0
 8002708:	6978      	ldr	r0, [r7, #20]
 800270a:	f002 fa8b 	bl	8004c24 <USB_WritePacket>

    ep->xfer_buff  += len;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	441a      	add	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	441a      	add	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	429a      	cmp	r2, r3
 800273a:	d809      	bhi.n	8002750 <PCD_WriteEmptyTxFifo+0xde>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002744:	429a      	cmp	r2, r3
 8002746:	d203      	bcs.n	8002750 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1bf      	bne.n	80026d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	d811      	bhi.n	8002780 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	2201      	movs	r2, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	43db      	mvns	r3, r3
 8002776:	6939      	ldr	r1, [r7, #16]
 8002778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800277c:	4013      	ands	r3, r2
 800277e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	333c      	adds	r3, #60	@ 0x3c
 80027a4:	3304      	adds	r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	799b      	ldrb	r3, [r3, #6]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d17b      	bne.n	80028ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a61      	ldr	r2, [pc, #388]	@ (8002954 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	f240 80b9 	bls.w	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b3 	beq.w	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ee:	461a      	mov	r2, r3
 80027f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	e0a7      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280e:	461a      	mov	r2, r3
 8002810:	2320      	movs	r3, #32
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	e098      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8093 	bne.w	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	4a4b      	ldr	r2, [pc, #300]	@ (8002954 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d90f      	bls.n	800284a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	e07e      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	440b      	add	r3, r1
 800286c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	1ad2      	subs	r2, r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d114      	bne.n	80028ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002894:	461a      	mov	r2, r3
 8002896:	2101      	movs	r1, #1
 8002898:	f002 fc5a 	bl	8005150 <USB_EP0_OutStart>
 800289c:	e006      	b.n	80028ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f004 fee6 	bl	8007684 <HAL_PCD_DataOutStageCallback>
 80028b8:	e046      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4a26      	ldr	r2, [pc, #152]	@ (8002958 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d124      	bne.n	800290c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d8:	461a      	mov	r2, r3
 80028da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028de:	6093      	str	r3, [r2, #8]
 80028e0:	e032      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f8:	461a      	mov	r2, r3
 80028fa:	2320      	movs	r3, #32
 80028fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f004 febd 	bl	8007684 <HAL_PCD_DataOutStageCallback>
 800290a:	e01d      	b.n	8002948 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d114      	bne.n	800293c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002934:	461a      	mov	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	f002 fc0a 	bl	8005150 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f004 fe9e 	bl	8007684 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	4f54300a 	.word	0x4f54300a
 8002958:	4f54310a 	.word	0x4f54310a

0800295c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	333c      	adds	r3, #60	@ 0x3c
 8002974:	3304      	adds	r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d90e      	bls.n	80029b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f004 fe55 	bl	8007660 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d90c      	bls.n	80029d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	799b      	ldrb	r3, [r3, #6]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029d0:	461a      	mov	r2, r3
 80029d2:	2101      	movs	r1, #1
 80029d4:	f002 fbbc 	bl	8005150 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	4f54300a 	.word	0x4f54300a

080029e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
 80029f4:	4613      	mov	r3, r2
 80029f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a06:	883b      	ldrh	r3, [r7, #0]
 8002a08:	0419      	lsls	r1, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a14:	e028      	b.n	8002a68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e00d      	b.n	8002a46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3340      	adds	r3, #64	@ 0x40
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	3301      	adds	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3ec      	bcc.n	8002a2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a50:	883b      	ldrh	r3, [r7, #0]
 8002a52:	0418      	lsls	r0, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	3340      	adds	r3, #64	@ 0x40
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e267      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b82      	ldr	r3, [pc, #520]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e242      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b76      	ldr	r3, [pc, #472]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b70      	ldr	r3, [pc, #448]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b69      	ldr	r3, [pc, #420]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a68      	ldr	r2, [pc, #416]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fa72 	bl	8001050 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fa6e 	bl	8001050 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e207      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fa5e 	bl	8001050 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fa5a 	bl	8001050 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1f3      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c7      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4937      	ldr	r1, [pc, #220]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fa13 	bl	8001050 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fa0f 	bl	8001050 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a8      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4925      	ldr	r1, [pc, #148]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f9f2 	bl	8001050 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe f9ee 	bl	8001050 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e187      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d036      	beq.n	8002d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe f9d2 	bl	8001050 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe f9ce 	bl	8001050 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e167      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e01b      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe f9bb 	bl	8001050 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00e      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe f9b7 	bl	8001050 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d907      	bls.n	8002cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e150      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470000 	.word	0x42470000
 8002cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b88      	ldr	r3, [pc, #544]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ea      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8097 	beq.w	8002e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b81      	ldr	r3, [pc, #516]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b7a      	ldr	r3, [pc, #488]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b77      	ldr	r3, [pc, #476]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b74      	ldr	r3, [pc, #464]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a73      	ldr	r2, [pc, #460]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f977 	bl	8001050 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe f973 	bl	8001050 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0x474>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
 8002d8c:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a63      	ldr	r2, [pc, #396]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x30c>
 8002da2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dae:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002dbc:	4b58      	ldr	r3, [pc, #352]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a57      	ldr	r2, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	4b55      	ldr	r3, [pc, #340]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a54      	ldr	r2, [pc, #336]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f938 	bl	8001050 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe f934 	bl	8001050 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0cb      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	4b49      	ldr	r3, [pc, #292]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fe f922 	bl	8001050 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f91e 	bl	8001050 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0b5      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	4a38      	ldr	r2, [pc, #224]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a1 	beq.w	8002f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d05c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d141      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe f8f2 	bl	8001050 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f8ee 	bl	8001050 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e087      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe f8c7 	bl	8001050 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe f8c3 	bl	8001050 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e05c      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x416>
 8002ee4:	e054      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f8b0 	bl	8001050 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f8ac 	bl	8001050 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e045      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x444>
 8002f12:	e03d      	b.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e038      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d028      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d121      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0cc      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b68      	ldr	r3, [pc, #416]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d90c      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b65      	ldr	r3, [pc, #404]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d119      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e067      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b37      	ldr	r3, [pc, #220]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4934      	ldr	r1, [pc, #208]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fd ffde 	bl	8001050 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fd ffda 	bl	8001050 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b25      	ldr	r3, [pc, #148]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d20c      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	@ (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd ff3e 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	08007ca0 	.word	0x08007ca0
 8003164:	20000004 	.word	0x20000004
 8003168:	20000008 	.word	0x20000008

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b090      	sub	sp, #64	@ 0x40
 8003172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
 8003178:	2300      	movs	r3, #0
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800317c:	2300      	movs	r3, #0
 800317e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003184:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d00d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 80a1 	bhi.w	80032d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800319e:	e09b      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80031a4:	e09b      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a6:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031aa:	e098      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4b4f      	ldr	r3, [pc, #316]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b6:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	2200      	movs	r2, #0
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031d4:	2100      	movs	r1, #0
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031d8:	fb03 f201 	mul.w	r2, r3, r1
 80031dc:	2300      	movs	r3, #0
 80031de:	fb00 f303 	mul.w	r3, r0, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	4a43      	ldr	r2, [pc, #268]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031e6:	fba0 1202 	umull	r1, r2, r0, r2
 80031ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ec:	460a      	mov	r2, r1
 80031ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f2:	4413      	add	r3, r2
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	2200      	movs	r2, #0
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	61fa      	str	r2, [r7, #28]
 80031fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003202:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003206:	f7fc ffe5 	bl	80001d4 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003212:	e053      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	2200      	movs	r2, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	617a      	str	r2, [r7, #20]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003226:	f04f 0b00 	mov.w	fp, #0
 800322a:	4652      	mov	r2, sl
 800322c:	465b      	mov	r3, fp
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323c:	0150      	lsls	r0, r2, #5
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	ebb2 080a 	subs.w	r8, r2, sl
 8003246:	eb63 090b 	sbc.w	r9, r3, fp
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003256:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800325a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800325e:	ebb2 0408 	subs.w	r4, r2, r8
 8003262:	eb63 0509 	sbc.w	r5, r3, r9
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	00eb      	lsls	r3, r5, #3
 8003270:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003274:	00e2      	lsls	r2, r4, #3
 8003276:	4614      	mov	r4, r2
 8003278:	461d      	mov	r5, r3
 800327a:	eb14 030a 	adds.w	r3, r4, sl
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	eb45 030b 	adc.w	r3, r5, fp
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003292:	4629      	mov	r1, r5
 8003294:	028b      	lsls	r3, r1, #10
 8003296:	4621      	mov	r1, r4
 8003298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800329c:	4621      	mov	r1, r4
 800329e:	028a      	lsls	r2, r1, #10
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a6:	2200      	movs	r2, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b0:	f7fc ff90 	bl	80001d4 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4613      	mov	r3, r2
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x180>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	3301      	adds	r3, #1
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80032cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d6:	e002      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3740      	adds	r7, #64	@ 0x40
 80032e4:	46bd      	mov	sp, r7
 80032e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	017d7840 	.word	0x017d7840

080032f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_RCC_GetHCLKFreq+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e041      	b.n	80033a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fcdc 	bl	8000cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f9a0 	bl	8003694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x24>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e022      	b.n	800341a <HAL_TIM_PWM_Start+0x6a>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d109      	bne.n	80033ee <HAL_TIM_PWM_Start+0x3e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e015      	b.n	800341a <HAL_TIM_PWM_Start+0x6a>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d109      	bne.n	8003408 <HAL_TIM_PWM_Start+0x58>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e008      	b.n	800341a <HAL_TIM_PWM_Start+0x6a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e068      	b.n	80034f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0x82>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003430:	e013      	b.n	800345a <HAL_TIM_PWM_Start+0xaa>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0x92>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003440:	e00b      	b.n	800345a <HAL_TIM_PWM_Start+0xaa>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0xa2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003450:	e003      	b.n	800345a <HAL_TIM_PWM_Start+0xaa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fb2e 	bl	8003ac4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <HAL_TIM_PWM_Start+0x14c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d107      	bne.n	8003482 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	@ (80034fc <HAL_TIM_PWM_Start+0x14c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <HAL_TIM_PWM_Start+0x10e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003494:	d013      	beq.n	80034be <HAL_TIM_PWM_Start+0x10e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_TIM_PWM_Start+0x150>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIM_PWM_Start+0x10e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <HAL_TIM_PWM_Start+0x154>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_TIM_PWM_Start+0x10e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <HAL_TIM_PWM_Start+0x158>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_PWM_Start+0x10e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <HAL_TIM_PWM_Start+0x15c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d010      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	e007      	b.n	80034f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40010000 	.word	0x40010000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40014000 	.word	0x40014000

08003510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800352a:	2302      	movs	r3, #2
 800352c:	e0ae      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b0c      	cmp	r3, #12
 800353a:	f200 809f 	bhi.w	800367c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800353e:	a201      	add	r2, pc, #4	@ (adr r2, 8003544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003579 	.word	0x08003579
 8003548:	0800367d 	.word	0x0800367d
 800354c:	0800367d 	.word	0x0800367d
 8003550:	0800367d 	.word	0x0800367d
 8003554:	080035b9 	.word	0x080035b9
 8003558:	0800367d 	.word	0x0800367d
 800355c:	0800367d 	.word	0x0800367d
 8003560:	0800367d 	.word	0x0800367d
 8003564:	080035fb 	.word	0x080035fb
 8003568:	0800367d 	.word	0x0800367d
 800356c:	0800367d 	.word	0x0800367d
 8003570:	0800367d 	.word	0x0800367d
 8003574:	0800363b 	.word	0x0800363b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f914 	bl	80037ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0208 	orr.w	r2, r2, #8
 8003592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6999      	ldr	r1, [r3, #24]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]
      break;
 80035b6:	e064      	b.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f95a 	bl	8003878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	619a      	str	r2, [r3, #24]
      break;
 80035f8:	e043      	b.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f9a5 	bl	8003950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0208 	orr.w	r2, r2, #8
 8003614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0204 	bic.w	r2, r2, #4
 8003624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69d9      	ldr	r1, [r3, #28]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	61da      	str	r2, [r3, #28]
      break;
 8003638:	e023      	b.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9ef 	bl	8003a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	61da      	str	r2, [r3, #28]
      break;
 800367a:	e002      	b.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	75fb      	strb	r3, [r7, #23]
      break;
 8003680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003790 <TIM_Base_SetConfig+0xfc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00f      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d00b      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a37      	ldr	r2, [pc, #220]	@ (8003794 <TIM_Base_SetConfig+0x100>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a36      	ldr	r2, [pc, #216]	@ (8003798 <TIM_Base_SetConfig+0x104>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a35      	ldr	r2, [pc, #212]	@ (800379c <TIM_Base_SetConfig+0x108>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <TIM_Base_SetConfig+0xfc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	@ (8003794 <TIM_Base_SetConfig+0x100>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a27      	ldr	r2, [pc, #156]	@ (8003798 <TIM_Base_SetConfig+0x104>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a26      	ldr	r2, [pc, #152]	@ (800379c <TIM_Base_SetConfig+0x108>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a25      	ldr	r2, [pc, #148]	@ (80037a0 <TIM_Base_SetConfig+0x10c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a24      	ldr	r2, [pc, #144]	@ (80037a4 <TIM_Base_SetConfig+0x110>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <TIM_Base_SetConfig+0x114>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0e      	ldr	r2, [pc, #56]	@ (8003790 <TIM_Base_SetConfig+0xfc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f023 0201 	bic.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]
  }
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f023 0201 	bic.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 0302 	bic.w	r3, r3, #2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10c      	bne.n	8003822 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0308 	bic.w	r3, r3, #8
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40010000 	.word	0x40010000

08003878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f023 0210 	bic.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <TIM_OC2_SetConfig+0xd4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <TIM_OC2_SetConfig+0xd4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d113      	bne.n	8003924 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000

08003950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <TIM_OC3_SetConfig+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10d      	bne.n	80039ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <TIM_OC3_SetConfig+0xd0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40010000 	.word	0x40010000

08003a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <TIM_OC4_SetConfig+0x9c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d109      	bne.n	8003a98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000

08003ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e050      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d013      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a13      	ldr	r2, [pc, #76]	@ (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40000c00 	.word	0x40000c00
 8003be8:	40014000 	.word	0x40014000

08003bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bec:	b084      	sub	sp, #16
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	f107 001c 	add.w	r0, r7, #28
 8003bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d123      	bne.n	8003c4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 fae2 	bl	800520c <USB_CoreReset>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e01b      	b.n	8003c86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f001 fad6 	bl	800520c <USB_CoreReset>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c78:	e005      	b.n	8003c86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c86:	7fbb      	ldrb	r3, [r7, #30]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10b      	bne.n	8003ca4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f043 0206 	orr.w	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb0:	b004      	add	sp, #16
 8003cb2:	4770      	bx	lr

08003cb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d165      	bne.n	8003d94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a41      	ldr	r2, [pc, #260]	@ (8003dd0 <USB_SetTurnaroundTime+0x11c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d906      	bls.n	8003cde <USB_SetTurnaroundTime+0x2a>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4a40      	ldr	r2, [pc, #256]	@ (8003dd4 <USB_SetTurnaroundTime+0x120>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d202      	bcs.n	8003cde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cd8:	230f      	movs	r3, #15
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e062      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd4 <USB_SetTurnaroundTime+0x120>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d306      	bcc.n	8003cf4 <USB_SetTurnaroundTime+0x40>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd8 <USB_SetTurnaroundTime+0x124>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d202      	bcs.n	8003cf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e057      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a38      	ldr	r2, [pc, #224]	@ (8003dd8 <USB_SetTurnaroundTime+0x124>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d306      	bcc.n	8003d0a <USB_SetTurnaroundTime+0x56>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4a37      	ldr	r2, [pc, #220]	@ (8003ddc <USB_SetTurnaroundTime+0x128>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d202      	bcs.n	8003d0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d04:	230d      	movs	r3, #13
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e04c      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <USB_SetTurnaroundTime+0x128>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d306      	bcc.n	8003d20 <USB_SetTurnaroundTime+0x6c>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4a32      	ldr	r2, [pc, #200]	@ (8003de0 <USB_SetTurnaroundTime+0x12c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d802      	bhi.n	8003d20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e041      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <USB_SetTurnaroundTime+0x12c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d906      	bls.n	8003d36 <USB_SetTurnaroundTime+0x82>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <USB_SetTurnaroundTime+0x130>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d802      	bhi.n	8003d36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d30:	230b      	movs	r3, #11
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e036      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4a2a      	ldr	r2, [pc, #168]	@ (8003de4 <USB_SetTurnaroundTime+0x130>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d906      	bls.n	8003d4c <USB_SetTurnaroundTime+0x98>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <USB_SetTurnaroundTime+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d802      	bhi.n	8003d4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d46:	230a      	movs	r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e02b      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <USB_SetTurnaroundTime+0x134>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d906      	bls.n	8003d62 <USB_SetTurnaroundTime+0xae>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a25      	ldr	r2, [pc, #148]	@ (8003dec <USB_SetTurnaroundTime+0x138>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d202      	bcs.n	8003d62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d5c:	2309      	movs	r3, #9
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e020      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a21      	ldr	r2, [pc, #132]	@ (8003dec <USB_SetTurnaroundTime+0x138>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d306      	bcc.n	8003d78 <USB_SetTurnaroundTime+0xc4>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4a20      	ldr	r2, [pc, #128]	@ (8003df0 <USB_SetTurnaroundTime+0x13c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d802      	bhi.n	8003d78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d72:	2308      	movs	r3, #8
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e015      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <USB_SetTurnaroundTime+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d906      	bls.n	8003d8e <USB_SetTurnaroundTime+0xda>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	@ (8003df4 <USB_SetTurnaroundTime+0x140>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d202      	bcs.n	8003d8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d88:	2307      	movs	r3, #7
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e00a      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d8e:	2306      	movs	r3, #6
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e007      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d9a:	2309      	movs	r3, #9
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e001      	b.n	8003da4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003da0:	2309      	movs	r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	00d8acbf 	.word	0x00d8acbf
 8003dd4:	00e4e1c0 	.word	0x00e4e1c0
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	01067380 	.word	0x01067380
 8003de0:	011a499f 	.word	0x011a499f
 8003de4:	01312cff 	.word	0x01312cff
 8003de8:	014ca43f 	.word	0x014ca43f
 8003dec:	016e3600 	.word	0x016e3600
 8003df0:	01a6ab1f 	.word	0x01a6ab1f
 8003df4:	01e84800 	.word	0x01e84800

08003df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d115      	bne.n	8003e8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e6a:	200a      	movs	r0, #10
 8003e6c:	f7fd f8fc 	bl	8001068 <HAL_Delay>
      ms += 10U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	330a      	adds	r3, #10
 8003e74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f001 f939 	bl	80050ee <USB_GetMode>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d01e      	beq.n	8003ec0 <USB_SetCurrentMode+0x84>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e86:	d9f0      	bls.n	8003e6a <USB_SetCurrentMode+0x2e>
 8003e88:	e01a      	b.n	8003ec0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d115      	bne.n	8003ebc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e9c:	200a      	movs	r0, #10
 8003e9e:	f7fd f8e3 	bl	8001068 <HAL_Delay>
      ms += 10U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	330a      	adds	r3, #10
 8003ea6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f001 f920 	bl	80050ee <USB_GetMode>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <USB_SetCurrentMode+0x84>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eb8:	d9f0      	bls.n	8003e9c <USB_SetCurrentMode+0x60>
 8003eba:	e001      	b.n	8003ec0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e005      	b.n	8003ecc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ec4:	d101      	bne.n	8003eca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e009      	b.n	8003f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3340      	adds	r3, #64	@ 0x40
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b0e      	cmp	r3, #14
 8003f0c:	d9f2      	bls.n	8003ef4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11c      	bne.n	8003f50 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f4e:	e00b      	b.n	8003f68 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10d      	bne.n	8003f98 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f84:	2100      	movs	r1, #0
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f968 	bl	800425c <USB_SetDevSpeed>
 8003f8c:	e008      	b.n	8003fa0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f8e:	2101      	movs	r1, #1
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f963 	bl	800425c <USB_SetDevSpeed>
 8003f96:	e003      	b.n	8003fa0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f98:	2103      	movs	r1, #3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f95e 	bl	800425c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8fa 	bl	800419c <USB_FlushTxFifo>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f924 	bl	8004200 <USB_FlushRxFifo>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e043      	b.n	8004074 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004002:	d118      	bne.n	8004036 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e013      	b.n	8004048 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e008      	b.n	8004048 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	461a      	mov	r2, r3
 8004044:	2300      	movs	r3, #0
 8004046:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004054:	461a      	mov	r2, r3
 8004056:	2300      	movs	r3, #0
 8004058:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004066:	461a      	mov	r2, r3
 8004068:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800406c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3301      	adds	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004078:	461a      	mov	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4293      	cmp	r3, r2
 800407e:	d3b5      	bcc.n	8003fec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	e043      	b.n	800410e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409c:	d118      	bne.n	80040d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e013      	b.n	80040e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c6:	461a      	mov	r2, r3
 80040c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e008      	b.n	80040e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	2300      	movs	r3, #0
 80040e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004106:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3301      	adds	r3, #1
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004112:	461a      	mov	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4293      	cmp	r3, r2
 8004118:	d3b5      	bcc.n	8004086 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800412c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800413a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800413c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f043 0210 	orr.w	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <USB_DevInit+0x2c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800415c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 0208 	orr.w	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004170:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004194:	b004      	add	sp, #16
 8004196:	4770      	bx	lr
 8004198:	803c3800 	.word	0x803c3800

0800419c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041b6:	d901      	bls.n	80041bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e01b      	b.n	80041f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	daf2      	bge.n	80041aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	019b      	lsls	r3, r3, #6
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041e0:	d901      	bls.n	80041e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e006      	b.n	80041f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d0f0      	beq.n	80041d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004218:	d901      	bls.n	800421e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e018      	b.n	8004250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	daf2      	bge.n	800420c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2210      	movs	r2, #16
 800422e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800423c:	d901      	bls.n	8004242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e006      	b.n	8004250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d0f0      	beq.n	8004230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0306 	and.w	r3, r3, #6
 80042a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
 80042b2:	e00a      	b.n	80042ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d002      	beq.n	80042c0 <USB_GetDevSpeed+0x32>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d102      	bne.n	80042c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042c0:	2302      	movs	r3, #2
 80042c2:	75fb      	strb	r3, [r7, #23]
 80042c4:	e001      	b.n	80042ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042c6:	230f      	movs	r3, #15
 80042c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d13a      	bne.n	800436a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	b29b      	uxth	r3, r3
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004312:	4313      	orrs	r3, r2
 8004314:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d155      	bne.n	80043d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	791b      	ldrb	r3, [r3, #4]
 8004346:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004348:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	059b      	lsls	r3, r3, #22
 800434e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004350:	4313      	orrs	r3, r2
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e036      	b.n	80043d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004388:	4313      	orrs	r3, r2
 800438a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11a      	bne.n	80043d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043be:	430b      	orrs	r3, r1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d161      	bne.n	80044c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800441a:	d11f      	bne.n	800445c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004436:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800443a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004456:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800445a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	b29b      	uxth	r3, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800447c:	4013      	ands	r3, r2
 800447e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044a0:	4013      	ands	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	0159      	lsls	r1, r3, #5
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044be:	4619      	mov	r1, r3
 80044c0:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <USB_DeactivateEndpoint+0x1b0>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
 80044c6:	e060      	b.n	800458a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044de:	d11f      	bne.n	8004520 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800451e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	43db      	mvns	r3, r3
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004540:	4013      	ands	r3, r2
 8004542:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	43db      	mvns	r3, r3
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004564:	4013      	ands	r3, r2
 8004566:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	0159      	lsls	r1, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	440b      	add	r3, r1
 800457e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004582:	4619      	mov	r1, r3
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <USB_DeactivateEndpoint+0x1b4>)
 8004586:	4013      	ands	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	ec337800 	.word	0xec337800
 800459c:	eff37800 	.word	0xeff37800

080045a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 817a 	bne.w	80048b6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d132      	bne.n	8004630 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80045ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800460c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004628:	0cdb      	lsrs	r3, r3, #19
 800462a:	04db      	lsls	r3, r3, #19
 800462c:	6113      	str	r3, [r2, #16]
 800462e:	e092      	b.n	8004756 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464a:	0cdb      	lsrs	r3, r3, #19
 800464c:	04db      	lsls	r3, r3, #19
 800464e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800466a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800466e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004672:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11a      	bne.n	80046b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d903      	bls.n	800468e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046ac:	6113      	str	r3, [r2, #16]
 80046ae:	e01b      	b.n	80046e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6919      	ldr	r1, [r3, #16]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	440b      	add	r3, r1
 80046c8:	1e59      	subs	r1, r3, #1
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046d4:	4ba2      	ldr	r3, [pc, #648]	@ (8004960 <USB_EPStartXfer+0x3c0>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	0148      	lsls	r0, r1, #5
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	4401      	add	r1, r0
 80046e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	0148      	lsls	r0, r1, #5
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	4401      	add	r1, r0
 8004706:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	791b      	ldrb	r3, [r3, #4]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d11f      	bne.n	8004756 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004730:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004734:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004754:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d14b      	bne.n	80047f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d128      	bne.n	80047d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d110      	bne.n	80047b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e00f      	b.n	80047d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e165      	b.n	8004ac0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800480e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004812:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d015      	beq.n	8004848 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 814d 	beq.w	8004ac0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004842:	4313      	orrs	r3, r2
 8004844:	634b      	str	r3, [r1, #52]	@ 0x34
 8004846:	e13b      	b.n	8004ac0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004872:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e00f      	b.n	800489a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004898:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	b298      	uxth	r0, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4603      	mov	r3, r0
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f9b8 	bl	8004c24 <USB_WritePacket>
 80048b4:	e104      	b.n	8004ac0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d0:	0cdb      	lsrs	r3, r3, #19
 80048d2:	04db      	lsls	r3, r3, #19
 80048d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d131      	bne.n	8004964 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492e:	69b9      	ldr	r1, [r7, #24]
 8004930:	0148      	lsls	r0, r1, #5
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	4401      	add	r1, r0
 8004936:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800495c:	6113      	str	r3, [r2, #16]
 800495e:	e061      	b.n	8004a24 <USB_EPStartXfer+0x484>
 8004960:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d123      	bne.n	80049b4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	69b9      	ldr	r1, [r7, #24]
 8004984:	0148      	lsls	r0, r1, #5
 8004986:	69f9      	ldr	r1, [r7, #28]
 8004988:	4401      	add	r1, r0
 800498a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e037      	b.n	8004a24 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	8afa      	ldrh	r2, [r7, #22]
 80049d0:	fb03 f202 	mul.w	r2, r3, r2
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	04d9      	lsls	r1, r3, #19
 80049ea:	4b38      	ldr	r3, [pc, #224]	@ (8004acc <USB_EPStartXfer+0x52c>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	0148      	lsls	r0, r1, #5
 80049f2:	69f9      	ldr	r1, [r7, #28]
 80049f4:	4401      	add	r1, r0
 80049f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049fa:	4313      	orrs	r3, r2
 80049fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	0148      	lsls	r0, r1, #5
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	4401      	add	r1, r0
 8004a1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a20:	4313      	orrs	r3, r2
 8004a22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10d      	bne.n	8004a46 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68d9      	ldr	r1, [r3, #12]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a42:	460a      	mov	r2, r1
 8004a44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d128      	bne.n	8004aa0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d110      	bne.n	8004a80 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00f      	b.n	8004aa0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	1ff80000 	.word	0x1ff80000

08004ad0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d14a      	bne.n	8004b84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b06:	f040 8086 	bne.w	8004c16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d902      	bls.n	8004b68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
          break;
 8004b66:	e056      	b.n	8004c16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b80:	d0e7      	beq.n	8004b52 <USB_EPStopXfer+0x82>
 8004b82:	e048      	b.n	8004c16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9c:	d13b      	bne.n	8004c16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	7812      	ldrb	r2, [r2, #0]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3301      	adds	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d902      	bls.n	8004bfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bfa:	e00c      	b.n	8004c16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c14:	d0e7      	beq.n	8004be6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	460b      	mov	r3, r1
 8004c34:	71fb      	strb	r3, [r7, #7]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d123      	bne.n	8004c92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c4a:	88bb      	ldrh	r3, [r7, #4]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e018      	b.n	8004c8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	031a      	lsls	r2, r3, #12
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3e2      	bcc.n	8004c58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3724      	adds	r7, #36	@ 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08b      	sub	sp, #44	@ 0x2c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	e014      	b.n	8004cf6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	3301      	adds	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3e6      	bcc.n	8004ccc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cfe:	8bfb      	ldrh	r3, [r7, #30]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01e      	beq.n	8004d42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	701a      	strb	r2, [r3, #0]
      i++;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	3301      	adds	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d36:	8bfb      	ldrh	r3, [r7, #30]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d3c:	8bfb      	ldrh	r3, [r7, #30]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ea      	bne.n	8004d18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	372c      	adds	r7, #44	@ 0x2c
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d12c      	bne.n	8004dc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	db12      	blt.n	8004da4 <USB_EPSetStall+0x54>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e02b      	b.n	8004e1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db12      	blt.n	8004dfe <USB_EPSetStall+0xae>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00f      	beq.n	8004dfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d128      	bne.n	8004e9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d003      	beq.n	8004e78 <USB_EPClearStall+0x4c>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	791b      	ldrb	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d138      	bne.n	8004eea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e027      	b.n	8004eea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d003      	beq.n	8004eca <USB_EPClearStall+0x9e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d10f      	bne.n	8004eea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f72:	f023 0302 	bic.w	r3, r3, #2
 8004f76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0c1b      	lsrs	r3, r3, #16
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	b29b      	uxth	r3, r3
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005084:	68bb      	ldr	r3, [r7, #8]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	01db      	lsls	r3, r3, #7
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050e0:	68bb      	ldr	r3, [r7, #8]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0301 	and.w	r3, r3, #1
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005124:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005128:	f023 0307 	bic.w	r3, r3, #7
 800512c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	460b      	mov	r3, r1
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	333c      	adds	r3, #60	@ 0x3c
 8005166:	3304      	adds	r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <USB_EP0_OutStart+0xb8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d90a      	bls.n	800518a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005184:	d101      	bne.n	800518a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e037      	b.n	80051fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b8:	f043 0318 	orr.w	r3, r3, #24
 80051bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80051d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10f      	bne.n	80051f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80051f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	4f54300a 	.word	0x4f54300a

0800520c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005224:	d901      	bls.n	800522a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e01b      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	daf2      	bge.n	8005218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e006      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d0f0      	beq.n	8005242 <USB_CoreReset+0x36>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800527c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005280:	f002 fc60 	bl	8007b44 <USBD_static_malloc>
 8005284:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	32b0      	adds	r2, #176	@ 0xb0
 8005296:	2100      	movs	r1, #0
 8005298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800529c:	2302      	movs	r3, #2
 800529e:	e0d4      	b.n	800544a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80052a4:	2100      	movs	r1, #0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f002 fc90 	bl	8007bcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	32b0      	adds	r2, #176	@ 0xb0
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32b0      	adds	r2, #176	@ 0xb0
 80052c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d138      	bne.n	800534a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 80052da:	7819      	ldrb	r1, [r3, #0]
 80052dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052e0:	2202      	movs	r2, #2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f002 fb0b 	bl	80078fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3324      	adds	r3, #36	@ 0x24
 80052fe:	2201      	movs	r2, #1
 8005300:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005302:	4b55      	ldr	r3, [pc, #340]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005304:	7819      	ldrb	r1, [r3, #0]
 8005306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800530a:	2202      	movs	r2, #2
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f002 faf6 	bl	80078fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800532a:	2201      	movs	r2, #1
 800532c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800532e:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <USBD_CDC_Init+0x1ec>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3326      	adds	r3, #38	@ 0x26
 8005344:	2210      	movs	r2, #16
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e035      	b.n	80053b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800534a:	4b42      	ldr	r3, [pc, #264]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 800534c:	7819      	ldrb	r1, [r3, #0]
 800534e:	2340      	movs	r3, #64	@ 0x40
 8005350:	2202      	movs	r2, #2
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f002 fad3 	bl	80078fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005358:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3324      	adds	r3, #36	@ 0x24
 800536e:	2201      	movs	r2, #1
 8005370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005372:	4b39      	ldr	r3, [pc, #228]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	2340      	movs	r3, #64	@ 0x40
 8005378:	2202      	movs	r2, #2
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f002 fabf 	bl	80078fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005380:	4b35      	ldr	r3, [pc, #212]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005398:	2201      	movs	r2, #1
 800539a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800539c:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <USBD_CDC_Init+0x1ec>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 020f 	and.w	r2, r3, #15
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3326      	adds	r3, #38	@ 0x26
 80053b2:	2210      	movs	r2, #16
 80053b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053b6:	4b29      	ldr	r3, [pc, #164]	@ (800545c <USBD_CDC_Init+0x1ec>)
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	2308      	movs	r3, #8
 80053bc:	2203      	movs	r2, #3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 fa9d 	bl	80078fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <USBD_CDC_Init+0x1ec>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3324      	adds	r3, #36	@ 0x24
 80053da:	2201      	movs	r2, #1
 80053dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	33b0      	adds	r3, #176	@ 0xb0
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005414:	2302      	movs	r3, #2
 8005416:	e018      	b.n	800544a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7c1b      	ldrb	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005420:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005422:	7819      	ldrb	r1, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800542a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f002 fb54 	bl	8007adc <USBD_LL_PrepareReceive>
 8005434:	e008      	b.n	8005448 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005438:	7819      	ldrb	r1, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005440:	2340      	movs	r3, #64	@ 0x40
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 fb4a 	bl	8007adc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000097 	.word	0x20000097
 8005458:	20000098 	.word	0x20000098
 800545c:	20000099 	.word	0x20000099

08005460 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800546c:	4b3a      	ldr	r3, [pc, #232]	@ (8005558 <USBD_CDC_DeInit+0xf8>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f002 fa69 	bl	800794a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005478:	4b37      	ldr	r3, [pc, #220]	@ (8005558 <USBD_CDC_DeInit+0xf8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 020f 	and.w	r2, r3, #15
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	3324      	adds	r3, #36	@ 0x24
 800548e:	2200      	movs	r2, #0
 8005490:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005492:	4b32      	ldr	r3, [pc, #200]	@ (800555c <USBD_CDC_DeInit+0xfc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 fa56 	bl	800794a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800549e:	4b2f      	ldr	r3, [pc, #188]	@ (800555c <USBD_CDC_DeInit+0xfc>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054b6:	2200      	movs	r2, #0
 80054b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80054ba:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f002 fa42 	bl	800794a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054c6:	4b26      	ldr	r3, [pc, #152]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 020f 	and.w	r2, r3, #15
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	3324      	adds	r3, #36	@ 0x24
 80054dc:	2200      	movs	r2, #0
 80054de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3326      	adds	r3, #38	@ 0x26
 80054f6:	2200      	movs	r2, #0
 80054f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32b0      	adds	r2, #176	@ 0xb0
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01f      	beq.n	800554c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	33b0      	adds	r3, #176	@ 0xb0
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	32b0      	adds	r2, #176	@ 0xb0
 800552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552e:	4618      	mov	r0, r3
 8005530:	f002 fb16 	bl	8007b60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32b0      	adds	r2, #176	@ 0xb0
 800553e:	2100      	movs	r1, #0
 8005540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000097 	.word	0x20000097
 800555c:	20000098 	.word	0x20000098
 8005560:	20000099 	.word	0x20000099

08005564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32b0      	adds	r2, #176	@ 0xb0
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e0bf      	b.n	8005714 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800559c:	2b00      	cmp	r3, #0
 800559e:	d050      	beq.n	8005642 <USBD_CDC_Setup+0xde>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	f040 80af 	bne.w	8005704 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	88db      	ldrh	r3, [r3, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03a      	beq.n	8005624 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da1b      	bge.n	80055f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	33b0      	adds	r3, #176	@ 0xb0
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	88d2      	ldrh	r2, [r2, #6]
 80055d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b07      	cmp	r3, #7
 80055dc:	bf28      	it	cs
 80055de:	2307      	movcs	r3, #7
 80055e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	89fa      	ldrh	r2, [r7, #14]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 fd47 	bl	800707c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055ee:	e090      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	785a      	ldrb	r2, [r3, #1]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88db      	ldrh	r3, [r3, #6]
 80055fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8005600:	d803      	bhi.n	800560a <USBD_CDC_Setup+0xa6>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	88db      	ldrh	r3, [r3, #6]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	e000      	b.n	800560c <USBD_CDC_Setup+0xa8>
 800560a:	2240      	movs	r2, #64	@ 0x40
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005612:	6939      	ldr	r1, [r7, #16]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800561a:	461a      	mov	r2, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fd59 	bl	80070d4 <USBD_CtlPrepareRx>
      break;
 8005622:	e076      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	33b0      	adds	r3, #176	@ 0xb0
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	7850      	ldrb	r0, [r2, #1]
 800563a:	2200      	movs	r2, #0
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4798      	blx	r3
      break;
 8005640:	e067      	b.n	8005712 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b0b      	cmp	r3, #11
 8005648:	d851      	bhi.n	80056ee <USBD_CDC_Setup+0x18a>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <USBD_CDC_Setup+0xec>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005681 	.word	0x08005681
 8005654:	080056fd 	.word	0x080056fd
 8005658:	080056ef 	.word	0x080056ef
 800565c:	080056ef 	.word	0x080056ef
 8005660:	080056ef 	.word	0x080056ef
 8005664:	080056ef 	.word	0x080056ef
 8005668:	080056ef 	.word	0x080056ef
 800566c:	080056ef 	.word	0x080056ef
 8005670:	080056ef 	.word	0x080056ef
 8005674:	080056ef 	.word	0x080056ef
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056d5 	.word	0x080056d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b03      	cmp	r3, #3
 800568a:	d107      	bne.n	800569c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800568c:	f107 030a 	add.w	r3, r7, #10
 8005690:	2202      	movs	r2, #2
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fcf1 	bl	800707c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800569a:	e032      	b.n	8005702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fc7b 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80056a4:	2303      	movs	r3, #3
 80056a6:	75fb      	strb	r3, [r7, #23]
          break;
 80056a8:	e02b      	b.n	8005702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d107      	bne.n	80056c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056b6:	f107 030d 	add.w	r3, r7, #13
 80056ba:	2201      	movs	r2, #1
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fcdc 	bl	800707c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056c4:	e01d      	b.n	8005702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fc66 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80056ce:	2303      	movs	r3, #3
 80056d0:	75fb      	strb	r3, [r7, #23]
          break;
 80056d2:	e016      	b.n	8005702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d00f      	beq.n	8005700 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fc59 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056ec:	e008      	b.n	8005700 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 fc52 	bl	8006f9a <USBD_CtlError>
          ret = USBD_FAIL;
 80056f6:	2303      	movs	r3, #3
 80056f8:	75fb      	strb	r3, [r7, #23]
          break;
 80056fa:	e002      	b.n	8005702 <USBD_CDC_Setup+0x19e>
          break;
 80056fc:	bf00      	nop
 80056fe:	e008      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
          break;
 8005700:	bf00      	nop
      }
      break;
 8005702:	e006      	b.n	8005712 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 fc47 	bl	8006f9a <USBD_CtlError>
      ret = USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	bf00      	nop
  }

  return (uint8_t)ret;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800572e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32b0      	adds	r2, #176	@ 0xb0
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	e065      	b.n	8005812 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32b0      	adds	r2, #176	@ 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	3318      	adds	r3, #24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02f      	beq.n	80057d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3318      	adds	r3, #24
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 010f 	and.w	r1, r3, #15
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	460b      	mov	r3, r1
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4403      	add	r3, r0
 8005798:	331c      	adds	r3, #28
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	fbb2 f1f3 	udiv	r1, r2, r3
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d112      	bne.n	80057d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3318      	adds	r3, #24
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057c2:	78f9      	ldrb	r1, [r7, #3]
 80057c4:	2300      	movs	r3, #0
 80057c6:	2200      	movs	r2, #0
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f002 f966 	bl	8007a9a <USBD_LL_Transmit>
 80057ce:	e01f      	b.n	8005810 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	33b0      	adds	r3, #176	@ 0xb0
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	33b0      	adds	r3, #176	@ 0xb0
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	32b0      	adds	r2, #176	@ 0xb0
 8005830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005834:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	32b0      	adds	r2, #176	@ 0xb0
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005848:	2303      	movs	r3, #3
 800584a:	e01a      	b.n	8005882 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 f964 	bl	8007b1e <USBD_LL_GetRxDataSize>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	33b0      	adds	r3, #176	@ 0xb0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800587c:	4611      	mov	r1, r2
 800587e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	32b0      	adds	r2, #176	@ 0xb0
 800589c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e024      	b.n	80058f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	33b0      	adds	r3, #176	@ 0xb0
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d019      	beq.n	80058f4 <USBD_CDC_EP0_RxReady+0x6a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80058c6:	2bff      	cmp	r3, #255	@ 0xff
 80058c8:	d014      	beq.n	80058f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	33b0      	adds	r3, #176	@ 0xb0
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80058e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	22ff      	movs	r2, #255	@ 0xff
 80058f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005908:	2182      	movs	r1, #130	@ 0x82
 800590a:	4818      	ldr	r0, [pc, #96]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800590c:	f000 fd0f 	bl	800632e <USBD_GetEpDesc>
 8005910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005912:	2101      	movs	r1, #1
 8005914:	4815      	ldr	r0, [pc, #84]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005916:	f000 fd0a 	bl	800632e <USBD_GetEpDesc>
 800591a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800591c:	2181      	movs	r1, #129	@ 0x81
 800591e:	4813      	ldr	r0, [pc, #76]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005920:	f000 fd05 	bl	800632e <USBD_GetEpDesc>
 8005924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2210      	movs	r2, #16
 8005930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d006      	beq.n	8005946 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2200      	movs	r2, #0
 800593c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005940:	711a      	strb	r2, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005954:	711a      	strb	r2, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2243      	movs	r2, #67	@ 0x43
 800595e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005960:	4b02      	ldr	r3, [pc, #8]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000054 	.word	0x20000054

08005970 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005978:	2182      	movs	r1, #130	@ 0x82
 800597a:	4818      	ldr	r0, [pc, #96]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800597c:	f000 fcd7 	bl	800632e <USBD_GetEpDesc>
 8005980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005982:	2101      	movs	r1, #1
 8005984:	4815      	ldr	r0, [pc, #84]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005986:	f000 fcd2 	bl	800632e <USBD_GetEpDesc>
 800598a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800598c:	2181      	movs	r1, #129	@ 0x81
 800598e:	4813      	ldr	r0, [pc, #76]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005990:	f000 fccd 	bl	800632e <USBD_GetEpDesc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2210      	movs	r2, #16
 80059a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	711a      	strb	r2, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f042 0202 	orr.w	r2, r2, #2
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	711a      	strb	r2, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f042 0202 	orr.w	r2, r2, #2
 80059c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2243      	movs	r2, #67	@ 0x43
 80059ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059d0:	4b02      	ldr	r3, [pc, #8]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000054 	.word	0x20000054

080059e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059e8:	2182      	movs	r1, #130	@ 0x82
 80059ea:	4818      	ldr	r0, [pc, #96]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ec:	f000 fc9f 	bl	800632e <USBD_GetEpDesc>
 80059f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059f2:	2101      	movs	r1, #1
 80059f4:	4815      	ldr	r0, [pc, #84]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059f6:	f000 fc9a 	bl	800632e <USBD_GetEpDesc>
 80059fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059fc:	2181      	movs	r1, #129	@ 0x81
 80059fe:	4813      	ldr	r0, [pc, #76]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a00:	f000 fc95 	bl	800632e <USBD_GetEpDesc>
 8005a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a20:	711a      	strb	r2, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a34:	711a      	strb	r2, [r3, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2243      	movs	r2, #67	@ 0x43
 8005a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a40:	4b02      	ldr	r3, [pc, #8]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000054 	.word	0x20000054

08005a50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a5e:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000010 	.word	0x20000010

08005a70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e009      	b.n	8005a98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	33b0      	adds	r3, #176	@ 0xb0
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	32b0      	adds	r2, #176	@ 0xb0
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e008      	b.n	8005adc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	32b0      	adds	r2, #176	@ 0xb0
 8005afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e004      	b.n	8005b16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32b0      	adds	r2, #176	@ 0xb0
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32b0      	adds	r2, #176	@ 0xb0
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e018      	b.n	8005b84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7c1b      	ldrb	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <USBD_CDC_ReceivePacket+0x68>)
 8005b5c:	7819      	ldrb	r1, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 ffb7 	bl	8007adc <USBD_LL_PrepareReceive>
 8005b6e:	e008      	b.n	8005b82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b70:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <USBD_CDC_ReceivePacket+0x68>)
 8005b72:	7819      	ldrb	r1, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b7a:	2340      	movs	r3, #64	@ 0x40
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 ffad 	bl	8007adc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000098 	.word	0x20000098

08005b90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e01f      	b.n	8005be8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	79fa      	ldrb	r2, [r7, #7]
 8005bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f001 fe27 	bl	8007830 <USBD_LL_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e025      	b.n	8005c54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32ae      	adds	r2, #174	@ 0xae
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32ae      	adds	r2, #174	@ 0xae
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	f107 020e 	add.w	r2, r7, #14
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fe2f 	bl	80078c8 <USBD_LL_Start>
 8005c6a:	4603      	mov	r3, r0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 f90c 	bl	8006f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d01a      	beq.n	8005d68 <USBD_LL_SetupStage+0x72>
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d822      	bhi.n	8005d7c <USBD_LL_SetupStage+0x86>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <USBD_LL_SetupStage+0x4a>
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d00a      	beq.n	8005d54 <USBD_LL_SetupStage+0x5e>
 8005d3e:	e01d      	b.n	8005d7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb63 	bl	8006414 <USBD_StdDevReq>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
      break;
 8005d52:	e020      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fbcb 	bl	80064f8 <USBD_StdItfReq>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	e016      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fc2d 	bl	80065d0 <USBD_StdEPReq>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7a:	e00c      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fdfc 	bl	8007988 <USBD_LL_StallEP>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	bf00      	nop
  }

  return ret;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	460b      	mov	r3, r1
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d16e      	bne.n	8005e96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	f040 8098 	bne.w	8005efc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d913      	bls.n	8005e00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bf28      	it	cs
 8005df2:	4613      	movcs	r3, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f001 f988 	bl	800710e <USBD_CtlContinueRx>
 8005dfe:	e07d      	b.n	8005efc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d014      	beq.n	8005e38 <USBD_LL_DataOutStage+0x98>
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d81d      	bhi.n	8005e4e <USBD_LL_DataOutStage+0xae>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <USBD_LL_DataOutStage+0x7c>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d003      	beq.n	8005e22 <USBD_LL_DataOutStage+0x82>
 8005e1a:	e018      	b.n	8005e4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e20:	e018      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fa64 	bl	80062fa <USBD_CoreFindIF>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75bb      	strb	r3, [r7, #22]
            break;
 8005e36:	e00d      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fa66 	bl	8006314 <USBD_CoreFindEP>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e4c:	e002      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75bb      	strb	r3, [r7, #22]
            break;
 8005e52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e54:	7dbb      	ldrb	r3, [r7, #22]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d119      	bne.n	8005e8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d113      	bne.n	8005e8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e66:	7dba      	ldrb	r2, [r7, #22]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	32ae      	adds	r2, #174	@ 0xae
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e76:	7dba      	ldrb	r2, [r7, #22]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e7e:	7dba      	ldrb	r2, [r7, #22]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	32ae      	adds	r2, #174	@ 0xae
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f001 f94e 	bl	8007130 <USBD_CtlSendStatus>
 8005e94:	e032      	b.n	8005efc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fa37 	bl	8006314 <USBD_CoreFindEP>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eaa:	7dbb      	ldrb	r3, [r7, #22]
 8005eac:	2bff      	cmp	r3, #255	@ 0xff
 8005eae:	d025      	beq.n	8005efc <USBD_LL_DataOutStage+0x15c>
 8005eb0:	7dbb      	ldrb	r3, [r7, #22]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d122      	bne.n	8005efc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d117      	bne.n	8005ef2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ec2:	7dba      	ldrb	r2, [r7, #22]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	32ae      	adds	r2, #174	@ 0xae
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ed2:	7dba      	ldrb	r2, [r7, #22]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eda:	7dba      	ldrb	r2, [r7, #22]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	32ae      	adds	r2, #174	@ 0xae
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	7afa      	ldrb	r2, [r7, #11]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	e000      	b.n	8005efe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f14:	7afb      	ldrb	r3, [r7, #11]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d16f      	bne.n	8005ffa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d15a      	bne.n	8005fe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d914      	bls.n	8005f60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f001 f8b0 	bl	80070b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fdbf 	bl	8007adc <USBD_LL_PrepareReceive>
 8005f5e:	e03f      	b.n	8005fe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d11c      	bne.n	8005fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d316      	bcc.n	8005fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20f      	bcs.n	8005fa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f891 	bl	80070b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 fd9c 	bl	8007adc <USBD_LL_PrepareReceive>
 8005fa4:	e01c      	b.n	8005fe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d10f      	bne.n	8005fd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 fcd7 	bl	8007988 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 f8bb 	bl	8007156 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d03a      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fe42 	bl	8005c74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ff8:	e032      	b.n	8006060 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f985 	bl	8006314 <USBD_CoreFindEP>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	2bff      	cmp	r3, #255	@ 0xff
 8006012:	d025      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d122      	bne.n	8006060 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d11c      	bne.n	8006060 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006026:	7dfa      	ldrb	r2, [r7, #23]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	32ae      	adds	r2, #174	@ 0xae
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d014      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006036:	7dfa      	ldrb	r2, [r7, #23]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800603e:	7dfa      	ldrb	r2, [r7, #23]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	32ae      	adds	r2, #174	@ 0xae
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	7afa      	ldrb	r2, [r7, #11]
 800604c:	4611      	mov	r1, r2
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
 8006052:	4603      	mov	r3, r0
 8006054:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800605c:	7dbb      	ldrb	r3, [r7, #22]
 800605e:	e000      	b.n	8006062 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6852      	ldr	r2, [r2, #4]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	4611      	mov	r1, r2
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060d0:	2340      	movs	r3, #64	@ 0x40
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fc11 	bl	80078fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	@ 0x40
 80060e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fc03 	bl	80078fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2240      	movs	r2, #64	@ 0x40
 8006102:	621a      	str	r2, [r3, #32]

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b04      	cmp	r3, #4
 8006140:	d006      	beq.n	8006150 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b04      	cmp	r3, #4
 8006178:	d106      	bne.n	8006188 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d110      	bne.n	80061cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32ae      	adds	r2, #174	@ 0xae
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01c      	b.n	8006232 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d115      	bne.n	8006230 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32ae      	adds	r2, #174	@ 0xae
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32ae      	adds	r2, #174	@ 0xae
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4611      	mov	r1, r2
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32ae      	adds	r2, #174	@ 0xae
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	e01c      	b.n	8006296 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d115      	bne.n	8006294 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	32ae      	adds	r2, #174	@ 0xae
 8006272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	@ 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	4611      	mov	r1, r2
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	4611      	mov	r1, r2
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006306:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006320:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	885b      	ldrh	r3, [r3, #2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	4293      	cmp	r3, r2
 8006352:	d91f      	bls.n	8006394 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800635a:	e013      	b.n	8006384 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800635c:	f107 030a 	add.w	r3, r7, #10
 8006360:	4619      	mov	r1, r3
 8006362:	6978      	ldr	r0, [r7, #20]
 8006364:	f000 f81b 	bl	800639e <USBD_GetNextDesc>
 8006368:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b05      	cmp	r3, #5
 8006370:	d108      	bne.n	8006384 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	429a      	cmp	r2, r3
 800637e:	d008      	beq.n	8006392 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	b29a      	uxth	r2, r3
 800638a:	897b      	ldrh	r3, [r7, #10]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8e5      	bhi.n	800635c <USBD_GetEpDesc+0x2e>
 8006390:	e000      	b.n	8006394 <USBD_GetEpDesc+0x66>
          break;
 8006392:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006394:	693b      	ldr	r3, [r7, #16]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3301      	adds	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063f4:	8a3b      	ldrh	r3, [r7, #16]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063fe:	4313      	orrs	r3, r2
 8006400:	b21b      	sxth	r3, r3
 8006402:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006404:	89fb      	ldrh	r3, [r7, #14]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d005      	beq.n	800643a <USBD_StdDevReq+0x26>
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d857      	bhi.n	80064e2 <USBD_StdDevReq+0xce>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <USBD_StdDevReq+0x42>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d153      	bne.n	80064e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	32ae      	adds	r2, #174	@ 0xae
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e04a      	b.n	80064ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d83b      	bhi.n	80064d6 <USBD_StdDevReq+0xc2>
 800645e:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <USBD_StdDevReq+0x50>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	080064b9 	.word	0x080064b9
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064d7 	.word	0x080064d7
 8006470:	080064c3 	.word	0x080064c3
 8006474:	080064d7 	.word	0x080064d7
 8006478:	08006497 	.word	0x08006497
 800647c:	0800648d 	.word	0x0800648d
 8006480:	080064d7 	.word	0x080064d7
 8006484:	080064af 	.word	0x080064af
 8006488:	080064a1 	.word	0x080064a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa3c 	bl	800690c <USBD_GetDescriptor>
          break;
 8006494:	e024      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fba1 	bl	8006be0 <USBD_SetAddress>
          break;
 800649e:	e01f      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fbe0 	bl	8006c68 <USBD_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
          break;
 80064ac:	e018      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc83 	bl	8006dbc <USBD_GetConfig>
          break;
 80064b6:	e013      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fcb4 	bl	8006e28 <USBD_GetStatus>
          break;
 80064c0:	e00e      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fce3 	bl	8006e90 <USBD_SetFeature>
          break;
 80064ca:	e009      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd07 	bl	8006ee2 <USBD_ClrFeature>
          break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd5e 	bl	8006f9a <USBD_CtlError>
          break;
 80064de:	bf00      	nop
      }
      break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd58 	bl	8006f9a <USBD_CtlError>
      break;
 80064ea:	bf00      	nop
  }

  return ret;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	d005      	beq.n	800651e <USBD_StdItfReq+0x26>
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d852      	bhi.n	80065bc <USBD_StdItfReq+0xc4>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <USBD_StdItfReq+0x26>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d14e      	bne.n	80065bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	2b02      	cmp	r3, #2
 800652a:	d840      	bhi.n	80065ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	889b      	ldrh	r3, [r3, #4]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d836      	bhi.n	80065a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	889b      	ldrh	r3, [r3, #4]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fedb 	bl	80062fa <USBD_CoreFindIF>
 8006544:	4603      	mov	r3, r0
 8006546:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2bff      	cmp	r3, #255	@ 0xff
 800654c:	d01d      	beq.n	800658a <USBD_StdItfReq+0x92>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11a      	bne.n	800658a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006554:	7bba      	ldrb	r2, [r7, #14]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32ae      	adds	r2, #174	@ 0xae
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006564:	7bba      	ldrb	r2, [r7, #14]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800656c:	7bba      	ldrb	r2, [r7, #14]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32ae      	adds	r2, #174	@ 0xae
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006582:	e004      	b.n	800658e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006588:	e001      	b.n	800658e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d110      	bne.n	80065b8 <USBD_StdItfReq+0xc0>
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fdc7 	bl	8007130 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065a2:	e009      	b.n	80065b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fcf7 	bl	8006f9a <USBD_CtlError>
          break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fcf2 	bl	8006f9a <USBD_CtlError>
          break;
 80065b6:	e000      	b.n	80065ba <USBD_StdItfReq+0xc2>
          break;
 80065b8:	bf00      	nop
      }
      break;
 80065ba:	e004      	b.n	80065c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fceb 	bl	8006f9a <USBD_CtlError>
      break;
 80065c4:	bf00      	nop
  }

  return ret;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	889b      	ldrh	r3, [r3, #4]
 80065e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d007      	beq.n	8006600 <USBD_StdEPReq+0x30>
 80065f0:	2b40      	cmp	r3, #64	@ 0x40
 80065f2:	f200 817f 	bhi.w	80068f4 <USBD_StdEPReq+0x324>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02a      	beq.n	8006650 <USBD_StdEPReq+0x80>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 817a 	bne.w	80068f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fe85 	bl	8006314 <USBD_CoreFindEP>
 800660a:	4603      	mov	r3, r0
 800660c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800660e:	7b7b      	ldrb	r3, [r7, #13]
 8006610:	2bff      	cmp	r3, #255	@ 0xff
 8006612:	f000 8174 	beq.w	80068fe <USBD_StdEPReq+0x32e>
 8006616:	7b7b      	ldrb	r3, [r7, #13]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 8170 	bne.w	80068fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800661e:	7b7a      	ldrb	r2, [r7, #13]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006626:	7b7a      	ldrb	r2, [r7, #13]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	32ae      	adds	r2, #174	@ 0xae
 800662c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8163 	beq.w	80068fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	@ 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800664e:	e156      	b.n	80068fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d008      	beq.n	800666a <USBD_StdEPReq+0x9a>
 8006658:	2b03      	cmp	r3, #3
 800665a:	f300 8145 	bgt.w	80068e8 <USBD_StdEPReq+0x318>
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809b 	beq.w	800679a <USBD_StdEPReq+0x1ca>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d03c      	beq.n	80066e2 <USBD_StdEPReq+0x112>
 8006668:	e13e      	b.n	80068e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d002      	beq.n	800667c <USBD_StdEPReq+0xac>
 8006676:	2b03      	cmp	r3, #3
 8006678:	d016      	beq.n	80066a8 <USBD_StdEPReq+0xd8>
 800667a:	e02c      	b.n	80066d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <USBD_StdEPReq+0xce>
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b80      	cmp	r3, #128	@ 0x80
 8006686:	d00a      	beq.n	800669e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f97b 	bl	8007988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006692:	2180      	movs	r1, #128	@ 0x80
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f977 	bl	8007988 <USBD_LL_StallEP>
 800669a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800669c:	e020      	b.n	80066e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fc7a 	bl	8006f9a <USBD_CtlError>
              break;
 80066a6:	e01b      	b.n	80066e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	885b      	ldrh	r3, [r3, #2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <USBD_StdEPReq+0xfe>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b80      	cmp	r3, #128	@ 0x80
 80066ba:	d008      	beq.n	80066ce <USBD_StdEPReq+0xfe>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f95d 	bl	8007988 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fd2e 	bl	8007130 <USBD_CtlSendStatus>

              break;
 80066d4:	e004      	b.n	80066e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fc5e 	bl	8006f9a <USBD_CtlError>
              break;
 80066de:	bf00      	nop
          }
          break;
 80066e0:	e107      	b.n	80068f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0x124>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d016      	beq.n	8006720 <USBD_StdEPReq+0x150>
 80066f2:	e04b      	b.n	800678c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <USBD_StdEPReq+0x146>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b80      	cmp	r3, #128	@ 0x80
 80066fe:	d00a      	beq.n	8006716 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f93f 	bl	8007988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f93b 	bl	8007988 <USBD_LL_StallEP>
 8006712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006714:	e040      	b.n	8006798 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc3e 	bl	8006f9a <USBD_CtlError>
              break;
 800671e:	e03b      	b.n	8006798 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d136      	bne.n	8006796 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f945 	bl	80079c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fcf7 	bl	8007130 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fde4 	bl	8006314 <USBD_CoreFindEP>
 800674c:	4603      	mov	r3, r0
 800674e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006750:	7b7b      	ldrb	r3, [r7, #13]
 8006752:	2bff      	cmp	r3, #255	@ 0xff
 8006754:	d01f      	beq.n	8006796 <USBD_StdEPReq+0x1c6>
 8006756:	7b7b      	ldrb	r3, [r7, #13]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11c      	bne.n	8006796 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800675c:	7b7a      	ldrb	r2, [r7, #13]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006764:	7b7a      	ldrb	r2, [r7, #13]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32ae      	adds	r2, #174	@ 0xae
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006774:	7b7a      	ldrb	r2, [r7, #13]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	32ae      	adds	r2, #174	@ 0xae
 800677a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800678a:	e004      	b.n	8006796 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc03 	bl	8006f9a <USBD_CtlError>
              break;
 8006794:	e000      	b.n	8006798 <USBD_StdEPReq+0x1c8>
              break;
 8006796:	bf00      	nop
          }
          break;
 8006798:	e0ab      	b.n	80068f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d002      	beq.n	80067ac <USBD_StdEPReq+0x1dc>
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d032      	beq.n	8006810 <USBD_StdEPReq+0x240>
 80067aa:	e097      	b.n	80068dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <USBD_StdEPReq+0x1f2>
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d004      	beq.n	80067c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbed 	bl	8006f9a <USBD_CtlError>
                break;
 80067c0:	e091      	b.n	80068e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0b      	bge.n	80067e2 <USBD_StdEPReq+0x212>
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	3310      	adds	r3, #16
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	e00b      	b.n	80067fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2202      	movs	r2, #2
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc37 	bl	800707c <USBD_CtlSendData>
              break;
 800680e:	e06a      	b.n	80068e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da11      	bge.n	800683c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	f003 020f 	and.w	r2, r3, #15
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3324      	adds	r3, #36	@ 0x24
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d117      	bne.n	8006862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fbb0 	bl	8006f9a <USBD_CtlError>
                  break;
 800683a:	e054      	b.n	80068e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb9d 	bl	8006f9a <USBD_CtlError>
                  break;
 8006860:	e041      	b.n	80068e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	da0b      	bge.n	8006882 <USBD_StdEPReq+0x2b2>
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	3310      	adds	r3, #16
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	3304      	adds	r3, #4
 8006880:	e00b      	b.n	800689a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	3304      	adds	r3, #4
 800689a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <USBD_StdEPReq+0x2d8>
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	2b80      	cmp	r3, #128	@ 0x80
 80068a6:	d103      	bne.n	80068b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e00e      	b.n	80068ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 f8a5 	bl	8007a04 <USBD_LL_IsStallEP>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e002      	b.n	80068ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2202      	movs	r2, #2
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fbd1 	bl	800707c <USBD_CtlSendData>
              break;
 80068da:	e004      	b.n	80068e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb5b 	bl	8006f9a <USBD_CtlError>
              break;
 80068e4:	bf00      	nop
          }
          break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb55 	bl	8006f9a <USBD_CtlError>
          break;
 80068f0:	bf00      	nop
      }
      break;
 80068f2:	e005      	b.n	8006900 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fb4f 	bl	8006f9a <USBD_CtlError>
      break;
 80068fc:	e000      	b.n	8006900 <USBD_StdEPReq+0x330>
      break;
 80068fe:	bf00      	nop
  }

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	2b06      	cmp	r3, #6
 800692e:	f200 8128 	bhi.w	8006b82 <USBD_GetDescriptor+0x276>
 8006932:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <USBD_GetDescriptor+0x2c>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006955 	.word	0x08006955
 800693c:	0800696d 	.word	0x0800696d
 8006940:	080069ad 	.word	0x080069ad
 8006944:	08006b83 	.word	0x08006b83
 8006948:	08006b83 	.word	0x08006b83
 800694c:	08006b23 	.word	0x08006b23
 8006950:	08006b4f 	.word	0x08006b4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      break;
 800696a:	e112      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7c1b      	ldrb	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	f107 0208 	add.w	r2, r7, #8
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	2202      	movs	r2, #2
 800698c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800698e:	e100      	b.n	8006b92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	f107 0208 	add.w	r2, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	2202      	movs	r2, #2
 80069a8:	701a      	strb	r2, [r3, #0]
      break;
 80069aa:	e0f2      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	f200 80ac 	bhi.w	8006b10 <USBD_GetDescriptor+0x204>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <USBD_GetDescriptor+0xb4>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d9 	.word	0x080069d9
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	08006a41 	.word	0x08006a41
 80069cc:	08006a75 	.word	0x08006a75
 80069d0:	08006aa9 	.word	0x08006aa9
 80069d4:	08006add 	.word	0x08006add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fa:	e091      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 facb 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0a:	e089      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2e:	e077      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fab1 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3e:	e06f      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	7c12      	ldrb	r2, [r2, #16]
 8006a58:	f107 0108 	add.w	r1, r7, #8
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a62:	e05d      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa97 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	72fb      	strb	r3, [r7, #11]
          break;
 8006a72:	e055      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a96:	e043      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa7d 	bl	8006f9a <USBD_CtlError>
            err++;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006aa6:	e03b      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7c12      	ldrb	r2, [r2, #16]
 8006ac0:	f107 0108 	add.w	r1, r7, #8
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
 8006ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aca:	e029      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa63 	bl	8006f9a <USBD_CtlError>
            err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ada:	e021      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e00f      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa49 	bl	8006f9a <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e007      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa41 	bl	8006f9a <USBD_CtlError>
          err++;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b1e:	bf00      	nop
      }
      break;
 8006b20:	e037      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7c1b      	ldrb	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	4610      	mov	r0, r2
 8006b38:	4798      	blx	r3
 8006b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b3c:	e029      	b.n	8006b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa2a 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4c:	e021      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7c1b      	ldrb	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	f107 0208 	add.w	r2, r7, #8
 8006b62:	4610      	mov	r0, r2
 8006b64:	4798      	blx	r3
 8006b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b70:	e00f      	b.n	8006b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa10 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b80:	e007      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa08 	bl	8006f9a <USBD_CtlError>
      err++;
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b90:	bf00      	nop
  }

  if (err != 0U)
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11e      	bne.n	8006bd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d016      	beq.n	8006bce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00e      	beq.n	8006bc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88da      	ldrh	r2, [r3, #6]
 8006baa:	893b      	ldrh	r3, [r7, #8]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bf28      	it	cs
 8006bb0:	4613      	movcs	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bb6:	893b      	ldrh	r3, [r7, #8]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa5d 	bl	800707c <USBD_CtlSendData>
 8006bc2:	e009      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9e7 	bl	8006f9a <USBD_CtlError>
 8006bcc:	e004      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 faae 	bl	8007130 <USBD_CtlSendStatus>
 8006bd4:	e000      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    return;
 8006bd6:	bf00      	nop
  }
}
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	889b      	ldrh	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d131      	bne.n	8006c56 <USBD_SetAddress+0x76>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12d      	bne.n	8006c56 <USBD_SetAddress+0x76>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	885b      	ldrh	r3, [r3, #2]
 8006bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c00:	d829      	bhi.n	8006c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d104      	bne.n	8006c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9bc 	bl	8006f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c22:	e01d      	b.n	8006c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 ff13 	bl	8007a5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa7a 	bl	8007130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	e009      	b.n	8006c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c54:	e004      	b.n	8006c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f99e 	bl	8006f9a <USBD_CtlError>
  }
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c80:	4b4d      	ldr	r3, [pc, #308]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d905      	bls.n	8006c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f985 	bl	8006f9a <USBD_CtlError>
    return USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e08c      	b.n	8006dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d002      	beq.n	8006ca6 <USBD_SetConfig+0x3e>
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d029      	beq.n	8006cf8 <USBD_SetConfig+0x90>
 8006ca4:	e075      	b.n	8006d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ca6:	4b44      	ldr	r3, [pc, #272]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d020      	beq.n	8006cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cae:	4b42      	ldr	r3, [pc, #264]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe ffe3 	bl	8005c8a <USBD_SetClassConfig>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f962 	bl	8006f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cde:	e065      	b.n	8006dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa25 	bl	8007130 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2203      	movs	r2, #3
 8006cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cee:	e05d      	b.n	8006dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa1d 	bl	8007130 <USBD_CtlSendStatus>
      break;
 8006cf6:	e059      	b.n	8006dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d112      	bne.n	8006d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d08:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d12:	4b29      	ldr	r3, [pc, #164]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe ffd2 	bl	8005cc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa06 	bl	8007130 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d24:	e042      	b.n	8006dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d26:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d02a      	beq.n	8006d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fe ffc0 	bl	8005cc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d42:	4b1d      	ldr	r3, [pc, #116]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fe ff99 	bl	8005c8a <USBD_SetClassConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00f      	beq.n	8006d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f918 	bl	8006f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe ffa5 	bl	8005cc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d80:	e014      	b.n	8006dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9d4 	bl	8007130 <USBD_CtlSendStatus>
      break;
 8006d88:	e010      	b.n	8006dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9d0 	bl	8007130 <USBD_CtlSendStatus>
      break;
 8006d90:	e00c      	b.n	8006dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f900 	bl	8006f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fe ff8e 	bl	8005cc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	2000032c 	.word	0x2000032c

08006dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d004      	beq.n	8006dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8e2 	bl	8006f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dd6:	e023      	b.n	8006e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	dc02      	bgt.n	8006dea <USBD_GetConfig+0x2e>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc03      	bgt.n	8006df0 <USBD_GetConfig+0x34>
 8006de8:	e015      	b.n	8006e16 <USBD_GetConfig+0x5a>
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d00b      	beq.n	8006e06 <USBD_GetConfig+0x4a>
 8006dee:	e012      	b.n	8006e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f93c 	bl	800707c <USBD_CtlSendData>
        break;
 8006e04:	e00c      	b.n	8006e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f934 	bl	800707c <USBD_CtlSendData>
        break;
 8006e14:	e004      	b.n	8006e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8be 	bl	8006f9a <USBD_CtlError>
        break;
 8006e1e:	bf00      	nop
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d81e      	bhi.n	8006e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	88db      	ldrh	r3, [r3, #6]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d004      	beq.n	8006e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8a5 	bl	8006f9a <USBD_CtlError>
        break;
 8006e50:	e01a      	b.n	8006e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f043 0202 	orr.w	r2, r3, #2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	330c      	adds	r3, #12
 8006e72:	2202      	movs	r2, #2
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f900 	bl	800707c <USBD_CtlSendData>
      break;
 8006e7c:	e004      	b.n	8006e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f88a 	bl	8006f9a <USBD_CtlError>
      break;
 8006e86:	bf00      	nop
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d107      	bne.n	8006eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f940 	bl	8007130 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006eb0:	e013      	b.n	8006eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d10b      	bne.n	8006ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	889b      	ldrh	r3, [r3, #4]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f930 	bl	8007130 <USBD_CtlSendStatus>
}
 8006ed0:	e003      	b.n	8006eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f860 	bl	8006f9a <USBD_CtlError>
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d80b      	bhi.n	8006f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d10c      	bne.n	8006f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f910 	bl	8007130 <USBD_CtlSendStatus>
      }
      break;
 8006f10:	e004      	b.n	8006f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f840 	bl	8006f9a <USBD_CtlError>
      break;
 8006f1a:	e000      	b.n	8006f1e <USBD_ClrFeature+0x3c>
      break;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fa40 	bl	80063d6 <SWAPBYTE>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fa33 	bl	80063d6 <SWAPBYTE>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fa26 	bl	80063d6 <SWAPBYTE>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	80da      	strh	r2, [r3, #6]
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fa4:	2180      	movs	r1, #128	@ 0x80
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fcee 	bl	8007988 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fcea 	bl	8007988 <USBD_LL_StallEP>
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d036      	beq.n	8007040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f000 f836 	bl	8007048 <USBD_GetLen>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	3301      	adds	r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	4413      	add	r3, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	2203      	movs	r2, #3
 8007004:	701a      	strb	r2, [r3, #0]
  idx++;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	3301      	adds	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800700c:	e013      	b.n	8007036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4413      	add	r3, r2
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3301      	adds	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
    idx++;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	3301      	adds	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4413      	add	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	3301      	adds	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e7      	bne.n	800700e <USBD_GetString+0x52>
 800703e:	e000      	b.n	8007042 <USBD_GetString+0x86>
    return;
 8007040:	bf00      	nop
  }
}
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007058:	e005      	b.n	8007066 <USBD_GetLen+0x1e>
  {
    len++;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	3301      	adds	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3301      	adds	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f5      	bne.n	800705a <USBD_GetLen+0x12>
  }

  return len;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2202      	movs	r2, #2
 800708c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	2100      	movs	r1, #0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fcf9 	bl	8007a9a <USBD_LL_Transmit>

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	2100      	movs	r1, #0
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fce8 	bl	8007a9a <USBD_LL_Transmit>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2203      	movs	r2, #3
 80070e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	2100      	movs	r1, #0
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fcec 	bl	8007adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	2100      	movs	r1, #0
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fcdb 	bl	8007adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2204      	movs	r2, #4
 800713c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fca7 	bl	8007a9a <USBD_LL_Transmit>

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2205      	movs	r2, #5
 8007162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fcb5 	bl	8007adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007180:	2200      	movs	r2, #0
 8007182:	4912      	ldr	r1, [pc, #72]	@ (80071cc <MX_USB_DEVICE_Init+0x50>)
 8007184:	4812      	ldr	r0, [pc, #72]	@ (80071d0 <MX_USB_DEVICE_Init+0x54>)
 8007186:	f7fe fd03 	bl	8005b90 <USBD_Init>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007190:	f7f9 fd82 	bl	8000c98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007194:	490f      	ldr	r1, [pc, #60]	@ (80071d4 <MX_USB_DEVICE_Init+0x58>)
 8007196:	480e      	ldr	r0, [pc, #56]	@ (80071d0 <MX_USB_DEVICE_Init+0x54>)
 8007198:	f7fe fd2a 	bl	8005bf0 <USBD_RegisterClass>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071a2:	f7f9 fd79 	bl	8000c98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071a6:	490c      	ldr	r1, [pc, #48]	@ (80071d8 <MX_USB_DEVICE_Init+0x5c>)
 80071a8:	4809      	ldr	r0, [pc, #36]	@ (80071d0 <MX_USB_DEVICE_Init+0x54>)
 80071aa:	f7fe fc61 	bl	8005a70 <USBD_CDC_RegisterInterface>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071b4:	f7f9 fd70 	bl	8000c98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071b8:	4805      	ldr	r0, [pc, #20]	@ (80071d0 <MX_USB_DEVICE_Init+0x54>)
 80071ba:	f7fe fd4f 	bl	8005c5c <USBD_Start>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071c4:	f7f9 fd68 	bl	8000c98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071c8:	bf00      	nop
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	200000b0 	.word	0x200000b0
 80071d0:	20000330 	.word	0x20000330
 80071d4:	2000001c 	.word	0x2000001c
 80071d8:	2000009c 	.word	0x2000009c

080071dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071e0:	2200      	movs	r2, #0
 80071e2:	4905      	ldr	r1, [pc, #20]	@ (80071f8 <CDC_Init_FS+0x1c>)
 80071e4:	4805      	ldr	r0, [pc, #20]	@ (80071fc <CDC_Init_FS+0x20>)
 80071e6:	f7fe fc5d 	bl	8005aa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071ea:	4905      	ldr	r1, [pc, #20]	@ (8007200 <CDC_Init_FS+0x24>)
 80071ec:	4803      	ldr	r0, [pc, #12]	@ (80071fc <CDC_Init_FS+0x20>)
 80071ee:	f7fe fc7b 	bl	8005ae8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000a14 	.word	0x20000a14
 80071fc:	20000330 	.word	0x20000330
 8007200:	20000614 	.word	0x20000614

08007204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800720a:	4618      	mov	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
 8007220:	4613      	mov	r3, r2
 8007222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b23      	cmp	r3, #35	@ 0x23
 8007228:	f200 808c 	bhi.w	8007344 <CDC_Control_FS+0x130>
 800722c:	a201      	add	r2, pc, #4	@ (adr r2, 8007234 <CDC_Control_FS+0x20>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007345 	.word	0x08007345
 8007238:	08007345 	.word	0x08007345
 800723c:	08007345 	.word	0x08007345
 8007240:	08007345 	.word	0x08007345
 8007244:	08007345 	.word	0x08007345
 8007248:	08007345 	.word	0x08007345
 800724c:	08007345 	.word	0x08007345
 8007250:	08007345 	.word	0x08007345
 8007254:	08007345 	.word	0x08007345
 8007258:	08007345 	.word	0x08007345
 800725c:	08007345 	.word	0x08007345
 8007260:	08007345 	.word	0x08007345
 8007264:	08007345 	.word	0x08007345
 8007268:	08007345 	.word	0x08007345
 800726c:	08007345 	.word	0x08007345
 8007270:	08007345 	.word	0x08007345
 8007274:	08007345 	.word	0x08007345
 8007278:	08007345 	.word	0x08007345
 800727c:	08007345 	.word	0x08007345
 8007280:	08007345 	.word	0x08007345
 8007284:	08007345 	.word	0x08007345
 8007288:	08007345 	.word	0x08007345
 800728c:	08007345 	.word	0x08007345
 8007290:	08007345 	.word	0x08007345
 8007294:	08007345 	.word	0x08007345
 8007298:	08007345 	.word	0x08007345
 800729c:	08007345 	.word	0x08007345
 80072a0:	08007345 	.word	0x08007345
 80072a4:	08007345 	.word	0x08007345
 80072a8:	08007345 	.word	0x08007345
 80072ac:	08007345 	.word	0x08007345
 80072b0:	08007345 	.word	0x08007345
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	080072ff 	.word	0x080072ff
 80072bc:	08007345 	.word	0x08007345
 80072c0:	08007345 	.word	0x08007345
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	4b22      	ldr	r3, [pc, #136]	@ (8007354 <CDC_Control_FS+0x140>)
 80072ca:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	785a      	ldrb	r2, [r3, #1]
 80072d0:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <CDC_Control_FS+0x140>)
 80072d2:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	789a      	ldrb	r2, [r3, #2]
 80072d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007354 <CDC_Control_FS+0x140>)
 80072da:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	78da      	ldrb	r2, [r3, #3]
 80072e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007354 <CDC_Control_FS+0x140>)
 80072e2:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	791a      	ldrb	r2, [r3, #4]
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <CDC_Control_FS+0x140>)
 80072ea:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	795a      	ldrb	r2, [r3, #5]
 80072f0:	4b18      	ldr	r3, [pc, #96]	@ (8007354 <CDC_Control_FS+0x140>)
 80072f2:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	799a      	ldrb	r2, [r3, #6]
 80072f8:	4b16      	ldr	r3, [pc, #88]	@ (8007354 <CDC_Control_FS+0x140>)
 80072fa:	719a      	strb	r2, [r3, #6]

    break;
 80072fc:	e023      	b.n	8007346 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buffer[0];
 80072fe:	4b15      	ldr	r3, [pc, #84]	@ (8007354 <CDC_Control_FS+0x140>)
 8007300:	781a      	ldrb	r2, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a12      	ldr	r2, [pc, #72]	@ (8007354 <CDC_Control_FS+0x140>)
 800730c:	7852      	ldrb	r2, [r2, #1]
 800730e:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3302      	adds	r3, #2
 8007314:	4a0f      	ldr	r2, [pc, #60]	@ (8007354 <CDC_Control_FS+0x140>)
 8007316:	7892      	ldrb	r2, [r2, #2]
 8007318:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	3303      	adds	r3, #3
 800731e:	4a0d      	ldr	r2, [pc, #52]	@ (8007354 <CDC_Control_FS+0x140>)
 8007320:	78d2      	ldrb	r2, [r2, #3]
 8007322:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	3304      	adds	r3, #4
 8007328:	4a0a      	ldr	r2, [pc, #40]	@ (8007354 <CDC_Control_FS+0x140>)
 800732a:	7912      	ldrb	r2, [r2, #4]
 800732c:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	3305      	adds	r3, #5
 8007332:	4a08      	ldr	r2, [pc, #32]	@ (8007354 <CDC_Control_FS+0x140>)
 8007334:	7952      	ldrb	r2, [r2, #5]
 8007336:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	3306      	adds	r3, #6
 800733c:	4a05      	ldr	r2, [pc, #20]	@ (8007354 <CDC_Control_FS+0x140>)
 800733e:	7992      	ldrb	r2, [r2, #6]
 8007340:	701a      	strb	r2, [r3, #0]

    break;
 8007342:	e000      	b.n	8007346 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007344:	bf00      	nop
  }

  return (USBD_OK);
 8007346:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	2000060c 	.word	0x2000060c

08007358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4809      	ldr	r0, [pc, #36]	@ (800738c <CDC_Receive_FS+0x34>)
 8007366:	f7fe fbbf 	bl	8005ae8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800736a:	4808      	ldr	r0, [pc, #32]	@ (800738c <CDC_Receive_FS+0x34>)
 800736c:	f7fe fbda 	bl	8005b24 <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t) *Len;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	73fb      	strb	r3, [r7, #15]
  USBRxHandler(UserRxBufferFS,len);
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	b29b      	uxth	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	4804      	ldr	r0, [pc, #16]	@ (8007390 <CDC_Receive_FS+0x38>)
 800737e:	f7f9 f8a1 	bl	80004c4 <USBRxHandler>
  return (USBD_OK);
 8007382:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000330 	.word	0x20000330
 8007390:	20000614 	.word	0x20000614

08007394 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2212      	movs	r2, #18
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073ca:	4b03      	ldr	r3, [pc, #12]	@ (80073d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	200000cc 	.word	0x200000cc

080073dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2204      	movs	r2, #4
 80073ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ee:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	200000e0 	.word	0x200000e0

08007400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4907      	ldr	r1, [pc, #28]	@ (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
 8007416:	4808      	ldr	r0, [pc, #32]	@ (8007438 <USBD_FS_ProductStrDescriptor+0x38>)
 8007418:	f7ff fdd0 	bl	8006fbc <USBD_GetString>
 800741c:	e004      	b.n	8007428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
 8007422:	4805      	ldr	r0, [pc, #20]	@ (8007438 <USBD_FS_ProductStrDescriptor+0x38>)
 8007424:	f7ff fdca 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000e14 	.word	0x20000e14
 8007438:	08007c58 	.word	0x08007c58

0800743c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	6039      	str	r1, [r7, #0]
 8007446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	4904      	ldr	r1, [pc, #16]	@ (800745c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800744c:	4804      	ldr	r0, [pc, #16]	@ (8007460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800744e:	f7ff fdb5 	bl	8006fbc <USBD_GetString>
  return USBD_StrDesc;
 8007452:	4b02      	ldr	r3, [pc, #8]	@ (800745c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000e14 	.word	0x20000e14
 8007460:	08007c70 	.word	0x08007c70

08007464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	221a      	movs	r2, #26
 8007474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007476:	f000 f843 	bl	8007500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800747a:	4b02      	ldr	r3, [pc, #8]	@ (8007484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200000e4 	.word	0x200000e4

08007488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4907      	ldr	r1, [pc, #28]	@ (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800749e:	4808      	ldr	r0, [pc, #32]	@ (80074c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074a0:	f7ff fd8c 	bl	8006fbc <USBD_GetString>
 80074a4:	e004      	b.n	80074b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4904      	ldr	r1, [pc, #16]	@ (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80074aa:	4805      	ldr	r0, [pc, #20]	@ (80074c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ac:	f7ff fd86 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80074b0:	4b02      	ldr	r3, [pc, #8]	@ (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000e14 	.word	0x20000e14
 80074c0:	08007c84 	.word	0x08007c84

080074c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4907      	ldr	r1, [pc, #28]	@ (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074da:	4808      	ldr	r0, [pc, #32]	@ (80074fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074dc:	f7ff fd6e 	bl	8006fbc <USBD_GetString>
 80074e0:	e004      	b.n	80074ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4904      	ldr	r1, [pc, #16]	@ (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e6:	4805      	ldr	r0, [pc, #20]	@ (80074fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e8:	f7ff fd68 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80074ec:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000e14 	.word	0x20000e14
 80074fc:	08007c90 	.word	0x08007c90

08007500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4413      	add	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007514:	2208      	movs	r2, #8
 8007516:	4906      	ldr	r1, [pc, #24]	@ (8007530 <Get_SerialNum+0x30>)
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f80d 	bl	8007538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800751e:	2204      	movs	r2, #4
 8007520:	4904      	ldr	r1, [pc, #16]	@ (8007534 <Get_SerialNum+0x34>)
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f808 	bl	8007538 <IntToUnicode>
  }
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200000e6 	.word	0x200000e6
 8007534:	200000f6 	.word	0x200000f6

08007538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e027      	b.n	80075a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	0f1b      	lsrs	r3, r3, #28
 8007554:	2b09      	cmp	r3, #9
 8007556:	d80b      	bhi.n	8007570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	0f1b      	lsrs	r3, r3, #28
 800755c:	b2da      	uxtb	r2, r3
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4619      	mov	r1, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	440b      	add	r3, r1
 8007568:	3230      	adds	r2, #48	@ 0x30
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e00a      	b.n	8007586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	0f1b      	lsrs	r3, r3, #28
 8007574:	b2da      	uxtb	r2, r3
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4619      	mov	r1, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	440b      	add	r3, r1
 8007580:	3237      	adds	r2, #55	@ 0x37
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	3301      	adds	r3, #1
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4413      	add	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	3301      	adds	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
 80075a0:	7dfa      	ldrb	r2, [r7, #23]
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d3d3      	bcc.n	8007550 <IntToUnicode+0x18>
  }
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	@ 0x28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	609a      	str	r2, [r3, #8]
 80075cc:	60da      	str	r2, [r3, #12]
 80075ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075d8:	d13a      	bne.n	8007650 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	4b1e      	ldr	r3, [pc, #120]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80075ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80075fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fc:	2302      	movs	r3, #2
 80075fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007604:	2303      	movs	r3, #3
 8007606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007608:	230a      	movs	r3, #10
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	4619      	mov	r1, r3
 8007612:	4812      	ldr	r0, [pc, #72]	@ (800765c <HAL_PCD_MspInit+0xa4>)
 8007614:	f7f9 fe5e 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007618:	4b0f      	ldr	r3, [pc, #60]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 800761a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761c:	4a0e      	ldr	r2, [pc, #56]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 800761e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007622:	6353      	str	r3, [r2, #52]	@ 0x34
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 800762a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762c:	4a0a      	ldr	r2, [pc, #40]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 800762e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007632:	6453      	str	r3, [r2, #68]	@ 0x44
 8007634:	4b08      	ldr	r3, [pc, #32]	@ (8007658 <HAL_PCD_MspInit+0xa0>)
 8007636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007640:	2200      	movs	r2, #0
 8007642:	2100      	movs	r1, #0
 8007644:	2043      	movs	r0, #67	@ 0x43
 8007646:	f7f9 fe0e 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800764a:	2043      	movs	r0, #67	@ 0x43
 800764c:	f7f9 fe27 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007650:	bf00      	nop
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40023800 	.word	0x40023800
 800765c:	40020000 	.word	0x40020000

08007660 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fe fb3d 	bl	8005cf6 <USBD_LL_SetupStage>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7fe fb77 	bl	8005da0 <USBD_LL_DataOutStage>
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	3320      	adds	r3, #32
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	4619      	mov	r1, r3
 80076e2:	f7fe fc10 	bl	8005f06 <USBD_LL_DataInStage>
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fd4a 	bl	8006196 <USBD_LL_SOF>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	79db      	ldrb	r3, [r3, #7]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d001      	beq.n	8007722 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800771e:	f7f9 fabb 	bl	8000c98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007728:	7bfa      	ldrb	r2, [r7, #15]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe fcee 	bl	800610e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007738:	4618      	mov	r0, r3
 800773a:	f7fe fc96 	bl	800606a <USBD_LL_Reset>
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fce9 	bl	800612e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7adb      	ldrb	r3, [r3, #11]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800777c:	4b04      	ldr	r3, [pc, #16]	@ (8007790 <HAL_PCD_SuspendCallback+0x48>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4a03      	ldr	r2, [pc, #12]	@ (8007790 <HAL_PCD_SuspendCallback+0x48>)
 8007782:	f043 0306 	orr.w	r3, r3, #6
 8007786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	e000ed00 	.word	0xe000ed00

08007794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fcdf 	bl	8006166 <USBD_LL_Resume>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fd37 	bl	800623a <USBD_LL_IsoOUTIncomplete>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077e6:	78fa      	ldrb	r2, [r7, #3]
 80077e8:	4611      	mov	r1, r2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fcf3 	bl	80061d6 <USBD_LL_IsoINIncomplete>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fd49 	bl	800629e <USBD_LL_DevConnected>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fd46 	bl	80062b4 <USBD_LL_DevDisconnected>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d13c      	bne.n	80078ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007840:	4a20      	ldr	r2, [pc, #128]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a1e      	ldr	r2, [pc, #120]	@ (80078c4 <USBD_LL_Init+0x94>)
 800784c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007850:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007852:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007856:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007858:	4b1a      	ldr	r3, [pc, #104]	@ (80078c4 <USBD_LL_Init+0x94>)
 800785a:	2204      	movs	r2, #4
 800785c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800785e:	4b19      	ldr	r3, [pc, #100]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007860:	2202      	movs	r2, #2
 8007862:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007864:	4b17      	ldr	r3, [pc, #92]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007866:	2200      	movs	r2, #0
 8007868:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800786a:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <USBD_LL_Init+0x94>)
 800786c:	2202      	movs	r2, #2
 800786e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007870:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007872:	2200      	movs	r2, #0
 8007874:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007876:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007878:	2200      	movs	r2, #0
 800787a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800787c:	4b11      	ldr	r3, [pc, #68]	@ (80078c4 <USBD_LL_Init+0x94>)
 800787e:	2200      	movs	r2, #0
 8007880:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007882:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007884:	2200      	movs	r2, #0
 8007886:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007888:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <USBD_LL_Init+0x94>)
 800788a:	2200      	movs	r2, #0
 800788c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800788e:	480d      	ldr	r0, [pc, #52]	@ (80078c4 <USBD_LL_Init+0x94>)
 8007890:	f7f9 febd 	bl	800160e <HAL_PCD_Init>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800789a:	f7f9 f9fd 	bl	8000c98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800789e:	2180      	movs	r1, #128	@ 0x80
 80078a0:	4808      	ldr	r0, [pc, #32]	@ (80078c4 <USBD_LL_Init+0x94>)
 80078a2:	f7fb f8e8 	bl	8002a76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078a6:	2240      	movs	r2, #64	@ 0x40
 80078a8:	2100      	movs	r1, #0
 80078aa:	4806      	ldr	r0, [pc, #24]	@ (80078c4 <USBD_LL_Init+0x94>)
 80078ac:	f7fb f89c 	bl	80029e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078b0:	2280      	movs	r2, #128	@ 0x80
 80078b2:	2101      	movs	r1, #1
 80078b4:	4803      	ldr	r0, [pc, #12]	@ (80078c4 <USBD_LL_Init+0x94>)
 80078b6:	f7fb f897 	bl	80029e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20001014 	.word	0x20001014

080078c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 ffa4 	bl	800182c <HAL_PCD_Start>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f942 	bl	8007b74 <USBD_Get_USB_Status>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	461a      	mov	r2, r3
 800790c:	4603      	mov	r3, r0
 800790e:	70fb      	strb	r3, [r7, #3]
 8007910:	460b      	mov	r3, r1
 8007912:	70bb      	strb	r3, [r7, #2]
 8007914:	4613      	mov	r3, r2
 8007916:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007926:	78bb      	ldrb	r3, [r7, #2]
 8007928:	883a      	ldrh	r2, [r7, #0]
 800792a:	78f9      	ldrb	r1, [r7, #3]
 800792c:	f7fa fc78 	bl	8002220 <HAL_PCD_EP_Open>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f91c 	bl	8007b74 <USBD_Get_USB_Status>
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f7fa fcc1 	bl	80022f0 <HAL_PCD_EP_Close>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f8fd 	bl	8007b74 <USBD_Get_USB_Status>
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fa fd79 	bl	800249e <HAL_PCD_EP_SetStall>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f8de 	bl	8007b74 <USBD_Get_USB_Status>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079e0:	78fa      	ldrb	r2, [r7, #3]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fa fdbd 	bl	8002564 <HAL_PCD_EP_ClrStall>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f8bf 	bl	8007b74 <USBD_Get_USB_Status>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da0b      	bge.n	8007a38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	3316      	adds	r3, #22
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	e00b      	b.n	8007a50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fa fbac 	bl	80021d8 <HAL_PCD_SetAddress>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f874 	bl	8007b74 <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ab8:	7af9      	ldrb	r1, [r7, #11]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	f7fa fcb4 	bl	800242a <HAL_PCD_EP_Transmit>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f853 	bl	8007b74 <USBD_Get_USB_Status>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007afa:	7af9      	ldrb	r1, [r7, #11]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	f7fa fc40 	bl	8002384 <HAL_PCD_EP_Receive>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f832 	bl	8007b74 <USBD_Get_USB_Status>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b14:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fa fc60 	bl	80023fa <HAL_PCD_EP_GetRxCount>
 8007b3a:	4603      	mov	r3, r0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b4c:	4b03      	ldr	r3, [pc, #12]	@ (8007b5c <USBD_static_malloc+0x18>)
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	200014f8 	.word	0x200014f8

08007b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d817      	bhi.n	8007bb8 <USBD_Get_USB_Status+0x44>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <USBD_Get_USB_Status+0x1c>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba7 	.word	0x08007ba7
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bb3 	.word	0x08007bb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba4:	e00b      	b.n	8007bbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8007baa:	e008      	b.n	8007bbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb0:	e005      	b.n	8007bbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb6:	e002      	b.n	8007bbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	73fb      	strb	r3, [r7, #15]
    break;
 8007bbc:	bf00      	nop
  }
  return usb_status;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <memset>:
 8007bcc:	4402      	add	r2, r0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	@ (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	@ (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	@ (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	@ (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f000 f826 	bl	8007c40 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	08007cb8 	.word	0x08007cb8
 8007c18:	08007cb8 	.word	0x08007cb8
 8007c1c:	08007cb8 	.word	0x08007cb8
 8007c20:	08007cbc 	.word	0x08007cbc

08007c24 <memcpy>:
 8007c24:	440a      	add	r2, r1
 8007c26:	4291      	cmp	r1, r2
 8007c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c2c:	d100      	bne.n	8007c30 <memcpy+0xc>
 8007c2e:	4770      	bx	lr
 8007c30:	b510      	push	{r4, lr}
 8007c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	d1f9      	bne.n	8007c32 <memcpy+0xe>
 8007c3e:	bd10      	pop	{r4, pc}

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
