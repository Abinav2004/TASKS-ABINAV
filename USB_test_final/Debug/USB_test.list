
USB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006d9c  08006d9c  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df4  08006df4  00008100  2**0
                  CONTENTS
  4 .ARM          00000008  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dfc  08006dfc  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08006e04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001540  20000100  08006f04  00008100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  08006f04  00008640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d48f  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa5  00000000  00000000  000155bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00018068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000867  00000000  00000000  00018bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a37  00000000  00000000  00019437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f610  00000000  00000000  00030e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862c8  00000000  00000000  0004047e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d64  00000000  00000000  000c678c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c94f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006d84 	.word	0x08006d84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	08006d84 	.word	0x08006d84

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <USBRxHandler>:
void byte_stream_operation(uint8_t* buf);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USBRxHandler(uint8_t* buf,uint16_t len){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	switch(set)
 80004d0:	4b33      	ldr	r3, [pc, #204]	@ (80005a0 <USBRxHandler+0xdc>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <USBRxHandler+0x1a>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d034      	beq.n	8000546 <USBRxHandler+0x82>
			size=Buffer_trim_size(Buffer3);
			byte_stream_operation(Buffer3);
			set=0;
			return;
	}
	return;
 80004dc:	e05c      	b.n	8000598 <USBRxHandler+0xd4>
			memset(Buffer1,0,64);
 80004de:	2240      	movs	r2, #64	@ 0x40
 80004e0:	2100      	movs	r1, #0
 80004e2:	4830      	ldr	r0, [pc, #192]	@ (80005a4 <USBRxHandler+0xe0>)
 80004e4:	f006 fc14 	bl	8006d10 <memset>
			memset(Buffer2,0,64);
 80004e8:	2240      	movs	r2, #64	@ 0x40
 80004ea:	2100      	movs	r1, #0
 80004ec:	482e      	ldr	r0, [pc, #184]	@ (80005a8 <USBRxHandler+0xe4>)
 80004ee:	f006 fc0f 	bl	8006d10 <memset>
			memcpy(Buffer1,buf,len);
 80004f2:	887b      	ldrh	r3, [r7, #2]
 80004f4:	461a      	mov	r2, r3
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	482a      	ldr	r0, [pc, #168]	@ (80005a4 <USBRxHandler+0xe0>)
 80004fa:	f006 fc35 	bl	8006d68 <memcpy>
			memset(buf,0,len);
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 fc03 	bl	8006d10 <memset>
			if(Buffer1[3]<=53)
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <USBRxHandler+0xe0>)
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	2b35      	cmp	r3, #53	@ 0x35
 8000510:	d812      	bhi.n	8000538 <USBRxHandler+0x74>
				Buffer_operation_strich(Buffer3,Buffer2,Buffer1);
 8000512:	4a24      	ldr	r2, [pc, #144]	@ (80005a4 <USBRxHandler+0xe0>)
 8000514:	4924      	ldr	r1, [pc, #144]	@ (80005a8 <USBRxHandler+0xe4>)
 8000516:	4825      	ldr	r0, [pc, #148]	@ (80005ac <USBRxHandler+0xe8>)
 8000518:	f000 f84c 	bl	80005b4 <Buffer_operation_strich>
				size=Buffer_trim_size(Buffer3);
 800051c:	4823      	ldr	r0, [pc, #140]	@ (80005ac <USBRxHandler+0xe8>)
 800051e:	f000 f87b 	bl	8000618 <Buffer_trim_size>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <USBRxHandler+0xec>)
 8000528:	701a      	strb	r2, [r3, #0]
				byte_stream_operation(Buffer3);
 800052a:	4820      	ldr	r0, [pc, #128]	@ (80005ac <USBRxHandler+0xe8>)
 800052c:	f000 f8f4 	bl	8000718 <byte_stream_operation>
				set=0;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <USBRxHandler+0xdc>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
				return;
 8000536:	e02f      	b.n	8000598 <USBRxHandler+0xd4>
			set++;
 8000538:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <USBRxHandler+0xdc>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <USBRxHandler+0xdc>)
 8000542:	701a      	strb	r2, [r3, #0]
			return;
 8000544:	e028      	b.n	8000598 <USBRxHandler+0xd4>
			memset(Buffer2,0,64);
 8000546:	2240      	movs	r2, #64	@ 0x40
 8000548:	2100      	movs	r1, #0
 800054a:	4817      	ldr	r0, [pc, #92]	@ (80005a8 <USBRxHandler+0xe4>)
 800054c:	f006 fbe0 	bl	8006d10 <memset>
			memcpy(Buffer2,buf,len);
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	461a      	mov	r2, r3
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <USBRxHandler+0xe4>)
 8000558:	f006 fc06 	bl	8006d68 <memcpy>
			memset(buf,0,len);
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f006 fbd4 	bl	8006d10 <memset>
			memset(Buffer3,0,64);
 8000568:	2240      	movs	r2, #64	@ 0x40
 800056a:	2100      	movs	r1, #0
 800056c:	480f      	ldr	r0, [pc, #60]	@ (80005ac <USBRxHandler+0xe8>)
 800056e:	f006 fbcf 	bl	8006d10 <memset>
			Buffer_operation_strich(Buffer3,Buffer2,Buffer1);
 8000572:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <USBRxHandler+0xe0>)
 8000574:	490c      	ldr	r1, [pc, #48]	@ (80005a8 <USBRxHandler+0xe4>)
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <USBRxHandler+0xe8>)
 8000578:	f000 f81c 	bl	80005b4 <Buffer_operation_strich>
			size=Buffer_trim_size(Buffer3);
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <USBRxHandler+0xe8>)
 800057e:	f000 f84b 	bl	8000618 <Buffer_trim_size>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <USBRxHandler+0xec>)
 8000588:	701a      	strb	r2, [r3, #0]
			byte_stream_operation(Buffer3);
 800058a:	4808      	ldr	r0, [pc, #32]	@ (80005ac <USBRxHandler+0xe8>)
 800058c:	f000 f8c4 	bl	8000718 <byte_stream_operation>
			set=0;
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <USBRxHandler+0xdc>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
			return;
 8000596:	bf00      	nop
}
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000024c 	.word	0x2000024c
 80005a4:	2000011c 	.word	0x2000011c
 80005a8:	2000015c 	.word	0x2000015c
 80005ac:	2000019c 	.word	0x2000019c
 80005b0:	2000024d 	.word	0x2000024d

080005b4 <Buffer_operation_strich>:
void Buffer_operation_strich(uint8_t *buf3,uint8_t *buf2,uint8_t *buf1)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	for(uint8_t i=0;i<64;i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	75fb      	strb	r3, [r7, #23]
 80005c4:	e00a      	b.n	80005dc <Buffer_operation_strich+0x28>
	{
		buf3[i]=buf1[i];
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	441a      	add	r2, r3
 80005cc:	7dfb      	ldrb	r3, [r7, #23]
 80005ce:	68f9      	ldr	r1, [r7, #12]
 80005d0:	440b      	add	r3, r1
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	3301      	adds	r3, #1
 80005da:	75fb      	strb	r3, [r7, #23]
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
 80005de:	2b3f      	cmp	r3, #63	@ 0x3f
 80005e0:	d9f1      	bls.n	80005c6 <Buffer_operation_strich+0x12>
	}
	for(uint8_t i=0;i<64;i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	75bb      	strb	r3, [r7, #22]
 80005e6:	e00c      	b.n	8000602 <Buffer_operation_strich+0x4e>
	{
		buf3[64+i]=buf2[i];
 80005e8:	7dbb      	ldrb	r3, [r7, #22]
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	441a      	add	r2, r3
 80005ee:	7dbb      	ldrb	r3, [r7, #22]
 80005f0:	3340      	adds	r3, #64	@ 0x40
 80005f2:	4619      	mov	r1, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	440b      	add	r3, r1
 80005f8:	7812      	ldrb	r2, [r2, #0]
 80005fa:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80005fc:	7dbb      	ldrb	r3, [r7, #22]
 80005fe:	3301      	adds	r3, #1
 8000600:	75bb      	strb	r3, [r7, #22]
 8000602:	7dbb      	ldrb	r3, [r7, #22]
 8000604:	2b3f      	cmp	r3, #63	@ 0x3f
 8000606:	d9ef      	bls.n	80005e8 <Buffer_operation_strich+0x34>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <Buffer_trim_size>:
uint8_t Buffer_trim_size(uint8_t *buf)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	for(j=0;j<128;j++)
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <Buffer_trim_size+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e00d      	b.n	8000644 <Buffer_trim_size+0x2c>
	{
		if (buf[j]=='.')
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <Buffer_trim_size+0x50>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b2e      	cmp	r3, #46	@ 0x2e
 8000636:	d00b      	beq.n	8000650 <Buffer_trim_size+0x38>
	for(j=0;j<128;j++)
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <Buffer_trim_size+0x50>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <Buffer_trim_size+0x50>)
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <Buffer_trim_size+0x50>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	daec      	bge.n	8000628 <Buffer_trim_size+0x10>
 800064e:	e000      	b.n	8000652 <Buffer_trim_size+0x3a>
		{
			break;
 8000650:	bf00      	nop
		}
	}
	return j-1;
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <Buffer_trim_size+0x50>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000024f 	.word	0x2000024f

0800066c <filter_bytestream>:
void filter_bytestream(uint8_t *buf)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	memset(id,0,16);
 8000674:	2210      	movs	r2, #16
 8000676:	2100      	movs	r1, #0
 8000678:	4821      	ldr	r0, [pc, #132]	@ (8000700 <filter_bytestream+0x94>)
 800067a:	f006 fb49 	bl	8006d10 <memset>
	memset(value1,0,16);
 800067e:	2210      	movs	r2, #16
 8000680:	2100      	movs	r1, #0
 8000682:	4820      	ldr	r0, [pc, #128]	@ (8000704 <filter_bytestream+0x98>)
 8000684:	f006 fb44 	bl	8006d10 <memset>
	memset(value2,0,16);
 8000688:	2210      	movs	r2, #16
 800068a:	2100      	movs	r1, #0
 800068c:	481e      	ldr	r0, [pc, #120]	@ (8000708 <filter_bytestream+0x9c>)
 800068e:	f006 fb3f 	bl	8006d10 <memset>
	while(idx<size)
 8000692:	e029      	b.n	80006e8 <filter_bytestream+0x7c>
	{
			id[nxt]=buf[idx+1];
 8000694:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <filter_bytestream+0xa0>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <filter_bytestream+0xa4>)
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <filter_bytestream+0x94>)
 80006a6:	5499      	strb	r1, [r3, r2]
			value1[nxt]=buf[idx+3];
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <filter_bytestream+0xa0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3303      	adds	r3, #3
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <filter_bytestream+0xa4>)
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <filter_bytestream+0x98>)
 80006ba:	5499      	strb	r1, [r3, r2]
			value2[nxt]=buf[idx+5];
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <filter_bytestream+0xa0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3305      	adds	r3, #5
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <filter_bytestream+0xa4>)
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <filter_bytestream+0x9c>)
 80006ce:	5499      	strb	r1, [r3, r2]
			idx+=8;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <filter_bytestream+0xa0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3308      	adds	r3, #8
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <filter_bytestream+0xa0>)
 80006da:	701a      	strb	r2, [r3, #0]
			nxt++;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <filter_bytestream+0xa4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <filter_bytestream+0xa4>)
 80006e6:	701a      	strb	r2, [r3, #0]
	while(idx<size)
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <filter_bytestream+0xa0>)
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <filter_bytestream+0xa8>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3cf      	bcc.n	8000694 <filter_bytestream+0x28>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000021c 	.word	0x2000021c
 8000704:	2000022c 	.word	0x2000022c
 8000708:	2000023c 	.word	0x2000023c
 800070c:	20000000 	.word	0x20000000
 8000710:	2000024e 	.word	0x2000024e
 8000714:	2000024d 	.word	0x2000024d

08000718 <byte_stream_operation>:
void byte_stream_operation(uint8_t* buf)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	filter_bytestream(buf);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffa3 	bl	800066c <filter_bytestream>
	nxt=0;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <byte_stream_operation+0x28>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	idx=14;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <byte_stream_operation+0x2c>)
 800072e:	220e      	movs	r2, #14
 8000730:	701a      	strb	r2, [r3, #0]
	j=0;
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <byte_stream_operation+0x30>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000024e 	.word	0x2000024e
 8000744:	20000000 	.word	0x20000000
 8000748:	2000024f 	.word	0x2000024f

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 f942 	bl	80009d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f808 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f872 	bl	8000840 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800075c:	f005 fdb0 	bl	80062c0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f000 f9ab 	bl	8000abc <HAL_Delay>
 8000766:	e7fb      	b.n	8000760 <main+0x14>

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 faca 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <SystemClock_Config+0xd0>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <SystemClock_Config+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xd4>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SystemClock_Config+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007dc:	2319      	movs	r3, #25
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ea:	2307      	movs	r3, #7
 80007ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fe6c 	bl	80024d0 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fe:	f000 f847 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f002 f8ce 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800082a:	f000 f831 	bl	8000890 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	@ 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_GPIO_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <MX_GPIO_Init+0x4c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_GPIO_Init+0x4c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <MX_GPIO_Init+0x4c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_GPIO_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f89b 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <OTG_FS_IRQHandler+0x10>)
 8000952:	f000 fcb1 	bl	80012b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000f3c 	.word	0x20000f3c

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	@ (80009d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f006 f9b5 	bl	8006d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fec9 	bl	800074c <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80009c8:	08006e04 	.word	0x08006e04
  ldr r2, =_sbss
 80009cc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80009d0:	20001640 	.word	0x20001640

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f94f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff ff46 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f967 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f92f 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	20000250 	.word	0x20000250

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000250 	.word	0x20000250

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	@ (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e159      	b.n	8000ff8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8148 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80a2 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a56      	ldr	r2, [pc, #344]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a52      	ldr	r2, [pc, #328]	@ (8001014 <HAL_GPIO_Init+0x2ec>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	@ (8001018 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x202>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a48      	ldr	r2, [pc, #288]	@ (800101c <HAL_GPIO_Init+0x2f4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1fe>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a47      	ldr	r2, [pc, #284]	@ (8001020 <HAL_GPIO_Init+0x2f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <HAL_GPIO_Init+0x2fc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1f6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a45      	ldr	r2, [pc, #276]	@ (8001028 <HAL_GPIO_Init+0x300>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1f2>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	@ (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a24      	ldr	r2, [pc, #144]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f aea2 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40013c00 	.word	0x40013c00

08001030 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e101      	b.n	8001246 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f005 fb4d 	bl	80066fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2203      	movs	r2, #3
 8001066:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001070:	d102      	bne.n	8001078 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f001 ff6e 	bl	8002f5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7c1a      	ldrb	r2, [r3, #16]
 800108a:	f88d 2000 	strb.w	r2, [sp]
 800108e:	3304      	adds	r3, #4
 8001090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001092:	f001 fe4d 	bl	8002d30 <USB_CoreInit>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0ce      	b.n	8001246 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 ff66 	bl	8002f80 <USB_SetCurrentMode>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2202      	movs	r2, #2
 80010be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0bf      	b.n	8001246 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e04a      	b.n	8001162 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3315      	adds	r3, #21
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3314      	adds	r3, #20
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	b298      	uxth	r0, r3
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	332e      	adds	r3, #46	@ 0x2e
 8001108:	4602      	mov	r2, r0
 800110a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3318      	adds	r3, #24
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	331c      	adds	r3, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3320      	adds	r3, #32
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	3324      	adds	r3, #36	@ 0x24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3af      	bcc.n	80010cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e044      	b.n	80011fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	3301      	adds	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3b5      	bcc.n	8001172 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7c1a      	ldrb	r2, [r3, #16]
 800120e:	f88d 2000 	strb.w	r2, [sp]
 8001212:	3304      	adds	r3, #4
 8001214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001216:	f001 feff 	bl	8003018 <USB_DevInit>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e00c      	b.n	8001246 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 ff43 	bl	80040ca <USB_DevDisconnect>

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_PCD_Start+0x1c>
 8001266:	2302      	movs	r3, #2
 8001268:	e022      	b.n	80012b0 <HAL_PCD_Start+0x62>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fe50 	bl	8002f3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fef1 	bl	8004088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b08d      	sub	sp, #52	@ 0x34
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 ffaf 	bl	8004232 <USB_GetMode>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 848c 	bne.w	8001bf4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ff13 	bl	800410c <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8482 	beq.w	8001bf2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f002 ff00 	bl	800410c <USB_ReadInterrupts>
 800130c:	4603      	mov	r3, r0
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b02      	cmp	r3, #2
 8001314:	d107      	bne.n	8001326 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f002 0202 	and.w	r2, r2, #2
 8001324:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 feee 	bl	800410c <USB_ReadInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b10      	cmp	r3, #16
 8001338:	d161      	bne.n	80013fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0210 	bic.w	r2, r2, #16
 8001348:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f003 020f 	and.w	r2, r3, #15
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	3304      	adds	r3, #4
 8001368:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	0c5b      	lsrs	r3, r3, #17
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	2b02      	cmp	r3, #2
 8001374:	d124      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d035      	beq.n	80013ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800138c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	6a38      	ldr	r0, [r7, #32]
 8001396:	f002 fd25 	bl	8003de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a6:	441a      	add	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b8:	441a      	add	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	e016      	b.n	80013ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	0c5b      	lsrs	r3, r3, #17
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d110      	bne.n	80013ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013d2:	2208      	movs	r2, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	6a38      	ldr	r0, [r7, #32]
 80013d8:	f002 fd04 	bl	8003de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0210 	orr.w	r2, r2, #16
 80013fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fe82 	bl	800410c <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800140e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001412:	f040 80a7 	bne.w	8001564 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fe87 	bl	8004132 <USB_ReadDevAllOutEpInterrupt>
 8001424:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001426:	e099      	b.n	800155c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 808e 	beq.w	8001550 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f002 feab 	bl	800419a <USB_ReadDevOutEPInterrupt>
 8001444:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800145c:	461a      	mov	r2, r3
 800145e:	2301      	movs	r3, #1
 8001460:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fea1 	bl	80021ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001480:	461a      	mov	r2, r3
 8001482:	2308      	movs	r3, #8
 8001484:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001486:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 ff77 	bl	800237c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4413      	add	r3, r2
 80014a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014a4:	461a      	mov	r2, r3
 80014a6:	2310      	movs	r3, #16
 80014a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d030      	beq.n	8001516 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014bc:	2b80      	cmp	r3, #128	@ 0x80
 80014be:	d109      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	3304      	adds	r3, #4
 80014e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2200      	movs	r2, #0
 80014f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f005 f9f8 	bl	80068f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001510:	461a      	mov	r2, r3
 8001512:	2302      	movs	r3, #2
 8001514:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2320      	movs	r3, #32
 8001530:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001548:	461a      	mov	r2, r3
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	3301      	adds	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800155c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155e:	2b00      	cmp	r3, #0
 8001560:	f47f af62 	bne.w	8001428 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fdcf 	bl	800410c <USB_ReadInterrupts>
 800156e:	4603      	mov	r3, r0
 8001570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001574:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001578:	f040 80db 	bne.w	8001732 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fdf0 	bl	8004166 <USB_ReadDevAllInEpInterrupt>
 8001586:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800158c:	e0cd      	b.n	800172a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80c2 	beq.w	800171e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fe16 	bl	80041d6 <USB_ReadDevInEPInterrupt>
 80015aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d057      	beq.n	8001666 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015d6:	4013      	ands	r3, r2
 80015d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	799b      	ldrb	r3, [r3, #6]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d132      	bne.n	800165a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3320      	adds	r3, #32
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4403      	add	r3, r0
 8001614:	331c      	adds	r3, #28
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4419      	add	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3320      	adds	r3, #32
 800162a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <HAL_PCD_IRQHandler+0x3a2>
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3324      	adds	r3, #36	@ 0x24
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d108      	bne.n	800165a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001652:	461a      	mov	r2, r3
 8001654:	2101      	movs	r1, #1
 8001656:	f002 fe1d 	bl	8004294 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f005 f8cc 	bl	80067fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800167c:	461a      	mov	r2, r3
 800167e:	2308      	movs	r3, #8
 8001680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2310      	movs	r3, #16
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2340      	movs	r3, #64	@ 0x40
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016c6:	6a38      	ldr	r0, [r7, #32]
 80016c8:	f001 fe0a 	bl	80032e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	3310      	adds	r3, #16
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	3304      	adds	r3, #4
 80016de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	78db      	ldrb	r3, [r3, #3]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2200      	movs	r2, #0
 80016ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f005 f90f 	bl	8006918 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001706:	461a      	mov	r2, r3
 8001708:	2302      	movs	r3, #2
 800170a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fcbb 	bl	8002094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f af2e 	bne.w	800158e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fce8 	bl	800410c <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001746:	d122      	bne.n	800178e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800176e:	2100      	movs	r1, #0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fea1 	bl	80024b8 <HAL_PCDEx_LPM_Callback>
 8001776:	e002      	b.n	800177e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 f8ad 	bl	80068d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800178c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fcba 	bl	800410c <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800179e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017a2:	d112      	bne.n	80017ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f005 f869 	bl	800688c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017c8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fc9c 	bl	800410c <USB_ReadInterrupts>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017de:	f040 80b7 	bne.w	8001950 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2110      	movs	r1, #16
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fd6f 	bl	80032e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001806:	e046      	b.n	8001896 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001814:	461a      	mov	r2, r3
 8001816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800181a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800181c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800182c:	0151      	lsls	r1, r2, #5
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	440a      	add	r2, r1
 8001832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800183a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001848:	461a      	mov	r2, r3
 800184a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800184e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001860:	0151      	lsls	r1, r2, #5
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	440a      	add	r2, r1
 8001866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800186a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800186e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001880:	0151      	lsls	r1, r2, #5
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	440a      	add	r2, r1
 8001886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800188a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800188e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001892:	3301      	adds	r3, #1
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189e:	4293      	cmp	r3, r2
 80018a0:	d3b2      	bcc.n	8001808 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7bdb      	ldrb	r3, [r3, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ce:	f043 030b 	orr.w	r3, r3, #11
 80018d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e4:	f043 030b 	orr.w	r3, r3, #11
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	e015      	b.n	8001918 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001902:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001912:	f043 030b 	orr.w	r3, r3, #11
 8001916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800192a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800193a:	461a      	mov	r2, r3
 800193c:	f002 fcaa 	bl	8004294 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fbd9 	bl	800410c <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001964:	d123      	bne.n	80019ae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fc6f 	bl	800424e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f001 fd2c 	bl	80033d2 <USB_GetDevSpeed>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681c      	ldr	r4, [r3, #0]
 8001986:	f001 f9c7 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 800198a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001990:	461a      	mov	r2, r3
 8001992:	4620      	mov	r0, r4
 8001994:	f001 fa30 	bl	8002df8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f004 ff58 	bl	800684e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fbaa 	bl	800410c <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d10a      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f004 ff35 	bl	8006832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f002 0208 	and.w	r2, r2, #8
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fb95 	bl	800410c <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e8:	2b80      	cmp	r3, #128	@ 0x80
 80019ea:	d123      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fc:	e014      	b.n	8001a28 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fb08 	bl	8002032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d3e4      	bcc.n	80019fe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fb67 	bl	800410c <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a48:	d13c      	bne.n	8001ac4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	e02b      	b.n	8001aa8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3318      	adds	r3, #24
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d115      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da12      	bge.n	8001aa2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3317      	adds	r3, #23
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fac8 	bl	8002032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d3cd      	bcc.n	8001a50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fb1f 	bl	800410c <USB_ReadInterrupts>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ad8:	d156      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ada:	2301      	movs	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e045      	b.n	8001b6c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d12e      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da2b      	bge.n	8001b66 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d121      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b62:	6053      	str	r3, [r2, #4]
            break;
 8001b64:	e008      	b.n	8001b78 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	461a      	mov	r2, r3
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d3b3      	bcc.n	8001ae0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fabd 	bl	800410c <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f004 fecc 	bl	800693c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 faa7 	bl	800410c <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d115      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f004 febc 	bl	8006958 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6859      	ldr	r1, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	e000      	b.n	8001bf4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bf2:	bf00      	nop
    }
  }
}
 8001bf4:	3734      	adds	r7, #52	@ 0x34
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd90      	pop	{r4, r7, pc}

08001bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_SetAddress+0x1a>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e012      	b.n	8001c3a <HAL_PCD_SetAddress+0x40>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa06 	bl	800403c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	4608      	mov	r0, r1
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	70fb      	strb	r3, [r7, #3]
 8001c54:	460b      	mov	r3, r1
 8001c56:	803b      	strh	r3, [r7, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da0f      	bge.n	8001c88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 020f 	and.w	r2, r3, #15
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3310      	adds	r3, #16
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	705a      	strb	r2, [r3, #1]
 8001c86:	e00f      	b.n	8001ca8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb4:	883a      	ldrh	r2, [r7, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	78ba      	ldrb	r2, [r7, #2]
 8001cbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd2:	78bb      	ldrb	r3, [r7, #2]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d102      	bne.n	8001cde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_PCD_EP_Open+0xaa>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e00e      	b.n	8001d0a <HAL_PCD_EP_Open+0xc8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 fb8e 	bl	800341c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d08:	7afb      	ldrb	r3, [r7, #11]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da0f      	bge.n	8001d46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3310      	adds	r3, #16
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	705a      	strb	r2, [r3, #1]
 8001d44:	e00f      	b.n	8001d66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_PCD_EP_Close+0x6e>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e00e      	b.n	8001d9e <HAL_PCD_EP_Close+0x8c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 fbcc 	bl	800352c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	460b      	mov	r3, r1
 8001db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	799b      	ldrb	r3, [r3, #6]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d102      	bne.n	8001e02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	799b      	ldrb	r3, [r3, #6]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	f001 fc69 	bl	80036e4 <USB_EPStartXfer>

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3310      	adds	r3, #16
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	799b      	ldrb	r3, [r3, #6]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	799b      	ldrb	r3, [r3, #6]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6979      	ldr	r1, [r7, #20]
 8001eb2:	f001 fc17 	bl	80036e4 <USB_EPStartXfer>

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	7912      	ldrb	r2, [r2, #4]
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e04f      	b.n	8001f7e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0f      	bge.n	8001f06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00d      	b.n	8001f22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_EP_SetStall+0x82>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e01d      	b.n	8001f7e <HAL_PCD_EP_SetStall+0xbe>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 ff9f 	bl	8003e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7999      	ldrb	r1, [r3, #6]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f002 f990 	bl	8004294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	7912      	ldrb	r2, [r2, #4]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e042      	b.n	800202a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da0f      	bge.n	8001fcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	3310      	adds	r3, #16
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	705a      	strb	r2, [r3, #1]
 8001fca:	e00f      	b.n	8001fec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_PCD_EP_ClrStall+0x86>
 8002008:	2302      	movs	r3, #2
 800200a:	e00e      	b.n	800202a <HAL_PCD_EP_ClrStall+0xa4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	f001 ffa8 	bl	8003f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800203e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da0c      	bge.n	8002060 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3310      	adds	r3, #16
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	3304      	adds	r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e00c      	b.n	800207a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fdc7 	bl	8003c14 <USB_EPStopXfer>
 8002086:	4603      	mov	r3, r0
 8002088:	72fb      	strb	r3, [r7, #11]

  return ret;
 800208a:	7afb      	ldrb	r3, [r7, #11]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af02      	add	r7, sp, #8
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	3310      	adds	r3, #16
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	3304      	adds	r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d901      	bls.n	80020cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e06b      	b.n	80021a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d902      	bls.n	80020e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3303      	adds	r3, #3
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f0:	e02a      	b.n	8002148 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	d902      	bls.n	800210e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3303      	adds	r3, #3
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4603      	mov	r3, r0
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f001 fe1c 	bl	8003d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	441a      	add	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	429a      	cmp	r2, r3
 800215c:	d809      	bhi.n	8002172 <PCD_WriteEmptyTxFifo+0xde>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002166:	429a      	cmp	r2, r3
 8002168:	d203      	bcs.n	8002172 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1bf      	bne.n	80020f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	429a      	cmp	r2, r3
 800217c:	d811      	bhi.n	80021a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	2201      	movs	r2, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	43db      	mvns	r3, r3
 8002198:	6939      	ldr	r1, [r7, #16]
 800219a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800219e:	4013      	ands	r3, r2
 80021a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	333c      	adds	r3, #60	@ 0x3c
 80021c4:	3304      	adds	r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	799b      	ldrb	r3, [r3, #6]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d17b      	bne.n	80022da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	4a61      	ldr	r2, [pc, #388]	@ (8002374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f240 80b9 	bls.w	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80b3 	beq.w	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002214:	6093      	str	r3, [r2, #8]
 8002216:	e0a7      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]
 8002234:	e098      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 8093 	bne.w	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d90f      	bls.n	800226a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e07e      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	440b      	add	r3, r1
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	1ad2      	subs	r2, r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	f001 ffec 	bl	8004294 <USB_EP0_OutStart>
 80022bc:	e006      	b.n	80022cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	441a      	add	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fa78 	bl	80067c8 <HAL_PCD_DataOutStageCallback>
 80022d8:	e046      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d124      	bne.n	800232c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	e032      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002318:	461a      	mov	r2, r3
 800231a:	2320      	movs	r3, #32
 800231c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f004 fa4f 	bl	80067c8 <HAL_PCD_DataOutStageCallback>
 800232a:	e01d      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002354:	461a      	mov	r2, r3
 8002356:	2100      	movs	r1, #0
 8002358:	f001 ff9c 	bl	8004294 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f004 fa30 	bl	80067c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	4f54300a 	.word	0x4f54300a
 8002378:	4f54310a 	.word	0x4f54310a

0800237c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	333c      	adds	r3, #60	@ 0x3c
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d90e      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f004 f9e7 	bl	80067a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <PCD_EP_OutSetupPacket_int+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d90c      	bls.n	80023f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d108      	bne.n	80023f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f0:	461a      	mov	r2, r3
 80023f2:	2101      	movs	r1, #1
 80023f4:	f001 ff4e 	bl	8004294 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	4f54300a 	.word	0x4f54300a

08002408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
 8002414:	4613      	mov	r3, r2
 8002416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002426:	883b      	ldrh	r3, [r7, #0]
 8002428:	0419      	lsls	r1, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	430a      	orrs	r2, r1
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
 8002434:	e028      	b.n	8002488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e00d      	b.n	8002466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	3340      	adds	r3, #64	@ 0x40
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4413      	add	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	3301      	adds	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	3b01      	subs	r3, #1
 800246c:	429a      	cmp	r2, r3
 800246e:	d3ec      	bcc.n	800244a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002470:	883b      	ldrh	r3, [r7, #0]
 8002472:	0418      	lsls	r0, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	3b01      	subs	r3, #1
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	4302      	orrs	r2, r0
 8002480:	3340      	adds	r3, #64	@ 0x40
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e267      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	4b88      	ldr	r3, [pc, #544]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b85      	ldr	r3, [pc, #532]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b82      	ldr	r3, [pc, #520]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b7e      	ldr	r3, [pc, #504]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e242      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x74>
 8002536:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6f      	ldr	r2, [pc, #444]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6d      	ldr	r3, [pc, #436]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6c      	ldr	r2, [pc, #432]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002568:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a68      	ldr	r2, [pc, #416]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b66      	ldr	r3, [pc, #408]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fa8c 	bl	8000aa4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fa88 	bl	8000aa4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e207      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xc0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fa78 	bl	8000aa4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fa74 	bl	8000aa4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1f3      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b51      	ldr	r3, [pc, #324]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b44      	ldr	r3, [pc, #272]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1c7      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3b      	ldr	r3, [pc, #236]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4937      	ldr	r1, [pc, #220]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b34      	ldr	r3, [pc, #208]	@ (8002714 <HAL_RCC_OscConfig+0x244>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fa2d 	bl	8000aa4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fa29 	bl	8000aa4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1a8      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4925      	ldr	r1, [pc, #148]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_RCC_OscConfig+0x244>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fa0c 	bl	8000aa4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fa08 	bl	8000aa4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e187      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d036      	beq.n	8002728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_RCC_OscConfig+0x248>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe f9ec 	bl	8000aa4 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe f9e8 	bl	8000aa4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e167      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x200>
 80026ee:	e01b      	b.n	8002728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_OscConfig+0x248>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f9d5 	bl	8000aa4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e00e      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe f9d1 	bl	8000aa4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d907      	bls.n	800271c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e150      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002710:	40023800 	.word	0x40023800
 8002714:	42470000 	.word	0x42470000
 8002718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ea      	bne.n	80026fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8097 	beq.w	8002864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b81      	ldr	r3, [pc, #516]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b7d      	ldr	r3, [pc, #500]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	4a7c      	ldr	r2, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	@ 0x40
 8002756:	4b7a      	ldr	r3, [pc, #488]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b77      	ldr	r3, [pc, #476]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b74      	ldr	r3, [pc, #464]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a73      	ldr	r2, [pc, #460]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe f991 	bl	8000aa4 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe f98d 	bl	8000aa4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e10c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b6a      	ldr	r3, [pc, #424]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x2ea>
 80027ac:	4b64      	ldr	r3, [pc, #400]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a63      	ldr	r2, [pc, #396]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b8:	e01c      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x30c>
 80027c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027dc:	4b58      	ldr	r3, [pc, #352]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e0:	4a57      	ldr	r2, [pc, #348]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e8:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a54      	ldr	r2, [pc, #336]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe f952 	bl	8000aa4 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe f94e 	bl	8000aa4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0cb      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ee      	beq.n	8002804 <HAL_RCC_OscConfig+0x334>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7fe f93c 	bl	8000aa4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe f938 	bl	8000aa4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0b5      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	4b3e      	ldr	r3, [pc, #248]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ee      	bne.n	8002830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	4a38      	ldr	r2, [pc, #224]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002862:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a1 	beq.w	80029b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286e:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d05c      	beq.n	8002934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d141      	bne.n	8002906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f90c 	bl	8000aa4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe f908 	bl	8000aa4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e087      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
 80028d2:	491b      	ldr	r1, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe f8e1 	bl	8000aa4 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f8dd 	bl	8000aa4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e05c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x416>
 8002904:	e054      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe f8ca 	bl	8000aa4 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe f8c6 	bl	8000aa4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e045      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
 8002932:	e03d      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e038      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x4ec>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d028      	beq.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d121      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d11a      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fd fff8 	bl	8000aa4 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fd fff4 	bl	8000aa4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd ff58 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08006de4 	.word	0x08006de4
 8002b84:	20000004 	.word	0x20000004
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b090      	sub	sp, #64	@ 0x40
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80a1 	bhi.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e09b      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b53      	ldr	r3, [pc, #332]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002bc4:	e09b      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bca:	e098      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b4a      	ldr	r3, [pc, #296]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf8:	fb03 f201 	mul.w	r2, r3, r1
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	4a43      	ldr	r2, [pc, #268]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c06:	fba0 1202 	umull	r1, r2, r0, r2
 8002c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c12:	4413      	add	r3, r2
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c26:	f7fd fad5 	bl	80001d4 <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4613      	mov	r3, r2
 8002c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c32:	e053      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c34:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	617a      	str	r2, [r7, #20]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c46:	f04f 0b00 	mov.w	fp, #0
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	465b      	mov	r3, fp
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	ebb2 080a 	subs.w	r8, r2, sl
 8002c66:	eb63 090b 	sbc.w	r9, r3, fp
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c82:	eb63 0509 	sbc.w	r5, r3, r9
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	00eb      	lsls	r3, r5, #3
 8002c90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c94:	00e2      	lsls	r2, r4, #3
 8002c96:	4614      	mov	r4, r2
 8002c98:	461d      	mov	r5, r3
 8002c9a:	eb14 030a 	adds.w	r3, r4, sl
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	eb45 030b 	adc.w	r3, r5, fp
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	60fa      	str	r2, [r7, #12]
 8002ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd0:	f7fd fa80 	bl	80001d4 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3740      	adds	r7, #64	@ 0x40
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	017d7840 	.word	0x017d7840

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000004 	.word	0x20000004

08002d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d30:	b084      	sub	sp, #16
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	f107 001c 	add.w	r0, r7, #28
 8002d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d123      	bne.n	8002d92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 fae2 	bl	8004350 <USB_CoreReset>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e01b      	b.n	8002dca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f001 fad6 	bl	8004350 <USB_CoreReset>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002da8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d106      	bne.n	8002dbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dbc:	e005      	b.n	8002dca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002dca:	7fbb      	ldrb	r3, [r7, #30]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10b      	bne.n	8002de8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f043 0206 	orr.w	r2, r3, #6
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002df4:	b004      	add	sp, #16
 8002df6:	4770      	bx	lr

08002df8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d165      	bne.n	8002ed8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a41      	ldr	r2, [pc, #260]	@ (8002f14 <USB_SetTurnaroundTime+0x11c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d906      	bls.n	8002e22 <USB_SetTurnaroundTime+0x2a>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a40      	ldr	r2, [pc, #256]	@ (8002f18 <USB_SetTurnaroundTime+0x120>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d202      	bcs.n	8002e22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e062      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a3c      	ldr	r2, [pc, #240]	@ (8002f18 <USB_SetTurnaroundTime+0x120>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d306      	bcc.n	8002e38 <USB_SetTurnaroundTime+0x40>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f1c <USB_SetTurnaroundTime+0x124>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d202      	bcs.n	8002e38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e32:	230e      	movs	r3, #14
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e057      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a38      	ldr	r2, [pc, #224]	@ (8002f1c <USB_SetTurnaroundTime+0x124>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d306      	bcc.n	8002e4e <USB_SetTurnaroundTime+0x56>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a37      	ldr	r2, [pc, #220]	@ (8002f20 <USB_SetTurnaroundTime+0x128>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d202      	bcs.n	8002e4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e48:	230d      	movs	r3, #13
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e04c      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4a33      	ldr	r2, [pc, #204]	@ (8002f20 <USB_SetTurnaroundTime+0x128>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d306      	bcc.n	8002e64 <USB_SetTurnaroundTime+0x6c>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4a32      	ldr	r2, [pc, #200]	@ (8002f24 <USB_SetTurnaroundTime+0x12c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e5e:	230c      	movs	r3, #12
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e041      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a2f      	ldr	r2, [pc, #188]	@ (8002f24 <USB_SetTurnaroundTime+0x12c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d906      	bls.n	8002e7a <USB_SetTurnaroundTime+0x82>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f28 <USB_SetTurnaroundTime+0x130>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d802      	bhi.n	8002e7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e74:	230b      	movs	r3, #11
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e036      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f28 <USB_SetTurnaroundTime+0x130>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d906      	bls.n	8002e90 <USB_SetTurnaroundTime+0x98>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <USB_SetTurnaroundTime+0x134>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d802      	bhi.n	8002e90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e02b      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <USB_SetTurnaroundTime+0x134>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d906      	bls.n	8002ea6 <USB_SetTurnaroundTime+0xae>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	@ (8002f30 <USB_SetTurnaroundTime+0x138>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d202      	bcs.n	8002ea6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ea0:	2309      	movs	r3, #9
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e020      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a21      	ldr	r2, [pc, #132]	@ (8002f30 <USB_SetTurnaroundTime+0x138>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d306      	bcc.n	8002ebc <USB_SetTurnaroundTime+0xc4>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <USB_SetTurnaroundTime+0x13c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d802      	bhi.n	8002ebc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e015      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <USB_SetTurnaroundTime+0x13c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d906      	bls.n	8002ed2 <USB_SetTurnaroundTime+0xda>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <USB_SetTurnaroundTime+0x140>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d202      	bcs.n	8002ed2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e00a      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e007      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ede:	2309      	movs	r3, #9
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e001      	b.n	8002ee8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ee4:	2309      	movs	r3, #9
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	00d8acbf 	.word	0x00d8acbf
 8002f18:	00e4e1c0 	.word	0x00e4e1c0
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	01067380 	.word	0x01067380
 8002f24:	011a499f 	.word	0x011a499f
 8002f28:	01312cff 	.word	0x01312cff
 8002f2c:	014ca43f 	.word	0x014ca43f
 8002f30:	016e3600 	.word	0x016e3600
 8002f34:	01a6ab1f 	.word	0x01a6ab1f
 8002f38:	01e84800 	.word	0x01e84800

08002f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d115      	bne.n	8002fce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fae:	200a      	movs	r0, #10
 8002fb0:	f7fd fd84 	bl	8000abc <HAL_Delay>
      ms += 10U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	330a      	adds	r3, #10
 8002fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f001 f939 	bl	8004232 <USB_GetMode>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d01e      	beq.n	8003004 <USB_SetCurrentMode+0x84>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fca:	d9f0      	bls.n	8002fae <USB_SetCurrentMode+0x2e>
 8002fcc:	e01a      	b.n	8003004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d115      	bne.n	8003000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fe0:	200a      	movs	r0, #10
 8002fe2:	f7fd fd6b 	bl	8000abc <HAL_Delay>
      ms += 10U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	330a      	adds	r3, #10
 8002fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f001 f920 	bl	8004232 <USB_GetMode>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <USB_SetCurrentMode+0x84>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ffc:	d9f0      	bls.n	8002fe0 <USB_SetCurrentMode+0x60>
 8002ffe:	e001      	b.n	8003004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e005      	b.n	8003010 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2bc8      	cmp	r3, #200	@ 0xc8
 8003008:	d101      	bne.n	800300e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003018:	b084      	sub	sp, #16
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e009      	b.n	800304c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3340      	adds	r3, #64	@ 0x40
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3301      	adds	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0e      	cmp	r3, #14
 8003050:	d9f2      	bls.n	8003038 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11c      	bne.n	8003094 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	639a      	str	r2, [r3, #56]	@ 0x38
 8003092:	e00b      	b.n	80030ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030c8:	2100      	movs	r1, #0
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f968 	bl	80033a0 <USB_SetDevSpeed>
 80030d0:	e008      	b.n	80030e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030d2:	2101      	movs	r1, #1
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f963 	bl	80033a0 <USB_SetDevSpeed>
 80030da:	e003      	b.n	80030e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030dc:	2103      	movs	r1, #3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f95e 	bl	80033a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030e4:	2110      	movs	r1, #16
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8fa 	bl	80032e0 <USB_FlushTxFifo>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f924 	bl	8003344 <USB_FlushRxFifo>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800310c:	461a      	mov	r2, r3
 800310e:	2300      	movs	r3, #0
 8003110:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003118:	461a      	mov	r2, r3
 800311a:	2300      	movs	r3, #0
 800311c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e043      	b.n	80031b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003146:	d118      	bne.n	800317a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800315a:	461a      	mov	r2, r3
 800315c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e013      	b.n	800318c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e008      	b.n	800318c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	2300      	movs	r3, #0
 800319c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3301      	adds	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031bc:	461a      	mov	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d3b5      	bcc.n	8003130 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	e043      	b.n	8003252 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031e0:	d118      	bne.n	8003214 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f4:	461a      	mov	r2, r3
 80031f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e013      	b.n	8003226 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e008      	b.n	8003226 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003220:	461a      	mov	r2, r3
 8003222:	2300      	movs	r3, #0
 8003224:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800324a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	3301      	adds	r3, #1
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003256:	461a      	mov	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4293      	cmp	r3, r2
 800325c:	d3b5      	bcc.n	80031ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800326c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003270:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800327e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <USB_DevInit+0x2c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f043 0208 	orr.w	r2, r3, #8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032c4:	f043 0304 	orr.w	r3, r3, #4
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d8:	b004      	add	sp, #16
 80032da:	4770      	bx	lr
 80032dc:	803c3800 	.word	0x803c3800

080032e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032fa:	d901      	bls.n	8003300 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e01b      	b.n	8003338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	daf2      	bge.n	80032ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	019b      	lsls	r3, r3, #6
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003324:	d901      	bls.n	800332a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e006      	b.n	8003338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b20      	cmp	r3, #32
 8003334:	d0f0      	beq.n	8003318 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3301      	adds	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800335c:	d901      	bls.n	8003362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e018      	b.n	8003394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	daf2      	bge.n	8003350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2210      	movs	r2, #16
 8003372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003380:	d901      	bls.n	8003386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e006      	b.n	8003394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d0f0      	beq.n	8003374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
 80033f6:	e00a      	b.n	800340e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d002      	beq.n	8003404 <USB_GetDevSpeed+0x32>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b06      	cmp	r3, #6
 8003402:	d102      	bne.n	800340a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003404:	2302      	movs	r3, #2
 8003406:	75fb      	strb	r3, [r7, #23]
 8003408:	e001      	b.n	800340e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800340a:	230f      	movs	r3, #15
 800340c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d13a      	bne.n	80034ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003456:	4313      	orrs	r3, r2
 8003458:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d155      	bne.n	800351c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	791b      	ldrb	r3, [r3, #4]
 800348a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800348c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	059b      	lsls	r3, r3, #22
 8003492:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003494:	4313      	orrs	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e036      	b.n	800351c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003502:	430b      	orrs	r3, r1
 8003504:	4313      	orrs	r3, r2
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d161      	bne.n	800360c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800355a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800355e:	d11f      	bne.n	80035a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800357a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800357e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800359a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800359e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035c0:	4013      	ands	r3, r2
 80035c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035e4:	4013      	ands	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0159      	lsls	r1, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003602:	4619      	mov	r1, r3
 8003604:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <USB_DeactivateEndpoint+0x1b0>)
 8003606:	4013      	ands	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	e060      	b.n	80036ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003622:	d11f      	bne.n	8003664 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800365e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	43db      	mvns	r3, r3
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	43db      	mvns	r3, r3
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036a8:	4013      	ands	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c6:	4619      	mov	r1, r3
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <USB_DeactivateEndpoint+0x1b4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	ec337800 	.word	0xec337800
 80036e0:	eff37800 	.word	0xeff37800

080036e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	2b01      	cmp	r3, #1
 8003702:	f040 817a 	bne.w	80039fa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d132      	bne.n	8003774 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	440a      	add	r2, r1
 8003724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003728:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800372c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800374c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800376c:	0cdb      	lsrs	r3, r3, #19
 800376e:	04db      	lsls	r3, r3, #19
 8003770:	6113      	str	r3, [r2, #16]
 8003772:	e092      	b.n	800389a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800378e:	0cdb      	lsrs	r3, r3, #19
 8003790:	04db      	lsls	r3, r3, #19
 8003792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11a      	bne.n	80037f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d903      	bls.n	80037d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037f0:	6113      	str	r3, [r2, #16]
 80037f2:	e01b      	b.n	800382c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003800:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	440b      	add	r3, r1
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	fbb1 f3f3 	udiv	r3, r1, r3
 8003816:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003818:	4ba2      	ldr	r3, [pc, #648]	@ (8003aa4 <USB_EPStartXfer+0x3c0>)
 800381a:	400b      	ands	r3, r1
 800381c:	69b9      	ldr	r1, [r7, #24]
 800381e:	0148      	lsls	r0, r1, #5
 8003820:	69f9      	ldr	r1, [r7, #28]
 8003822:	4401      	add	r1, r0
 8003824:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003828:	4313      	orrs	r3, r2
 800382a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	0148      	lsls	r0, r1, #5
 8003846:	69f9      	ldr	r1, [r7, #28]
 8003848:	4401      	add	r1, r0
 800384a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800384e:	4313      	orrs	r3, r2
 8003850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d11f      	bne.n	800389a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	440a      	add	r2, r1
 8003870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003874:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	440a      	add	r2, r1
 8003890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003894:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d14b      	bne.n	8003938 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	791b      	ldrb	r3, [r3, #4]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d128      	bne.n	8003916 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d110      	bne.n	80038f6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e00f      	b.n	8003916 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	0151      	lsls	r1, r2, #5
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	440a      	add	r2, r1
 800390c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003930:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e165      	b.n	8003c04 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003952:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d015      	beq.n	800398c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 814d 	beq.w	8003c04 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003986:	4313      	orrs	r3, r2
 8003988:	634b      	str	r3, [r1, #52]	@ 0x34
 800398a:	e13b      	b.n	8003c04 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d110      	bne.n	80039be <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e00f      	b.n	80039de <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	68d9      	ldr	r1, [r3, #12]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	b298      	uxth	r0, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	4603      	mov	r3, r0
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f9b8 	bl	8003d68 <USB_WritePacket>
 80039f8:	e104      	b.n	8003c04 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a14:	0cdb      	lsrs	r3, r3, #19
 8003a16:	04db      	lsls	r3, r3, #19
 8003a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003a38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003a3c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d131      	bne.n	8003aa8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	0148      	lsls	r0, r1, #5
 8003a76:	69f9      	ldr	r1, [r7, #28]
 8003a78:	4401      	add	r1, r0
 8003a7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003aa0:	6113      	str	r3, [r2, #16]
 8003aa2:	e061      	b.n	8003b68 <USB_EPStartXfer+0x484>
 8003aa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d123      	bne.n	8003af8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	0148      	lsls	r0, r1, #5
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	4401      	add	r1, r0
 8003ace:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003af4:	6113      	str	r3, [r2, #16]
 8003af6:	e037      	b.n	8003b68 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	1e5a      	subs	r2, r3, #1
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	8afa      	ldrh	r2, [r7, #22]
 8003b14:	fb03 f202 	mul.w	r2, r3, r2
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	04d9      	lsls	r1, r3, #19
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <USB_EPStartXfer+0x52c>)
 8003b30:	400b      	ands	r3, r1
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	0148      	lsls	r0, r1, #5
 8003b36:	69f9      	ldr	r1, [r7, #28]
 8003b38:	4401      	add	r1, r0
 8003b3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	0148      	lsls	r0, r1, #5
 8003b5c:	69f9      	ldr	r1, [r7, #28]
 8003b5e:	4401      	add	r1, r0
 8003b60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b64:	4313      	orrs	r3, r2
 8003b66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10d      	bne.n	8003b8a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b86:	460a      	mov	r2, r1
 8003b88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	791b      	ldrb	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d128      	bne.n	8003be4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d110      	bne.n	8003bc4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00f      	b.n	8003be4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	1ff80000 	.word	0x1ff80000

08003c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d14a      	bne.n	8003cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c4a:	f040 8086 	bne.w	8003d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d902      	bls.n	8003cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8003caa:	e056      	b.n	8003d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc4:	d0e7      	beq.n	8003c96 <USB_EPStopXfer+0x82>
 8003cc6:	e048      	b.n	8003d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce0:	d13b      	bne.n	8003d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d902      	bls.n	8003d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d3e:	e00c      	b.n	8003d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d58:	d0e7      	beq.n	8003d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	@ 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	460b      	mov	r3, r1
 8003d78:	71fb      	strb	r3, [r7, #7]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d123      	bne.n	8003dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d8e:	88bb      	ldrh	r3, [r7, #4]
 8003d90:	3303      	adds	r3, #3
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e018      	b.n	8003dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	031a      	lsls	r2, r3, #12
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da8:	461a      	mov	r2, r3
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3e2      	bcc.n	8003d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3724      	adds	r7, #36	@ 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b08b      	sub	sp, #44	@ 0x2c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e014      	b.n	8003e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	3301      	adds	r3, #1
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	3301      	adds	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	3301      	adds	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	3301      	adds	r3, #1
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3e6      	bcc.n	8003e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e42:	8bfb      	ldrh	r3, [r7, #30]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01e      	beq.n	8003e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e52:	461a      	mov	r2, r3
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	3301      	adds	r3, #1
 8003e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	3301      	adds	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003e7a:	8bfb      	ldrh	r3, [r7, #30]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ea      	bne.n	8003e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	372c      	adds	r7, #44	@ 0x2c
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12c      	bne.n	8003f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db12      	blt.n	8003ee8 <USB_EPSetStall+0x54>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00f      	beq.n	8003ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e02b      	b.n	8003f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db12      	blt.n	8003f42 <USB_EPSetStall+0xae>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00f      	beq.n	8003f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d128      	bne.n	8003fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <USB_EPClearStall+0x4c>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	791b      	ldrb	r3, [r3, #4]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d138      	bne.n	800402e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e027      	b.n	800402e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ff8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d003      	beq.n	800400e <USB_EPClearStall+0x9e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	791b      	ldrb	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d10f      	bne.n	800402e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800405e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80040e4:	f023 0303 	bic.w	r3, r3, #3
 80040e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0c1b      	lsrs	r3, r3, #16
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	b29b      	uxth	r3, r3
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041c8:	68bb      	ldr	r3, [r7, #8]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	01db      	lsls	r3, r3, #7
 8004208:	b2db      	uxtb	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004224:	68bb      	ldr	r3, [r7, #8]
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0301 	and.w	r3, r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004268:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	460b      	mov	r3, r1
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	333c      	adds	r3, #60	@ 0x3c
 80042aa:	3304      	adds	r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4a26      	ldr	r2, [pc, #152]	@ (800434c <USB_EP0_OutStart+0xb8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d90a      	bls.n	80042ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c8:	d101      	bne.n	80042ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e037      	b.n	800433e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042fc:	f043 0318 	orr.w	r3, r3, #24
 8004300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004310:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004314:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10f      	bne.n	800433c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004336:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800433a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	4f54300a 	.word	0x4f54300a

08004350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004368:	d901      	bls.n	800436e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e01b      	b.n	80043a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	daf2      	bge.n	800435c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004392:	d901      	bls.n	8004398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d0f0      	beq.n	8004386 <USB_CoreReset+0x36>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80043c4:	f002 fc60 	bl	8006c88 <USBD_static_malloc>
 80043c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	32b0      	adds	r2, #176	@ 0xb0
 80043da:	2100      	movs	r1, #0
 80043dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043e0:	2302      	movs	r3, #2
 80043e2:	e0d4      	b.n	800458e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80043e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80043e8:	2100      	movs	r1, #0
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f002 fc90 	bl	8006d10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	32b0      	adds	r2, #176	@ 0xb0
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	32b0      	adds	r2, #176	@ 0xb0
 800440a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7c1b      	ldrb	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d138      	bne.n	800448e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800441c:	4b5e      	ldr	r3, [pc, #376]	@ (8004598 <USBD_CDC_Init+0x1e4>)
 800441e:	7819      	ldrb	r1, [r3, #0]
 8004420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004424:	2202      	movs	r2, #2
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f002 fb0b 	bl	8006a42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800442c:	4b5a      	ldr	r3, [pc, #360]	@ (8004598 <USBD_CDC_Init+0x1e4>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3324      	adds	r3, #36	@ 0x24
 8004442:	2201      	movs	r2, #1
 8004444:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004446:	4b55      	ldr	r3, [pc, #340]	@ (800459c <USBD_CDC_Init+0x1e8>)
 8004448:	7819      	ldrb	r1, [r3, #0]
 800444a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800444e:	2202      	movs	r2, #2
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f002 faf6 	bl	8006a42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004456:	4b51      	ldr	r3, [pc, #324]	@ (800459c <USBD_CDC_Init+0x1e8>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f003 020f 	and.w	r2, r3, #15
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800446e:	2201      	movs	r2, #1
 8004470:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004472:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <USBD_CDC_Init+0x1ec>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3326      	adds	r3, #38	@ 0x26
 8004488:	2210      	movs	r2, #16
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	e035      	b.n	80044fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800448e:	4b42      	ldr	r3, [pc, #264]	@ (8004598 <USBD_CDC_Init+0x1e4>)
 8004490:	7819      	ldrb	r1, [r3, #0]
 8004492:	2340      	movs	r3, #64	@ 0x40
 8004494:	2202      	movs	r2, #2
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f002 fad3 	bl	8006a42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800449c:	4b3e      	ldr	r3, [pc, #248]	@ (8004598 <USBD_CDC_Init+0x1e4>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3324      	adds	r3, #36	@ 0x24
 80044b2:	2201      	movs	r2, #1
 80044b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044b6:	4b39      	ldr	r3, [pc, #228]	@ (800459c <USBD_CDC_Init+0x1e8>)
 80044b8:	7819      	ldrb	r1, [r3, #0]
 80044ba:	2340      	movs	r3, #64	@ 0x40
 80044bc:	2202      	movs	r2, #2
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f002 fabf 	bl	8006a42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044c4:	4b35      	ldr	r3, [pc, #212]	@ (800459c <USBD_CDC_Init+0x1e8>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80044dc:	2201      	movs	r2, #1
 80044de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044e0:	4b2f      	ldr	r3, [pc, #188]	@ (80045a0 <USBD_CDC_Init+0x1ec>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3326      	adds	r3, #38	@ 0x26
 80044f6:	2210      	movs	r2, #16
 80044f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044fa:	4b29      	ldr	r3, [pc, #164]	@ (80045a0 <USBD_CDC_Init+0x1ec>)
 80044fc:	7819      	ldrb	r1, [r3, #0]
 80044fe:	2308      	movs	r3, #8
 8004500:	2203      	movs	r2, #3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f002 fa9d 	bl	8006a42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004508:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <USBD_CDC_Init+0x1ec>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f003 020f 	and.w	r2, r3, #15
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3324      	adds	r3, #36	@ 0x24
 800451e:	2201      	movs	r2, #1
 8004520:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	33b0      	adds	r3, #176	@ 0xb0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004558:	2302      	movs	r3, #2
 800455a:	e018      	b.n	800458e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7c1b      	ldrb	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004564:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <USBD_CDC_Init+0x1e8>)
 8004566:	7819      	ldrb	r1, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800456e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f002 fb54 	bl	8006c20 <USBD_LL_PrepareReceive>
 8004578:	e008      	b.n	800458c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800457a:	4b08      	ldr	r3, [pc, #32]	@ (800459c <USBD_CDC_Init+0x1e8>)
 800457c:	7819      	ldrb	r1, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004584:	2340      	movs	r3, #64	@ 0x40
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f002 fb4a 	bl	8006c20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000097 	.word	0x20000097
 800459c:	20000098 	.word	0x20000098
 80045a0:	20000099 	.word	0x20000099

080045a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80045b0:	4b3a      	ldr	r3, [pc, #232]	@ (800469c <USBD_CDC_DeInit+0xf8>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f002 fa69 	bl	8006a8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80045bc:	4b37      	ldr	r3, [pc, #220]	@ (800469c <USBD_CDC_DeInit+0xf8>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	3324      	adds	r3, #36	@ 0x24
 80045d2:	2200      	movs	r2, #0
 80045d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045d6:	4b32      	ldr	r3, [pc, #200]	@ (80046a0 <USBD_CDC_DeInit+0xfc>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f002 fa56 	bl	8006a8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80045e2:	4b2f      	ldr	r3, [pc, #188]	@ (80046a0 <USBD_CDC_DeInit+0xfc>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045fa:	2200      	movs	r2, #0
 80045fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80045fe:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <USBD_CDC_DeInit+0x100>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f002 fa42 	bl	8006a8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800460a:	4b26      	ldr	r3, [pc, #152]	@ (80046a4 <USBD_CDC_DeInit+0x100>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3324      	adds	r3, #36	@ 0x24
 8004620:	2200      	movs	r2, #0
 8004622:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <USBD_CDC_DeInit+0x100>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	3326      	adds	r3, #38	@ 0x26
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	32b0      	adds	r2, #176	@ 0xb0
 8004648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01f      	beq.n	8004690 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	33b0      	adds	r3, #176	@ 0xb0
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	32b0      	adds	r2, #176	@ 0xb0
 800466e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004672:	4618      	mov	r0, r3
 8004674:	f002 fb16 	bl	8006ca4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	32b0      	adds	r2, #176	@ 0xb0
 8004682:	2100      	movs	r1, #0
 8004684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000097 	.word	0x20000097
 80046a0:	20000098 	.word	0x20000098
 80046a4:	20000099 	.word	0x20000099

080046a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	32b0      	adds	r2, #176	@ 0xb0
 80046bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0bf      	b.n	8004858 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d050      	beq.n	8004786 <USBD_CDC_Setup+0xde>
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	f040 80af 	bne.w	8004848 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	88db      	ldrh	r3, [r3, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03a      	beq.n	8004768 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	da1b      	bge.n	8004734 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	33b0      	adds	r3, #176	@ 0xb0
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004712:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	88d2      	ldrh	r2, [r2, #6]
 8004718:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	88db      	ldrh	r3, [r3, #6]
 800471e:	2b07      	cmp	r3, #7
 8004720:	bf28      	it	cs
 8004722:	2307      	movcs	r3, #7
 8004724:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	89fa      	ldrh	r2, [r7, #14]
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 fd47 	bl	80061c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004732:	e090      	b.n	8004856 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	785a      	ldrb	r2, [r3, #1]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	88db      	ldrh	r3, [r3, #6]
 8004742:	2b3f      	cmp	r3, #63	@ 0x3f
 8004744:	d803      	bhi.n	800474e <USBD_CDC_Setup+0xa6>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	88db      	ldrh	r3, [r3, #6]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	e000      	b.n	8004750 <USBD_CDC_Setup+0xa8>
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004756:	6939      	ldr	r1, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800475e:	461a      	mov	r2, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f001 fd59 	bl	8006218 <USBD_CtlPrepareRx>
      break;
 8004766:	e076      	b.n	8004856 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	33b0      	adds	r3, #176	@ 0xb0
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	7850      	ldrb	r0, [r2, #1]
 800477e:	2200      	movs	r2, #0
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	4798      	blx	r3
      break;
 8004784:	e067      	b.n	8004856 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d851      	bhi.n	8004832 <USBD_CDC_Setup+0x18a>
 800478e:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <USBD_CDC_Setup+0xec>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047c5 	.word	0x080047c5
 8004798:	08004841 	.word	0x08004841
 800479c:	08004833 	.word	0x08004833
 80047a0:	08004833 	.word	0x08004833
 80047a4:	08004833 	.word	0x08004833
 80047a8:	08004833 	.word	0x08004833
 80047ac:	08004833 	.word	0x08004833
 80047b0:	08004833 	.word	0x08004833
 80047b4:	08004833 	.word	0x08004833
 80047b8:	08004833 	.word	0x08004833
 80047bc:	080047ef 	.word	0x080047ef
 80047c0:	08004819 	.word	0x08004819
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d107      	bne.n	80047e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047d0:	f107 030a 	add.w	r3, r7, #10
 80047d4:	2202      	movs	r2, #2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 fcf1 	bl	80061c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047de:	e032      	b.n	8004846 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 fc7b 	bl	80060de <USBD_CtlError>
            ret = USBD_FAIL;
 80047e8:	2303      	movs	r3, #3
 80047ea:	75fb      	strb	r3, [r7, #23]
          break;
 80047ec:	e02b      	b.n	8004846 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047fa:	f107 030d 	add.w	r3, r7, #13
 80047fe:	2201      	movs	r2, #1
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 fcdc 	bl	80061c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004808:	e01d      	b.n	8004846 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 fc66 	bl	80060de <USBD_CtlError>
            ret = USBD_FAIL;
 8004812:	2303      	movs	r3, #3
 8004814:	75fb      	strb	r3, [r7, #23]
          break;
 8004816:	e016      	b.n	8004846 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d00f      	beq.n	8004844 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fc59 	bl	80060de <USBD_CtlError>
            ret = USBD_FAIL;
 800482c:	2303      	movs	r3, #3
 800482e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004830:	e008      	b.n	8004844 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fc52 	bl	80060de <USBD_CtlError>
          ret = USBD_FAIL;
 800483a:	2303      	movs	r3, #3
 800483c:	75fb      	strb	r3, [r7, #23]
          break;
 800483e:	e002      	b.n	8004846 <USBD_CDC_Setup+0x19e>
          break;
 8004840:	bf00      	nop
 8004842:	e008      	b.n	8004856 <USBD_CDC_Setup+0x1ae>
          break;
 8004844:	bf00      	nop
      }
      break;
 8004846:	e006      	b.n	8004856 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 fc47 	bl	80060de <USBD_CtlError>
      ret = USBD_FAIL;
 8004850:	2303      	movs	r3, #3
 8004852:	75fb      	strb	r3, [r7, #23]
      break;
 8004854:	bf00      	nop
  }

  return (uint8_t)ret;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004872:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	32b0      	adds	r2, #176	@ 0xb0
 800487e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004886:	2303      	movs	r3, #3
 8004888:	e065      	b.n	8004956 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	32b0      	adds	r2, #176	@ 0xb0
 8004894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004898:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3318      	adds	r3, #24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02f      	beq.n	8004914 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	3318      	adds	r3, #24
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	f003 010f 	and.w	r1, r3, #15
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	460b      	mov	r3, r1
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4403      	add	r3, r0
 80048dc:	331c      	adds	r3, #28
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d112      	bne.n	8004914 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3318      	adds	r3, #24
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004906:	78f9      	ldrb	r1, [r7, #3]
 8004908:	2300      	movs	r3, #0
 800490a:	2200      	movs	r2, #0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f002 f966 	bl	8006bde <USBD_LL_Transmit>
 8004912:	e01f      	b.n	8004954 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	33b0      	adds	r3, #176	@ 0xb0
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	33b0      	adds	r3, #176	@ 0xb0
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	32b0      	adds	r2, #176	@ 0xb0
 8004974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004978:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	32b0      	adds	r2, #176	@ 0xb0
 8004984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800498c:	2303      	movs	r3, #3
 800498e:	e01a      	b.n	80049c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 f964 	bl	8006c62 <USBD_LL_GetRxDataSize>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	33b0      	adds	r3, #176	@ 0xb0
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80049c0:	4611      	mov	r1, r2
 80049c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	32b0      	adds	r2, #176	@ 0xb0
 80049e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e024      	b.n	8004a3a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	33b0      	adds	r3, #176	@ 0xb0
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <USBD_CDC_EP0_RxReady+0x6a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a0a:	2bff      	cmp	r3, #255	@ 0xff
 8004a0c:	d014      	beq.n	8004a38 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	33b0      	adds	r3, #176	@ 0xb0
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004a26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	22ff      	movs	r2, #255	@ 0xff
 8004a34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a4c:	2182      	movs	r1, #130	@ 0x82
 8004a4e:	4818      	ldr	r0, [pc, #96]	@ (8004ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a50:	f000 fd0f 	bl	8005472 <USBD_GetEpDesc>
 8004a54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a56:	2101      	movs	r1, #1
 8004a58:	4815      	ldr	r0, [pc, #84]	@ (8004ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a5a:	f000 fd0a 	bl	8005472 <USBD_GetEpDesc>
 8004a5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a60:	2181      	movs	r1, #129	@ 0x81
 8004a62:	4813      	ldr	r0, [pc, #76]	@ (8004ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a64:	f000 fd05 	bl	8005472 <USBD_GetEpDesc>
 8004a68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2210      	movs	r2, #16
 8004a74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d006      	beq.n	8004a8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a84:	711a      	strb	r2, [r3, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a98:	711a      	strb	r2, [r3, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2243      	movs	r2, #67	@ 0x43
 8004aa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004aa4:	4b02      	ldr	r3, [pc, #8]	@ (8004ab0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000054 	.word	0x20000054

08004ab4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004abc:	2182      	movs	r1, #130	@ 0x82
 8004abe:	4818      	ldr	r0, [pc, #96]	@ (8004b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ac0:	f000 fcd7 	bl	8005472 <USBD_GetEpDesc>
 8004ac4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4815      	ldr	r0, [pc, #84]	@ (8004b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004aca:	f000 fcd2 	bl	8005472 <USBD_GetEpDesc>
 8004ace:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ad0:	2181      	movs	r1, #129	@ 0x81
 8004ad2:	4813      	ldr	r0, [pc, #76]	@ (8004b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ad4:	f000 fccd 	bl	8005472 <USBD_GetEpDesc>
 8004ad8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2210      	movs	r2, #16
 8004ae4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d006      	beq.n	8004afa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2200      	movs	r2, #0
 8004af0:	711a      	strb	r2, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f042 0202 	orr.w	r2, r2, #2
 8004af8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	711a      	strb	r2, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f042 0202 	orr.w	r2, r2, #2
 8004b0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2243      	movs	r2, #67	@ 0x43
 8004b12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000054 	.word	0x20000054

08004b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b2c:	2182      	movs	r1, #130	@ 0x82
 8004b2e:	4818      	ldr	r0, [pc, #96]	@ (8004b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b30:	f000 fc9f 	bl	8005472 <USBD_GetEpDesc>
 8004b34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b36:	2101      	movs	r1, #1
 8004b38:	4815      	ldr	r0, [pc, #84]	@ (8004b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b3a:	f000 fc9a 	bl	8005472 <USBD_GetEpDesc>
 8004b3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b40:	2181      	movs	r1, #129	@ 0x81
 8004b42:	4813      	ldr	r0, [pc, #76]	@ (8004b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b44:	f000 fc95 	bl	8005472 <USBD_GetEpDesc>
 8004b48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2210      	movs	r2, #16
 8004b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d006      	beq.n	8004b6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b64:	711a      	strb	r2, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b78:	711a      	strb	r2, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2243      	movs	r2, #67	@ 0x43
 8004b82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b84:	4b02      	ldr	r3, [pc, #8]	@ (8004b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000054 	.word	0x20000054

08004b94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	220a      	movs	r2, #10
 8004ba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ba2:	4b03      	ldr	r3, [pc, #12]	@ (8004bb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000010 	.word	0x20000010

08004bb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e009      	b.n	8004bdc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	33b0      	adds	r3, #176	@ 0xb0
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	32b0      	adds	r2, #176	@ 0xb0
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e008      	b.n	8004c20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	32b0      	adds	r2, #176	@ 0xb0
 8004c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e004      	b.n	8004c5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	32b0      	adds	r2, #176	@ 0xb0
 8004c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	32b0      	adds	r2, #176	@ 0xb0
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e018      	b.n	8004cc8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7c1b      	ldrb	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd0 <USBD_CDC_ReceivePacket+0x68>)
 8004ca0:	7819      	ldrb	r1, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 ffb7 	bl	8006c20 <USBD_LL_PrepareReceive>
 8004cb2:	e008      	b.n	8004cc6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <USBD_CDC_ReceivePacket+0x68>)
 8004cb6:	7819      	ldrb	r1, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004cbe:	2340      	movs	r3, #64	@ 0x40
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 ffad 	bl	8006c20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000098 	.word	0x20000098

08004cd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e01f      	b.n	8004d2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	79fa      	ldrb	r2, [r7, #7]
 8004d1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f001 fe27 	bl	8006974 <USBD_LL_Init>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e025      	b.n	8004d98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	32ae      	adds	r2, #174	@ 0xae
 8004d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00f      	beq.n	8004d88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	32ae      	adds	r2, #174	@ 0xae
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	f107 020e 	add.w	r2, r7, #14
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4798      	blx	r3
 8004d80:	4602      	mov	r2, r0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 fe2f 	bl	8006a0c <USBD_LL_Start>
 8004dae:	4603      	mov	r3, r0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004dc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	4611      	mov	r1, r2
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	4611      	mov	r1, r2
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f90c 	bl	800606a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d01a      	beq.n	8004eac <USBD_LL_SetupStage+0x72>
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d822      	bhi.n	8004ec0 <USBD_LL_SetupStage+0x86>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <USBD_LL_SetupStage+0x4a>
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d00a      	beq.n	8004e98 <USBD_LL_SetupStage+0x5e>
 8004e82:	e01d      	b.n	8004ec0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb63 	bl	8005558 <USBD_StdDevReq>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
      break;
 8004e96:	e020      	b.n	8004eda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fbcb 	bl	800563c <USBD_StdItfReq>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eaa:	e016      	b.n	8004eda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fc2d 	bl	8005714 <USBD_StdEPReq>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebe:	e00c      	b.n	8004eda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004ec6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 fdfc 	bl	8006acc <USBD_LL_StallEP>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed8:	bf00      	nop
  }

  return ret;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	460b      	mov	r3, r1
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d16e      	bne.n	8004fda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004f02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	f040 8098 	bne.w	8005040 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d913      	bls.n	8004f44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bf28      	it	cs
 8004f36:	4613      	movcs	r3, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f001 f988 	bl	8006252 <USBD_CtlContinueRx>
 8004f42:	e07d      	b.n	8005040 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d014      	beq.n	8004f7c <USBD_LL_DataOutStage+0x98>
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d81d      	bhi.n	8004f92 <USBD_LL_DataOutStage+0xae>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <USBD_LL_DataOutStage+0x7c>
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d003      	beq.n	8004f66 <USBD_LL_DataOutStage+0x82>
 8004f5e:	e018      	b.n	8004f92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75bb      	strb	r3, [r7, #22]
            break;
 8004f64:	e018      	b.n	8004f98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fa64 	bl	800543e <USBD_CoreFindIF>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75bb      	strb	r3, [r7, #22]
            break;
 8004f7a:	e00d      	b.n	8004f98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fa66 	bl	8005458 <USBD_CoreFindEP>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75bb      	strb	r3, [r7, #22]
            break;
 8004f90:	e002      	b.n	8004f98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	75bb      	strb	r3, [r7, #22]
            break;
 8004f96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f98:	7dbb      	ldrb	r3, [r7, #22]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d113      	bne.n	8004fd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004faa:	7dba      	ldrb	r2, [r7, #22]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	32ae      	adds	r2, #174	@ 0xae
 8004fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004fba:	7dba      	ldrb	r2, [r7, #22]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004fc2:	7dba      	ldrb	r2, [r7, #22]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	32ae      	adds	r2, #174	@ 0xae
 8004fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f001 f94e 	bl	8006274 <USBD_CtlSendStatus>
 8004fd8:	e032      	b.n	8005040 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004fda:	7afb      	ldrb	r3, [r7, #11]
 8004fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fa37 	bl	8005458 <USBD_CoreFindEP>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fee:	7dbb      	ldrb	r3, [r7, #22]
 8004ff0:	2bff      	cmp	r3, #255	@ 0xff
 8004ff2:	d025      	beq.n	8005040 <USBD_LL_DataOutStage+0x15c>
 8004ff4:	7dbb      	ldrb	r3, [r7, #22]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d122      	bne.n	8005040 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d117      	bne.n	8005036 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005006:	7dba      	ldrb	r2, [r7, #22]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	32ae      	adds	r2, #174	@ 0xae
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005016:	7dba      	ldrb	r2, [r7, #22]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800501e:	7dba      	ldrb	r2, [r7, #22]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	32ae      	adds	r2, #174	@ 0xae
 8005024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	7afa      	ldrb	r2, [r7, #11]
 800502c:	4611      	mov	r1, r2
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	4798      	blx	r3
 8005032:	4603      	mov	r3, r0
 8005034:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	e000      	b.n	8005042 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	460b      	mov	r3, r1
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005058:	7afb      	ldrb	r3, [r7, #11]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d16f      	bne.n	800513e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3314      	adds	r3, #20
 8005062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800506a:	2b02      	cmp	r3, #2
 800506c:	d15a      	bne.n	8005124 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d914      	bls.n	80050a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	461a      	mov	r2, r3
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f001 f8b0 	bl	80061f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005096:	2300      	movs	r3, #0
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f001 fdbf 	bl	8006c20 <USBD_LL_PrepareReceive>
 80050a2:	e03f      	b.n	8005124 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d11c      	bne.n	80050ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d316      	bcc.n	80050ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d20f      	bcs.n	80050ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 f891 	bl	80061f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050dc:	2300      	movs	r3, #0
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f001 fd9c 	bl	8006c20 <USBD_LL_PrepareReceive>
 80050e8:	e01c      	b.n	8005124 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d10f      	bne.n	8005116 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005116:	2180      	movs	r1, #128	@ 0x80
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f001 fcd7 	bl	8006acc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 f8bb 	bl	800629a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03a      	beq.n	80051a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fe42 	bl	8004db8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800513c:	e032      	b.n	80051a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4619      	mov	r1, r3
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f985 	bl	8005458 <USBD_CoreFindEP>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2bff      	cmp	r3, #255	@ 0xff
 8005156:	d025      	beq.n	80051a4 <USBD_LL_DataInStage+0x15a>
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d122      	bne.n	80051a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b03      	cmp	r3, #3
 8005168:	d11c      	bne.n	80051a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800516a:	7dfa      	ldrb	r2, [r7, #23]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	32ae      	adds	r2, #174	@ 0xae
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800517a:	7dfa      	ldrb	r2, [r7, #23]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005182:	7dfa      	ldrb	r2, [r7, #23]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	32ae      	adds	r2, #174	@ 0xae
 8005188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	7afa      	ldrb	r2, [r7, #11]
 8005190:	4611      	mov	r1, r2
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	4798      	blx	r3
 8005196:	4603      	mov	r3, r0
 8005198:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800519a:	7dbb      	ldrb	r3, [r7, #22]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80051a0:	7dbb      	ldrb	r3, [r7, #22]
 80051a2:	e000      	b.n	80051a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d014      	beq.n	8005214 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	4611      	mov	r1, r2
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005214:	2340      	movs	r3, #64	@ 0x40
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fc11 	bl	8006a42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2240      	movs	r2, #64	@ 0x40
 800522c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005230:	2340      	movs	r3, #64	@ 0x40
 8005232:	2200      	movs	r2, #0
 8005234:	2180      	movs	r1, #128	@ 0x80
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fc03 	bl	8006a42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2240      	movs	r2, #64	@ 0x40
 8005246:	621a      	str	r2, [r3, #32]

  return ret;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	460b      	mov	r3, r1
 800525c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b04      	cmp	r3, #4
 8005284:	d006      	beq.n	8005294 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800528c:	b2da      	uxtb	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2204      	movs	r2, #4
 8005298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d106      	bne.n	80052cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d110      	bne.n	8005310 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	32ae      	adds	r2, #174	@ 0xae
 8005330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	e01c      	b.n	8005376 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d115      	bne.n	8005374 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	32ae      	adds	r2, #174	@ 0xae
 8005352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	32ae      	adds	r2, #174	@ 0xae
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	4611      	mov	r1, r2
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	32ae      	adds	r2, #174	@ 0xae
 8005394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800539c:	2303      	movs	r3, #3
 800539e:	e01c      	b.n	80053da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d115      	bne.n	80053d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	32ae      	adds	r2, #174	@ 0xae
 80053b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	32ae      	adds	r2, #174	@ 0xae
 80053ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	4611      	mov	r1, r2
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4611      	mov	r1, r2
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800544a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005464:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	885b      	ldrh	r3, [r3, #2]
 800548e:	b29b      	uxth	r3, r3
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	4293      	cmp	r3, r2
 8005496:	d91f      	bls.n	80054d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800549e:	e013      	b.n	80054c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80054a0:	f107 030a 	add.w	r3, r7, #10
 80054a4:	4619      	mov	r1, r3
 80054a6:	6978      	ldr	r0, [r7, #20]
 80054a8:	f000 f81b 	bl	80054e2 <USBD_GetNextDesc>
 80054ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d108      	bne.n	80054c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	789b      	ldrb	r3, [r3, #2]
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d008      	beq.n	80054d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	885b      	ldrh	r3, [r3, #2]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	897b      	ldrh	r3, [r7, #10]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d8e5      	bhi.n	80054a0 <USBD_GetEpDesc+0x2e>
 80054d4:	e000      	b.n	80054d8 <USBD_GetEpDesc+0x66>
          break;
 80054d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80054d8:	693b      	ldr	r3, [r7, #16]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3301      	adds	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005538:	8a3b      	ldrh	r3, [r7, #16]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	b21a      	sxth	r2, r3
 800553e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005542:	4313      	orrs	r3, r2
 8005544:	b21b      	sxth	r3, r3
 8005546:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005548:	89fb      	ldrh	r3, [r7, #14]
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d005      	beq.n	800557e <USBD_StdDevReq+0x26>
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d857      	bhi.n	8005626 <USBD_StdDevReq+0xce>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <USBD_StdDevReq+0x42>
 800557a:	2b20      	cmp	r3, #32
 800557c:	d153      	bne.n	8005626 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	32ae      	adds	r2, #174	@ 0xae
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e04a      	b.n	8005630 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d83b      	bhi.n	800561a <USBD_StdDevReq+0xc2>
 80055a2:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <USBD_StdDevReq+0x50>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005611 	.word	0x08005611
 80055b0:	0800561b 	.word	0x0800561b
 80055b4:	08005607 	.word	0x08005607
 80055b8:	0800561b 	.word	0x0800561b
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	0800561b 	.word	0x0800561b
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	080055e5 	.word	0x080055e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa3c 	bl	8005a50 <USBD_GetDescriptor>
          break;
 80055d8:	e024      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fba1 	bl	8005d24 <USBD_SetAddress>
          break;
 80055e2:	e01f      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fbe0 	bl	8005dac <USBD_SetConfig>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
          break;
 80055f0:	e018      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fc83 	bl	8005f00 <USBD_GetConfig>
          break;
 80055fa:	e013      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcb4 	bl	8005f6c <USBD_GetStatus>
          break;
 8005604:	e00e      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fce3 	bl	8005fd4 <USBD_SetFeature>
          break;
 800560e:	e009      	b.n	8005624 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fd07 	bl	8006026 <USBD_ClrFeature>
          break;
 8005618:	e004      	b.n	8005624 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fd5e 	bl	80060de <USBD_CtlError>
          break;
 8005622:	bf00      	nop
      }
      break;
 8005624:	e004      	b.n	8005630 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fd58 	bl	80060de <USBD_CtlError>
      break;
 800562e:	bf00      	nop
  }

  return ret;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d005      	beq.n	8005662 <USBD_StdItfReq+0x26>
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d852      	bhi.n	8005700 <USBD_StdItfReq+0xc4>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <USBD_StdItfReq+0x26>
 800565e:	2b20      	cmp	r3, #32
 8005660:	d14e      	bne.n	8005700 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005668:	b2db      	uxtb	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	2b02      	cmp	r3, #2
 800566e:	d840      	bhi.n	80056f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	889b      	ldrh	r3, [r3, #4]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d836      	bhi.n	80056e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	889b      	ldrh	r3, [r3, #4]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fedb 	bl	800543e <USBD_CoreFindIF>
 8005688:	4603      	mov	r3, r0
 800568a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2bff      	cmp	r3, #255	@ 0xff
 8005690:	d01d      	beq.n	80056ce <USBD_StdItfReq+0x92>
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11a      	bne.n	80056ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005698:	7bba      	ldrb	r2, [r7, #14]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	32ae      	adds	r2, #174	@ 0xae
 800569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00f      	beq.n	80056c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80056a8:	7bba      	ldrb	r2, [r7, #14]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80056b0:	7bba      	ldrb	r2, [r7, #14]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	32ae      	adds	r2, #174	@ 0xae
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056c6:	e004      	b.n	80056d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056cc:	e001      	b.n	80056d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80056ce:	2303      	movs	r3, #3
 80056d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	88db      	ldrh	r3, [r3, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d110      	bne.n	80056fc <USBD_StdItfReq+0xc0>
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10d      	bne.n	80056fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fdc7 	bl	8006274 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056e6:	e009      	b.n	80056fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fcf7 	bl	80060de <USBD_CtlError>
          break;
 80056f0:	e004      	b.n	80056fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fcf2 	bl	80060de <USBD_CtlError>
          break;
 80056fa:	e000      	b.n	80056fe <USBD_StdItfReq+0xc2>
          break;
 80056fc:	bf00      	nop
      }
      break;
 80056fe:	e004      	b.n	800570a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fceb 	bl	80060de <USBD_CtlError>
      break;
 8005708:	bf00      	nop
  }

  return ret;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	889b      	ldrh	r3, [r3, #4]
 8005726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d007      	beq.n	8005744 <USBD_StdEPReq+0x30>
 8005734:	2b40      	cmp	r3, #64	@ 0x40
 8005736:	f200 817f 	bhi.w	8005a38 <USBD_StdEPReq+0x324>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d02a      	beq.n	8005794 <USBD_StdEPReq+0x80>
 800573e:	2b20      	cmp	r3, #32
 8005740:	f040 817a 	bne.w	8005a38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fe85 	bl	8005458 <USBD_CoreFindEP>
 800574e:	4603      	mov	r3, r0
 8005750:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005752:	7b7b      	ldrb	r3, [r7, #13]
 8005754:	2bff      	cmp	r3, #255	@ 0xff
 8005756:	f000 8174 	beq.w	8005a42 <USBD_StdEPReq+0x32e>
 800575a:	7b7b      	ldrb	r3, [r7, #13]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 8170 	bne.w	8005a42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005762:	7b7a      	ldrb	r2, [r7, #13]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800576a:	7b7a      	ldrb	r2, [r7, #13]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	32ae      	adds	r2, #174	@ 0xae
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8163 	beq.w	8005a42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800577c:	7b7a      	ldrb	r2, [r7, #13]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	32ae      	adds	r2, #174	@ 0xae
 8005782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	4603      	mov	r3, r0
 8005790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005792:	e156      	b.n	8005a42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d008      	beq.n	80057ae <USBD_StdEPReq+0x9a>
 800579c:	2b03      	cmp	r3, #3
 800579e:	f300 8145 	bgt.w	8005a2c <USBD_StdEPReq+0x318>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 809b 	beq.w	80058de <USBD_StdEPReq+0x1ca>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d03c      	beq.n	8005826 <USBD_StdEPReq+0x112>
 80057ac:	e13e      	b.n	8005a2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d002      	beq.n	80057c0 <USBD_StdEPReq+0xac>
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d016      	beq.n	80057ec <USBD_StdEPReq+0xd8>
 80057be:	e02c      	b.n	800581a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <USBD_StdEPReq+0xce>
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d00a      	beq.n	80057e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f97b 	bl	8006acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 f977 	bl	8006acc <USBD_LL_StallEP>
 80057de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057e0:	e020      	b.n	8005824 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc7a 	bl	80060de <USBD_CtlError>
              break;
 80057ea:	e01b      	b.n	8005824 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	885b      	ldrh	r3, [r3, #2]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10e      	bne.n	8005812 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <USBD_StdEPReq+0xfe>
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	2b80      	cmp	r3, #128	@ 0x80
 80057fe:	d008      	beq.n	8005812 <USBD_StdEPReq+0xfe>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	88db      	ldrh	r3, [r3, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 f95d 	bl	8006acc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fd2e 	bl	8006274 <USBD_CtlSendStatus>

              break;
 8005818:	e004      	b.n	8005824 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fc5e 	bl	80060de <USBD_CtlError>
              break;
 8005822:	bf00      	nop
          }
          break;
 8005824:	e107      	b.n	8005a36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d002      	beq.n	8005838 <USBD_StdEPReq+0x124>
 8005832:	2b03      	cmp	r3, #3
 8005834:	d016      	beq.n	8005864 <USBD_StdEPReq+0x150>
 8005836:	e04b      	b.n	80058d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <USBD_StdEPReq+0x146>
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b80      	cmp	r3, #128	@ 0x80
 8005842:	d00a      	beq.n	800585a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 f93f 	bl	8006acc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800584e:	2180      	movs	r1, #128	@ 0x80
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 f93b 	bl	8006acc <USBD_LL_StallEP>
 8005856:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005858:	e040      	b.n	80058dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fc3e 	bl	80060de <USBD_CtlError>
              break;
 8005862:	e03b      	b.n	80058dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	885b      	ldrh	r3, [r3, #2]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d136      	bne.n	80058da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f945 	bl	8006b0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fcf7 	bl	8006274 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fde4 	bl	8005458 <USBD_CoreFindEP>
 8005890:	4603      	mov	r3, r0
 8005892:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005894:	7b7b      	ldrb	r3, [r7, #13]
 8005896:	2bff      	cmp	r3, #255	@ 0xff
 8005898:	d01f      	beq.n	80058da <USBD_StdEPReq+0x1c6>
 800589a:	7b7b      	ldrb	r3, [r7, #13]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11c      	bne.n	80058da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80058a0:	7b7a      	ldrb	r2, [r7, #13]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80058a8:	7b7a      	ldrb	r2, [r7, #13]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	32ae      	adds	r2, #174	@ 0xae
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058b8:	7b7a      	ldrb	r2, [r7, #13]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32ae      	adds	r2, #174	@ 0xae
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80058ce:	e004      	b.n	80058da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc03 	bl	80060de <USBD_CtlError>
              break;
 80058d8:	e000      	b.n	80058dc <USBD_StdEPReq+0x1c8>
              break;
 80058da:	bf00      	nop
          }
          break;
 80058dc:	e0ab      	b.n	8005a36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d002      	beq.n	80058f0 <USBD_StdEPReq+0x1dc>
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d032      	beq.n	8005954 <USBD_StdEPReq+0x240>
 80058ee:	e097      	b.n	8005a20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <USBD_StdEPReq+0x1f2>
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	2b80      	cmp	r3, #128	@ 0x80
 80058fa:	d004      	beq.n	8005906 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fbed 	bl	80060de <USBD_CtlError>
                break;
 8005904:	e091      	b.n	8005a2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800590a:	2b00      	cmp	r3, #0
 800590c:	da0b      	bge.n	8005926 <USBD_StdEPReq+0x212>
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	3310      	adds	r3, #16
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	3304      	adds	r3, #4
 8005924:	e00b      	b.n	800593e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	3304      	adds	r3, #4
 800593e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2202      	movs	r2, #2
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fc37 	bl	80061c0 <USBD_CtlSendData>
              break;
 8005952:	e06a      	b.n	8005a2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da11      	bge.n	8005980 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3324      	adds	r3, #36	@ 0x24
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d117      	bne.n	80059a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fbb0 	bl	80060de <USBD_CtlError>
                  break;
 800597e:	e054      	b.n	8005a2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb9d 	bl	80060de <USBD_CtlError>
                  break;
 80059a4:	e041      	b.n	8005a2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da0b      	bge.n	80059c6 <USBD_StdEPReq+0x2b2>
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	3310      	adds	r3, #16
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	e00b      	b.n	80059de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	3304      	adds	r3, #4
 80059de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <USBD_StdEPReq+0x2d8>
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	2b80      	cmp	r3, #128	@ 0x80
 80059ea:	d103      	bne.n	80059f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e00e      	b.n	8005a12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f8a5 	bl	8006b48 <USBD_LL_IsStallEP>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2202      	movs	r2, #2
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fbd1 	bl	80061c0 <USBD_CtlSendData>
              break;
 8005a1e:	e004      	b.n	8005a2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb5b 	bl	80060de <USBD_CtlError>
              break;
 8005a28:	bf00      	nop
          }
          break;
 8005a2a:	e004      	b.n	8005a36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb55 	bl	80060de <USBD_CtlError>
          break;
 8005a34:	bf00      	nop
      }
      break;
 8005a36:	e005      	b.n	8005a44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fb4f 	bl	80060de <USBD_CtlError>
      break;
 8005a40:	e000      	b.n	8005a44 <USBD_StdEPReq+0x330>
      break;
 8005a42:	bf00      	nop
  }

  return ret;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	885b      	ldrh	r3, [r3, #2]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	f200 8128 	bhi.w	8005cc6 <USBD_GetDescriptor+0x276>
 8005a76:	a201      	add	r2, pc, #4	@ (adr r2, 8005a7c <USBD_GetDescriptor+0x2c>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	08005ab1 	.word	0x08005ab1
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005cc7 	.word	0x08005cc7
 8005a8c:	08005cc7 	.word	0x08005cc7
 8005a90:	08005c67 	.word	0x08005c67
 8005a94:	08005c93 	.word	0x08005c93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	7c12      	ldrb	r2, [r2, #16]
 8005aa4:	f107 0108 	add.w	r1, r7, #8
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4798      	blx	r3
 8005aac:	60f8      	str	r0, [r7, #12]
      break;
 8005aae:	e112      	b.n	8005cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	7c1b      	ldrb	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10d      	bne.n	8005ad4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	f107 0208 	add.w	r2, r7, #8
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4798      	blx	r3
 8005ac8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	2202      	movs	r2, #2
 8005ad0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ad2:	e100      	b.n	8005cd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	f107 0208 	add.w	r2, r7, #8
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	2202      	movs	r2, #2
 8005aec:	701a      	strb	r2, [r3, #0]
      break;
 8005aee:	e0f2      	b.n	8005cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	885b      	ldrh	r3, [r3, #2]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	f200 80ac 	bhi.w	8005c54 <USBD_GetDescriptor+0x204>
 8005afc:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <USBD_GetDescriptor+0xb4>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b1d 	.word	0x08005b1d
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b85 	.word	0x08005b85
 8005b10:	08005bb9 	.word	0x08005bb9
 8005b14:	08005bed 	.word	0x08005bed
 8005b18:	08005c21 	.word	0x08005c21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	7c12      	ldrb	r2, [r2, #16]
 8005b34:	f107 0108 	add.w	r1, r7, #8
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
 8005b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b3e:	e091      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 facb 	bl	80060de <USBD_CtlError>
            err++;
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b4e:	e089      	b.n	8005c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	7c12      	ldrb	r2, [r2, #16]
 8005b68:	f107 0108 	add.w	r1, r7, #8
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
 8005b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b72:	e077      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fab1 	bl	80060de <USBD_CtlError>
            err++;
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	72fb      	strb	r3, [r7, #11]
          break;
 8005b82:	e06f      	b.n	8005c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	7c12      	ldrb	r2, [r2, #16]
 8005b9c:	f107 0108 	add.w	r1, r7, #8
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
 8005ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ba6:	e05d      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa97 	bl	80060de <USBD_CtlError>
            err++;
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bb6:	e055      	b.n	8005c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7c12      	ldrb	r2, [r2, #16]
 8005bd0:	f107 0108 	add.w	r1, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bda:	e043      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa7d 	bl	80060de <USBD_CtlError>
            err++;
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	3301      	adds	r3, #1
 8005be8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bea:	e03b      	b.n	8005c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	7c12      	ldrb	r2, [r2, #16]
 8005c04:	f107 0108 	add.w	r1, r7, #8
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c0e:	e029      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa63 	bl	80060de <USBD_CtlError>
            err++;
 8005c18:	7afb      	ldrb	r3, [r7, #11]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c1e:	e021      	b.n	8005c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	7c12      	ldrb	r2, [r2, #16]
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c42:	e00f      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa49 	bl	80060de <USBD_CtlError>
            err++;
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	72fb      	strb	r3, [r7, #11]
          break;
 8005c52:	e007      	b.n	8005c64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa41 	bl	80060de <USBD_CtlError>
          err++;
 8005c5c:	7afb      	ldrb	r3, [r7, #11]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005c62:	bf00      	nop
      }
      break;
 8005c64:	e037      	b.n	8005cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7c1b      	ldrb	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c76:	f107 0208 	add.w	r2, r7, #8
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4798      	blx	r3
 8005c7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c80:	e029      	b.n	8005cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa2a 	bl	80060de <USBD_CtlError>
        err++;
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c90:	e021      	b.n	8005cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7c1b      	ldrb	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	f107 0208 	add.w	r2, r7, #8
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4798      	blx	r3
 8005caa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cb4:	e00f      	b.n	8005cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa10 	bl	80060de <USBD_CtlError>
        err++;
 8005cbe:	7afb      	ldrb	r3, [r7, #11]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8005cc4:	e007      	b.n	8005cd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fa08 	bl	80060de <USBD_CtlError>
      err++;
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8005cd4:	bf00      	nop
  }

  if (err != 0U)
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11e      	bne.n	8005d1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ce4:	893b      	ldrh	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	88da      	ldrh	r2, [r3, #6]
 8005cee:	893b      	ldrh	r3, [r7, #8]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bf28      	it	cs
 8005cf4:	4613      	movcs	r3, r2
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cfa:	893b      	ldrh	r3, [r7, #8]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fa5d 	bl	80061c0 <USBD_CtlSendData>
 8005d06:	e009      	b.n	8005d1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9e7 	bl	80060de <USBD_CtlError>
 8005d10:	e004      	b.n	8005d1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 faae 	bl	8006274 <USBD_CtlSendStatus>
 8005d18:	e000      	b.n	8005d1c <USBD_GetDescriptor+0x2cc>
    return;
 8005d1a:	bf00      	nop
  }
}
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop

08005d24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	889b      	ldrh	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d131      	bne.n	8005d9a <USBD_SetAddress+0x76>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	88db      	ldrh	r3, [r3, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d12d      	bne.n	8005d9a <USBD_SetAddress+0x76>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	885b      	ldrh	r3, [r3, #2]
 8005d42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d44:	d829      	bhi.n	8005d9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	885b      	ldrh	r3, [r3, #2]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d104      	bne.n	8005d68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f9bc 	bl	80060de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d66:	e01d      	b.n	8005da4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	7bfa      	ldrb	r2, [r7, #15]
 8005d6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 ff13 	bl	8006ba0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa7a 	bl	8006274 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8e:	e009      	b.n	8005da4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d98:	e004      	b.n	8005da4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f99e 	bl	80060de <USBD_CtlError>
  }
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	@ (8005efc <USBD_SetConfig+0x150>)
 8005dc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8005efc <USBD_SetConfig+0x150>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d905      	bls.n	8005dd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f985 	bl	80060de <USBD_CtlError>
    return USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e08c      	b.n	8005ef2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d002      	beq.n	8005dea <USBD_SetConfig+0x3e>
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d029      	beq.n	8005e3c <USBD_SetConfig+0x90>
 8005de8:	e075      	b.n	8005ed6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005dea:	4b44      	ldr	r3, [pc, #272]	@ (8005efc <USBD_SetConfig+0x150>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d020      	beq.n	8005e34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005df2:	4b42      	ldr	r3, [pc, #264]	@ (8005efc <USBD_SetConfig+0x150>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8005efc <USBD_SetConfig+0x150>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fe ffe3 	bl	8004dce <USBD_SetClassConfig>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f962 	bl	80060de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e22:	e065      	b.n	8005ef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa25 	bl	8006274 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e32:	e05d      	b.n	8005ef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa1d 	bl	8006274 <USBD_CtlSendStatus>
      break;
 8005e3a:	e059      	b.n	8005ef0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d112      	bne.n	8005e6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e56:	4b29      	ldr	r3, [pc, #164]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fe ffd2 	bl	8004e06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa06 	bl	8006274 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e68:	e042      	b.n	8005ef0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e6a:	4b24      	ldr	r3, [pc, #144]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d02a      	beq.n	8005ece <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fe ffc0 	bl	8004e06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e86:	4b1d      	ldr	r3, [pc, #116]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e90:	4b1a      	ldr	r3, [pc, #104]	@ (8005efc <USBD_SetConfig+0x150>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fe ff99 	bl	8004dce <USBD_SetClassConfig>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00f      	beq.n	8005ec6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f918 	bl	80060de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fe ffa5 	bl	8004e06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005ec4:	e014      	b.n	8005ef0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9d4 	bl	8006274 <USBD_CtlSendStatus>
      break;
 8005ecc:	e010      	b.n	8005ef0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9d0 	bl	8006274 <USBD_CtlSendStatus>
      break;
 8005ed4:	e00c      	b.n	8005ef0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f900 	bl	80060de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ede:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <USBD_SetConfig+0x150>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fe ff8e 	bl	8004e06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005eea:	2303      	movs	r3, #3
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	bf00      	nop
  }

  return ret;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000254 	.word	0x20000254

08005f00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d004      	beq.n	8005f1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8e2 	bl	80060de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f1a:	e023      	b.n	8005f64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	dc02      	bgt.n	8005f2e <USBD_GetConfig+0x2e>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc03      	bgt.n	8005f34 <USBD_GetConfig+0x34>
 8005f2c:	e015      	b.n	8005f5a <USBD_GetConfig+0x5a>
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d00b      	beq.n	8005f4a <USBD_GetConfig+0x4a>
 8005f32:	e012      	b.n	8005f5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f93c 	bl	80061c0 <USBD_CtlSendData>
        break;
 8005f48:	e00c      	b.n	8005f64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f934 	bl	80061c0 <USBD_CtlSendData>
        break;
 8005f58:	e004      	b.n	8005f64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8be 	bl	80060de <USBD_CtlError>
        break;
 8005f62:	bf00      	nop
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d81e      	bhi.n	8005fc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	88db      	ldrh	r3, [r3, #6]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d004      	beq.n	8005f96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8a5 	bl	80060de <USBD_CtlError>
        break;
 8005f94:	e01a      	b.n	8005fcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f900 	bl	80061c0 <USBD_CtlSendData>
      break;
 8005fc0:	e004      	b.n	8005fcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f88a 	bl	80060de <USBD_CtlError>
      break;
 8005fca:	bf00      	nop
  }
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	885b      	ldrh	r3, [r3, #2]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f940 	bl	8006274 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005ff4:	e013      	b.n	800601e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	885b      	ldrh	r3, [r3, #2]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d10b      	bne.n	8006016 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	889b      	ldrh	r3, [r3, #4]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	b29b      	uxth	r3, r3
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f930 	bl	8006274 <USBD_CtlSendStatus>
}
 8006014:	e003      	b.n	800601e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f860 	bl	80060de <USBD_CtlError>
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006036:	b2db      	uxtb	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	2b02      	cmp	r3, #2
 800603c:	d80b      	bhi.n	8006056 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	885b      	ldrh	r3, [r3, #2]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d10c      	bne.n	8006060 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f910 	bl	8006274 <USBD_CtlSendStatus>
      }
      break;
 8006054:	e004      	b.n	8006060 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f840 	bl	80060de <USBD_CtlError>
      break;
 800605e:	e000      	b.n	8006062 <USBD_ClrFeature+0x3c>
      break;
 8006060:	bf00      	nop
  }
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fa40 	bl	800551a <SWAPBYTE>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fa33 	bl	800551a <SWAPBYTE>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fa26 	bl	800551a <SWAPBYTE>
 80060ce:	4603      	mov	r3, r0
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	80da      	strh	r2, [r3, #6]
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060e8:	2180      	movs	r1, #128	@ 0x80
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fcee 	bl	8006acc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060f0:	2100      	movs	r1, #0
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fcea 	bl	8006acc <USBD_LL_StallEP>
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d036      	beq.n	8006184 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f000 f836 	bl	800618c <USBD_GetLen>
 8006120:	4603      	mov	r3, r0
 8006122:	3301      	adds	r3, #1
 8006124:	b29b      	uxth	r3, r3
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4413      	add	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	701a      	strb	r2, [r3, #0]
  idx++;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	3301      	adds	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4413      	add	r3, r2
 8006146:	2203      	movs	r2, #3
 8006148:	701a      	strb	r2, [r3, #0]
  idx++;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	3301      	adds	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006150:	e013      	b.n	800617a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	4413      	add	r3, r2
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
    idx++;
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	3301      	adds	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4413      	add	r3, r2
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
    idx++;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	3301      	adds	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e7      	bne.n	8006152 <USBD_GetString+0x52>
 8006182:	e000      	b.n	8006186 <USBD_GetString+0x86>
    return;
 8006184:	bf00      	nop
  }
}
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800619c:	e005      	b.n	80061aa <USBD_GetLen+0x1e>
  {
    len++;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	3301      	adds	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f5      	bne.n	800619e <USBD_GetLen+0x12>
  }

  return len;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	2100      	movs	r1, #0
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fcf9 	bl	8006bde <USBD_LL_Transmit>

  return USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	2100      	movs	r1, #0
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fce8 	bl	8006bde <USBD_LL_Transmit>

  return USBD_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fcec 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	2100      	movs	r1, #0
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fcdb 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fca7 	bl	8006bde <USBD_LL_Transmit>

  return USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2205      	movs	r2, #5
 80062a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062aa:	2300      	movs	r3, #0
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fcb5 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062c4:	2200      	movs	r2, #0
 80062c6:	4912      	ldr	r1, [pc, #72]	@ (8006310 <MX_USB_DEVICE_Init+0x50>)
 80062c8:	4812      	ldr	r0, [pc, #72]	@ (8006314 <MX_USB_DEVICE_Init+0x54>)
 80062ca:	f7fe fd03 	bl	8004cd4 <USBD_Init>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062d4:	f7fa fadc 	bl	8000890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062d8:	490f      	ldr	r1, [pc, #60]	@ (8006318 <MX_USB_DEVICE_Init+0x58>)
 80062da:	480e      	ldr	r0, [pc, #56]	@ (8006314 <MX_USB_DEVICE_Init+0x54>)
 80062dc:	f7fe fd2a 	bl	8004d34 <USBD_RegisterClass>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062e6:	f7fa fad3 	bl	8000890 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062ea:	490c      	ldr	r1, [pc, #48]	@ (800631c <MX_USB_DEVICE_Init+0x5c>)
 80062ec:	4809      	ldr	r0, [pc, #36]	@ (8006314 <MX_USB_DEVICE_Init+0x54>)
 80062ee:	f7fe fc61 	bl	8004bb4 <USBD_CDC_RegisterInterface>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062f8:	f7fa faca 	bl	8000890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062fc:	4805      	ldr	r0, [pc, #20]	@ (8006314 <MX_USB_DEVICE_Init+0x54>)
 80062fe:	f7fe fd4f 	bl	8004da0 <USBD_Start>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006308:	f7fa fac2 	bl	8000890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800630c:	bf00      	nop
 800630e:	bd80      	pop	{r7, pc}
 8006310:	200000b0 	.word	0x200000b0
 8006314:	20000258 	.word	0x20000258
 8006318:	2000001c 	.word	0x2000001c
 800631c:	2000009c 	.word	0x2000009c

08006320 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006324:	2200      	movs	r2, #0
 8006326:	4905      	ldr	r1, [pc, #20]	@ (800633c <CDC_Init_FS+0x1c>)
 8006328:	4805      	ldr	r0, [pc, #20]	@ (8006340 <CDC_Init_FS+0x20>)
 800632a:	f7fe fc5d 	bl	8004be8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800632e:	4905      	ldr	r1, [pc, #20]	@ (8006344 <CDC_Init_FS+0x24>)
 8006330:	4803      	ldr	r0, [pc, #12]	@ (8006340 <CDC_Init_FS+0x20>)
 8006332:	f7fe fc7b 	bl	8004c2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006336:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006338:	4618      	mov	r0, r3
 800633a:	bd80      	pop	{r7, pc}
 800633c:	2000093c 	.word	0x2000093c
 8006340:	20000258 	.word	0x20000258
 8006344:	2000053c 	.word	0x2000053c

08006348 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800634c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800634e:	4618      	mov	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	6039      	str	r1, [r7, #0]
 8006362:	71fb      	strb	r3, [r7, #7]
 8006364:	4613      	mov	r3, r2
 8006366:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	2b23      	cmp	r3, #35	@ 0x23
 800636c:	f200 808c 	bhi.w	8006488 <CDC_Control_FS+0x130>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <CDC_Control_FS+0x20>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	08006489 	.word	0x08006489
 800637c:	08006489 	.word	0x08006489
 8006380:	08006489 	.word	0x08006489
 8006384:	08006489 	.word	0x08006489
 8006388:	08006489 	.word	0x08006489
 800638c:	08006489 	.word	0x08006489
 8006390:	08006489 	.word	0x08006489
 8006394:	08006489 	.word	0x08006489
 8006398:	08006489 	.word	0x08006489
 800639c:	08006489 	.word	0x08006489
 80063a0:	08006489 	.word	0x08006489
 80063a4:	08006489 	.word	0x08006489
 80063a8:	08006489 	.word	0x08006489
 80063ac:	08006489 	.word	0x08006489
 80063b0:	08006489 	.word	0x08006489
 80063b4:	08006489 	.word	0x08006489
 80063b8:	08006489 	.word	0x08006489
 80063bc:	08006489 	.word	0x08006489
 80063c0:	08006489 	.word	0x08006489
 80063c4:	08006489 	.word	0x08006489
 80063c8:	08006489 	.word	0x08006489
 80063cc:	08006489 	.word	0x08006489
 80063d0:	08006489 	.word	0x08006489
 80063d4:	08006489 	.word	0x08006489
 80063d8:	08006489 	.word	0x08006489
 80063dc:	08006489 	.word	0x08006489
 80063e0:	08006489 	.word	0x08006489
 80063e4:	08006489 	.word	0x08006489
 80063e8:	08006489 	.word	0x08006489
 80063ec:	08006489 	.word	0x08006489
 80063f0:	08006489 	.word	0x08006489
 80063f4:	08006489 	.word	0x08006489
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006443 	.word	0x08006443
 8006400:	08006489 	.word	0x08006489
 8006404:	08006489 	.word	0x08006489
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	4b22      	ldr	r3, [pc, #136]	@ (8006498 <CDC_Control_FS+0x140>)
 800640e:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785a      	ldrb	r2, [r3, #1]
 8006414:	4b20      	ldr	r3, [pc, #128]	@ (8006498 <CDC_Control_FS+0x140>)
 8006416:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	789a      	ldrb	r2, [r3, #2]
 800641c:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <CDC_Control_FS+0x140>)
 800641e:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	78da      	ldrb	r2, [r3, #3]
 8006424:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <CDC_Control_FS+0x140>)
 8006426:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	791a      	ldrb	r2, [r3, #4]
 800642c:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <CDC_Control_FS+0x140>)
 800642e:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	795a      	ldrb	r2, [r3, #5]
 8006434:	4b18      	ldr	r3, [pc, #96]	@ (8006498 <CDC_Control_FS+0x140>)
 8006436:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	799a      	ldrb	r2, [r3, #6]
 800643c:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <CDC_Control_FS+0x140>)
 800643e:	719a      	strb	r2, [r3, #6]

    break;
 8006440:	e023      	b.n	800648a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buffer[0];
 8006442:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <CDC_Control_FS+0x140>)
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a12      	ldr	r2, [pc, #72]	@ (8006498 <CDC_Control_FS+0x140>)
 8006450:	7852      	ldrb	r2, [r2, #1]
 8006452:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	3302      	adds	r3, #2
 8006458:	4a0f      	ldr	r2, [pc, #60]	@ (8006498 <CDC_Control_FS+0x140>)
 800645a:	7892      	ldrb	r2, [r2, #2]
 800645c:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	3303      	adds	r3, #3
 8006462:	4a0d      	ldr	r2, [pc, #52]	@ (8006498 <CDC_Control_FS+0x140>)
 8006464:	78d2      	ldrb	r2, [r2, #3]
 8006466:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	3304      	adds	r3, #4
 800646c:	4a0a      	ldr	r2, [pc, #40]	@ (8006498 <CDC_Control_FS+0x140>)
 800646e:	7912      	ldrb	r2, [r2, #4]
 8006470:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	3305      	adds	r3, #5
 8006476:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <CDC_Control_FS+0x140>)
 8006478:	7952      	ldrb	r2, [r2, #5]
 800647a:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	3306      	adds	r3, #6
 8006480:	4a05      	ldr	r2, [pc, #20]	@ (8006498 <CDC_Control_FS+0x140>)
 8006482:	7992      	ldrb	r2, [r2, #6]
 8006484:	701a      	strb	r2, [r3, #0]

    break;
 8006486:	e000      	b.n	800648a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006488:	bf00      	nop
  }

  return (USBD_OK);
 800648a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000534 	.word	0x20000534

0800649c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4809      	ldr	r0, [pc, #36]	@ (80064d0 <CDC_Receive_FS+0x34>)
 80064aa:	f7fe fbbf 	bl	8004c2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064ae:	4808      	ldr	r0, [pc, #32]	@ (80064d0 <CDC_Receive_FS+0x34>)
 80064b0:	f7fe fbda 	bl	8004c68 <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t) *Len;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	73fb      	strb	r3, [r7, #15]
  USBRxHandler(UserRxBufferFS,len);
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	4619      	mov	r1, r3
 80064be:	4805      	ldr	r0, [pc, #20]	@ (80064d4 <CDC_Receive_FS+0x38>)
 80064c0:	f7fa f800 	bl	80004c4 <USBRxHandler>
  return (USBD_OK);
 80064c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000258 	.word	0x20000258
 80064d4:	2000053c 	.word	0x2000053c

080064d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	4613      	mov	r3, r2
 80064e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80064ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2212      	movs	r2, #18
 800650c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800650e:	4b03      	ldr	r3, [pc, #12]	@ (800651c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	200000cc 	.word	0x200000cc

08006520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	6039      	str	r1, [r7, #0]
 800652a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2204      	movs	r2, #4
 8006530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	@ (8006540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	200000e0 	.word	0x200000e0

08006544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	6039      	str	r1, [r7, #0]
 800654e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4907      	ldr	r1, [pc, #28]	@ (8006578 <USBD_FS_ProductStrDescriptor+0x34>)
 800655a:	4808      	ldr	r0, [pc, #32]	@ (800657c <USBD_FS_ProductStrDescriptor+0x38>)
 800655c:	f7ff fdd0 	bl	8006100 <USBD_GetString>
 8006560:	e004      	b.n	800656c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4904      	ldr	r1, [pc, #16]	@ (8006578 <USBD_FS_ProductStrDescriptor+0x34>)
 8006566:	4805      	ldr	r0, [pc, #20]	@ (800657c <USBD_FS_ProductStrDescriptor+0x38>)
 8006568:	f7ff fdca 	bl	8006100 <USBD_GetString>
  }
  return USBD_StrDesc;
 800656c:	4b02      	ldr	r3, [pc, #8]	@ (8006578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000d3c 	.word	0x20000d3c
 800657c:	08006d9c 	.word	0x08006d9c

08006580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	4904      	ldr	r1, [pc, #16]	@ (80065a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006590:	4804      	ldr	r0, [pc, #16]	@ (80065a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006592:	f7ff fdb5 	bl	8006100 <USBD_GetString>
  return USBD_StrDesc;
 8006596:	4b02      	ldr	r3, [pc, #8]	@ (80065a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000d3c 	.word	0x20000d3c
 80065a4:	08006db4 	.word	0x08006db4

080065a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	221a      	movs	r2, #26
 80065b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065ba:	f000 f843 	bl	8006644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065be:	4b02      	ldr	r3, [pc, #8]	@ (80065c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200000e4 	.word	0x200000e4

080065cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d105      	bne.n	80065ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4907      	ldr	r1, [pc, #28]	@ (8006600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065e2:	4808      	ldr	r0, [pc, #32]	@ (8006604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065e4:	f7ff fd8c 	bl	8006100 <USBD_GetString>
 80065e8:	e004      	b.n	80065f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4904      	ldr	r1, [pc, #16]	@ (8006600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065ee:	4805      	ldr	r0, [pc, #20]	@ (8006604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065f0:	f7ff fd86 	bl	8006100 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065f4:	4b02      	ldr	r3, [pc, #8]	@ (8006600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000d3c 	.word	0x20000d3c
 8006604:	08006dc8 	.word	0x08006dc8

08006608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	6039      	str	r1, [r7, #0]
 8006612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	4907      	ldr	r1, [pc, #28]	@ (800663c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800661e:	4808      	ldr	r0, [pc, #32]	@ (8006640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006620:	f7ff fd6e 	bl	8006100 <USBD_GetString>
 8006624:	e004      	b.n	8006630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4904      	ldr	r1, [pc, #16]	@ (800663c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800662a:	4805      	ldr	r0, [pc, #20]	@ (8006640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800662c:	f7ff fd68 	bl	8006100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006630:	4b02      	ldr	r3, [pc, #8]	@ (800663c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000d3c 	.word	0x20000d3c
 8006640:	08006dd4 	.word	0x08006dd4

08006644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4413      	add	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006658:	2208      	movs	r2, #8
 800665a:	4906      	ldr	r1, [pc, #24]	@ (8006674 <Get_SerialNum+0x30>)
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f80d 	bl	800667c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006662:	2204      	movs	r2, #4
 8006664:	4904      	ldr	r1, [pc, #16]	@ (8006678 <Get_SerialNum+0x34>)
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f808 	bl	800667c <IntToUnicode>
  }
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200000e6 	.word	0x200000e6
 8006678:	200000f6 	.word	0x200000f6

0800667c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
 8006692:	e027      	b.n	80066e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	0f1b      	lsrs	r3, r3, #28
 8006698:	2b09      	cmp	r3, #9
 800669a:	d80b      	bhi.n	80066b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	0f1b      	lsrs	r3, r3, #28
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	4619      	mov	r1, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	440b      	add	r3, r1
 80066ac:	3230      	adds	r2, #48	@ 0x30
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e00a      	b.n	80066ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	0f1b      	lsrs	r3, r3, #28
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4619      	mov	r1, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	440b      	add	r3, r1
 80066c4:	3237      	adds	r2, #55	@ 0x37
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	3301      	adds	r3, #1
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4413      	add	r3, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	3301      	adds	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
 80066e4:	7dfa      	ldrb	r2, [r7, #23]
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3d3      	bcc.n	8006694 <IntToUnicode+0x18>
  }
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006704:	f107 0314 	add.w	r3, r7, #20
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800671c:	d13a      	bne.n	8006794 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	4b1e      	ldr	r3, [pc, #120]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	6313      	str	r3, [r2, #48]	@ 0x30
 800672e:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800673a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800673e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006740:	2302      	movs	r3, #2
 8006742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006748:	2303      	movs	r3, #3
 800674a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800674c:	230a      	movs	r3, #10
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006750:	f107 0314 	add.w	r3, r7, #20
 8006754:	4619      	mov	r1, r3
 8006756:	4812      	ldr	r0, [pc, #72]	@ (80067a0 <HAL_PCD_MspInit+0xa4>)
 8006758:	f7fa fae6 	bl	8000d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800675c:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 800675e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006760:	4a0e      	ldr	r2, [pc, #56]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 8006762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006766:	6353      	str	r3, [r2, #52]	@ 0x34
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 800676e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006770:	4a0a      	ldr	r2, [pc, #40]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 8006772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006776:	6453      	str	r3, [r2, #68]	@ 0x44
 8006778:	4b08      	ldr	r3, [pc, #32]	@ (800679c <HAL_PCD_MspInit+0xa0>)
 800677a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	2043      	movs	r0, #67	@ 0x43
 800678a:	f7fa fa96 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800678e:	2043      	movs	r0, #67	@ 0x43
 8006790:	f7fa faaf 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006794:	bf00      	nop
 8006796:	3728      	adds	r7, #40	@ 0x28
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40023800 	.word	0x40023800
 80067a0:	40020000 	.word	0x40020000

080067a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fb3d 	bl	8004e3a <USBD_LL_SetupStage>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fe fb77 	bl	8004ee4 <USBD_LL_DataOutStage>
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	3320      	adds	r3, #32
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	4619      	mov	r1, r3
 8006826:	f7fe fc10 	bl	800504a <USBD_LL_DataInStage>
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fd4a 	bl	80052da <USBD_LL_SOF>
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	79db      	ldrb	r3, [r3, #7]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d001      	beq.n	8006866 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006862:	f7fa f815 	bl	8000890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fcee 	bl	8005252 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fc96 	bl	80051ae <USBD_LL_Reset>
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe fce9 	bl	8005272 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7adb      	ldrb	r3, [r3, #11]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068c0:	4b04      	ldr	r3, [pc, #16]	@ (80068d4 <HAL_PCD_SuspendCallback+0x48>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	4a03      	ldr	r2, [pc, #12]	@ (80068d4 <HAL_PCD_SuspendCallback+0x48>)
 80068c6:	f043 0306 	orr.w	r3, r3, #6
 80068ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fcdf 	bl	80052aa <USBD_LL_Resume>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fd37 	bl	800537e <USBD_LL_IsoOUTIncomplete>
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fcf3 	bl	800531a <USBD_LL_IsoINIncomplete>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fd49 	bl	80053e2 <USBD_LL_DevConnected>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fd46 	bl	80053f8 <USBD_LL_DevDisconnected>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d13c      	bne.n	80069fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006984:	4a20      	ldr	r2, [pc, #128]	@ (8006a08 <USBD_LL_Init+0x94>)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a08 <USBD_LL_Init+0x94>)
 8006990:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006994:	4b1c      	ldr	r3, [pc, #112]	@ (8006a08 <USBD_LL_Init+0x94>)
 8006996:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800699a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <USBD_LL_Init+0x94>)
 800699e:	2204      	movs	r2, #4
 80069a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069a2:	4b19      	ldr	r3, [pc, #100]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069a4:	2202      	movs	r2, #2
 80069a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069a8:	4b17      	ldr	r3, [pc, #92]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069ae:	4b16      	ldr	r3, [pc, #88]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069b0:	2202      	movs	r2, #2
 80069b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069b4:	4b14      	ldr	r3, [pc, #80]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069ba:	4b13      	ldr	r3, [pc, #76]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069bc:	2200      	movs	r2, #0
 80069be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069c0:	4b11      	ldr	r3, [pc, #68]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069c6:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80069cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80069d2:	480d      	ldr	r0, [pc, #52]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069d4:	f7fa fb2c 	bl	8001030 <HAL_PCD_Init>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80069de:	f7f9 ff57 	bl	8000890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80069e2:	2180      	movs	r1, #128	@ 0x80
 80069e4:	4808      	ldr	r0, [pc, #32]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069e6:	f7fb fd56 	bl	8002496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80069ea:	2240      	movs	r2, #64	@ 0x40
 80069ec:	2100      	movs	r1, #0
 80069ee:	4806      	ldr	r0, [pc, #24]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069f0:	f7fb fd0a 	bl	8002408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80069f4:	2280      	movs	r2, #128	@ 0x80
 80069f6:	2101      	movs	r1, #1
 80069f8:	4803      	ldr	r0, [pc, #12]	@ (8006a08 <USBD_LL_Init+0x94>)
 80069fa:	f7fb fd05 	bl	8002408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000f3c 	.word	0x20000f3c

08006a0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fa fc13 	bl	800124e <HAL_PCD_Start>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f942 	bl	8006cb8 <USBD_Get_USB_Status>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	70fb      	strb	r3, [r7, #3]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70bb      	strb	r3, [r7, #2]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006a6a:	78bb      	ldrb	r3, [r7, #2]
 8006a6c:	883a      	ldrh	r2, [r7, #0]
 8006a6e:	78f9      	ldrb	r1, [r7, #3]
 8006a70:	f7fb f8e7 	bl	8001c42 <HAL_PCD_EP_Open>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f91c 	bl	8006cb8 <USBD_Get_USB_Status>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fb f930 	bl	8001d12 <HAL_PCD_EP_Close>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 f8fd 	bl	8006cb8 <USBD_Get_USB_Status>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fb f9e8 	bl	8001ec0 <HAL_PCD_EP_SetStall>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f8de 	bl	8006cb8 <USBD_Get_USB_Status>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	4611      	mov	r1, r2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fb fa2c 	bl	8001f86 <HAL_PCD_EP_ClrStall>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 f8bf 	bl	8006cb8 <USBD_Get_USB_Status>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da0b      	bge.n	8006b7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3316      	adds	r3, #22
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	e00b      	b.n	8006b94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006b92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fb f81b 	bl	8001bfa <HAL_PCD_SetAddress>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f874 	bl	8006cb8 <USBD_Get_USB_Status>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	460b      	mov	r3, r1
 8006bec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006bfc:	7af9      	ldrb	r1, [r7, #11]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f7fb f923 	bl	8001e4c <HAL_PCD_EP_Transmit>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f853 	bl	8006cb8 <USBD_Get_USB_Status>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c3e:	7af9      	ldrb	r1, [r7, #11]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	f7fb f8af 	bl	8001da6 <HAL_PCD_EP_Receive>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f832 	bl	8006cb8 <USBD_Get_USB_Status>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c58:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fb f8cf 	bl	8001e1c <HAL_PCD_EP_GetRxCount>
 8006c7e:	4603      	mov	r3, r0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c90:	4b03      	ldr	r3, [pc, #12]	@ (8006ca0 <USBD_static_malloc+0x18>)
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20001420 	.word	0x20001420

08006ca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d817      	bhi.n	8006cfc <USBD_Get_USB_Status+0x44>
 8006ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd4 <USBD_Get_USB_Status+0x1c>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006ceb 	.word	0x08006ceb
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006cf7 	.word	0x08006cf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce8:	e00b      	b.n	8006d02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
    break;
 8006cee:	e008      	b.n	8006d02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf4:	e005      	b.n	8006d02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfa:	e002      	b.n	8006d02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006d00:	bf00      	nop
  }
  return usb_status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <__libc_init_array>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4d0d      	ldr	r5, [pc, #52]	@ (8006d58 <__libc_init_array+0x38>)
 8006d24:	4c0d      	ldr	r4, [pc, #52]	@ (8006d5c <__libc_init_array+0x3c>)
 8006d26:	1b64      	subs	r4, r4, r5
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	42a6      	cmp	r6, r4
 8006d2e:	d109      	bne.n	8006d44 <__libc_init_array+0x24>
 8006d30:	4d0b      	ldr	r5, [pc, #44]	@ (8006d60 <__libc_init_array+0x40>)
 8006d32:	4c0c      	ldr	r4, [pc, #48]	@ (8006d64 <__libc_init_array+0x44>)
 8006d34:	f000 f826 	bl	8006d84 <_init>
 8006d38:	1b64      	subs	r4, r4, r5
 8006d3a:	10a4      	asrs	r4, r4, #2
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	42a6      	cmp	r6, r4
 8006d40:	d105      	bne.n	8006d4e <__libc_init_array+0x2e>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d48:	4798      	blx	r3
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7ee      	b.n	8006d2c <__libc_init_array+0xc>
 8006d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d52:	4798      	blx	r3
 8006d54:	3601      	adds	r6, #1
 8006d56:	e7f2      	b.n	8006d3e <__libc_init_array+0x1e>
 8006d58:	08006dfc 	.word	0x08006dfc
 8006d5c:	08006dfc 	.word	0x08006dfc
 8006d60:	08006dfc 	.word	0x08006dfc
 8006d64:	08006e00 	.word	0x08006e00

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <_init>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr

08006d90 <_fini>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr
