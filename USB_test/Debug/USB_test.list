
USB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b1c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006cb0  08006cb0  00007cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  00008100  2**0
                  CONTENTS
  4 .ARM          00000008  08006d08  08006d08  00007d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d10  08006d10  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00007d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08006d18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001510  20000100  08006e18  00008100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  08006e18  00008610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3e4  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8c  00000000  00000000  00015514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00017fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085a  00000000  00000000  00018af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a37  00000000  00000000  00019352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5a1  00000000  00000000  00030d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008628b  00000000  00000000  0004032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c65b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d1c  00000000  00000000  000c65f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c9314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006c98 	.word	0x08006c98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	08006c98 	.word	0x08006c98

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <USBRxHandler>:
uint8_t Buffer_trim_size(uint8_t *buf);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USBRxHandler(uint8_t* buf,uint16_t len){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	switch(set)
 80004d0:	4b30      	ldr	r3, [pc, #192]	@ (8000594 <USBRxHandler+0xd0>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <USBRxHandler+0x1a>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d031      	beq.n	8000540 <USBRxHandler+0x7c>
			Buffer_operation(Buffer3,Buffer2,Buffer1);
			size=Buffer_trim_size(Buffer3);
			set=0;
			return;
	}
	return;
 80004dc:	e056      	b.n	800058c <USBRxHandler+0xc8>
			memset(Buffer1,0,64);
 80004de:	2240      	movs	r2, #64	@ 0x40
 80004e0:	2100      	movs	r1, #0
 80004e2:	482d      	ldr	r0, [pc, #180]	@ (8000598 <USBRxHandler+0xd4>)
 80004e4:	f006 fb9e 	bl	8006c24 <memset>
			memset(Buffer2,0,64);
 80004e8:	2240      	movs	r2, #64	@ 0x40
 80004ea:	2100      	movs	r1, #0
 80004ec:	482b      	ldr	r0, [pc, #172]	@ (800059c <USBRxHandler+0xd8>)
 80004ee:	f006 fb99 	bl	8006c24 <memset>
			memcpy(Buffer1,buf,len);
 80004f2:	887b      	ldrh	r3, [r7, #2]
 80004f4:	461a      	mov	r2, r3
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	4827      	ldr	r0, [pc, #156]	@ (8000598 <USBRxHandler+0xd4>)
 80004fa:	f006 fbbf 	bl	8006c7c <memcpy>
			memset(buf,0,len);
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 fb8d 	bl	8006c24 <memset>
			if(Buffer1[3]<=53)
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <USBRxHandler+0xd4>)
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	2b35      	cmp	r3, #53	@ 0x35
 8000510:	d80f      	bhi.n	8000532 <USBRxHandler+0x6e>
				Buffer_operation(Buffer3,Buffer2,Buffer1);
 8000512:	4a21      	ldr	r2, [pc, #132]	@ (8000598 <USBRxHandler+0xd4>)
 8000514:	4921      	ldr	r1, [pc, #132]	@ (800059c <USBRxHandler+0xd8>)
 8000516:	4822      	ldr	r0, [pc, #136]	@ (80005a0 <USBRxHandler+0xdc>)
 8000518:	f000 f846 	bl	80005a8 <Buffer_operation>
				size=Buffer_trim_size(Buffer3);
 800051c:	4820      	ldr	r0, [pc, #128]	@ (80005a0 <USBRxHandler+0xdc>)
 800051e:	f000 f875 	bl	800060c <Buffer_trim_size>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <USBRxHandler+0xe0>)
 8000528:	701a      	strb	r2, [r3, #0]
				set=0;
 800052a:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <USBRxHandler+0xd0>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
				return;
 8000530:	e02c      	b.n	800058c <USBRxHandler+0xc8>
			set++;
 8000532:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <USBRxHandler+0xd0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <USBRxHandler+0xd0>)
 800053c:	701a      	strb	r2, [r3, #0]
			return;
 800053e:	e025      	b.n	800058c <USBRxHandler+0xc8>
			memset(Buffer2,0,64);
 8000540:	2240      	movs	r2, #64	@ 0x40
 8000542:	2100      	movs	r1, #0
 8000544:	4815      	ldr	r0, [pc, #84]	@ (800059c <USBRxHandler+0xd8>)
 8000546:	f006 fb6d 	bl	8006c24 <memset>
			memcpy(Buffer2,buf,len);
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4812      	ldr	r0, [pc, #72]	@ (800059c <USBRxHandler+0xd8>)
 8000552:	f006 fb93 	bl	8006c7c <memcpy>
			memset(buf,0,len);
 8000556:	887b      	ldrh	r3, [r7, #2]
 8000558:	461a      	mov	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f006 fb61 	bl	8006c24 <memset>
			memset(Buffer3,0,64);
 8000562:	2240      	movs	r2, #64	@ 0x40
 8000564:	2100      	movs	r1, #0
 8000566:	480e      	ldr	r0, [pc, #56]	@ (80005a0 <USBRxHandler+0xdc>)
 8000568:	f006 fb5c 	bl	8006c24 <memset>
			Buffer_operation(Buffer3,Buffer2,Buffer1);
 800056c:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <USBRxHandler+0xd4>)
 800056e:	490b      	ldr	r1, [pc, #44]	@ (800059c <USBRxHandler+0xd8>)
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <USBRxHandler+0xdc>)
 8000572:	f000 f819 	bl	80005a8 <Buffer_operation>
			size=Buffer_trim_size(Buffer3);
 8000576:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <USBRxHandler+0xdc>)
 8000578:	f000 f848 	bl	800060c <Buffer_trim_size>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <USBRxHandler+0xe0>)
 8000582:	701a      	strb	r2, [r3, #0]
			set=0;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <USBRxHandler+0xd0>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
			return;
 800058a:	bf00      	nop
}
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000021c 	.word	0x2000021c
 8000598:	2000011c 	.word	0x2000011c
 800059c:	2000015c 	.word	0x2000015c
 80005a0:	2000019c 	.word	0x2000019c
 80005a4:	2000021d 	.word	0x2000021d

080005a8 <Buffer_operation>:
void Buffer_operation(uint8_t *buf3,uint8_t *buf2,uint8_t *buf1)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	for(uint8_t i=0;i<64;i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	75fb      	strb	r3, [r7, #23]
 80005b8:	e00a      	b.n	80005d0 <Buffer_operation+0x28>
	{
		buf3[i]=buf1[i];
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	441a      	add	r2, r3
 80005c0:	7dfb      	ldrb	r3, [r7, #23]
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	440b      	add	r3, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
 80005cc:	3301      	adds	r3, #1
 80005ce:	75fb      	strb	r3, [r7, #23]
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80005d4:	d9f1      	bls.n	80005ba <Buffer_operation+0x12>
	}
	for(uint8_t i=0;i<64;i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	75bb      	strb	r3, [r7, #22]
 80005da:	e00c      	b.n	80005f6 <Buffer_operation+0x4e>
	{
		buf3[64+i]=buf2[i];
 80005dc:	7dbb      	ldrb	r3, [r7, #22]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	441a      	add	r2, r3
 80005e2:	7dbb      	ldrb	r3, [r7, #22]
 80005e4:	3340      	adds	r3, #64	@ 0x40
 80005e6:	4619      	mov	r1, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	440b      	add	r3, r1
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<64;i++)
 80005f0:	7dbb      	ldrb	r3, [r7, #22]
 80005f2:	3301      	adds	r3, #1
 80005f4:	75bb      	strb	r3, [r7, #22]
 80005f6:	7dbb      	ldrb	r3, [r7, #22]
 80005f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005fa:	d9ef      	bls.n	80005dc <Buffer_operation+0x34>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <Buffer_trim_size>:
uint8_t Buffer_trim_size(uint8_t *buf)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for(j=14;j<128;j++)
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <Buffer_trim_size+0x50>)
 8000616:	220e      	movs	r2, #14
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	e00d      	b.n	8000638 <Buffer_trim_size+0x2c>
	{
		if (buf[j]=='.')
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <Buffer_trim_size+0x50>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b2e      	cmp	r3, #46	@ 0x2e
 800062a:	d00b      	beq.n	8000644 <Buffer_trim_size+0x38>
	for(j=14;j<128;j++)
 800062c:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <Buffer_trim_size+0x50>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <Buffer_trim_size+0x50>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <Buffer_trim_size+0x50>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b25b      	sxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	daec      	bge.n	800061c <Buffer_trim_size+0x10>
 8000642:	e000      	b.n	8000646 <Buffer_trim_size+0x3a>
		{
			break;
 8000644:	bf00      	nop
		}
	}
	return j-1;
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <Buffer_trim_size+0x50>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	3b01      	subs	r3, #1
 800064c:	b2db      	uxtb	r3, r3
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 f942 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f808 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f872 	bl	8000754 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000670:	f005 fdb0 	bl	80061d4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000674:	200a      	movs	r0, #10
 8000676:	f000 f9ab 	bl	80009d0 <HAL_Delay>
 800067a:	e7fb      	b.n	8000674 <main+0x14>

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 faca 	bl	8006c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	@ (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006f0:	2319      	movs	r3, #25
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fe6c 	bl	80023e4 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f847 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f002 f8ce 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 f831 	bl	80007a4 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f89b 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <OTG_FS_IRQHandler+0x10>)
 8000866:	f000 fcb1 	bl	80011cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000f0c 	.word	0x20000f0c

08000874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	@ (80008e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f006 f9b5 	bl	8006c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fec9 	bl	8000660 <main>
  bx  lr    
 80008ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80008dc:	08006d18 	.word	0x08006d18
  ldr r2, =_sbss
 80008e0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80008e4:	20001610 	.word	0x20001610

080008e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <HAL_Init+0x40>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <HAL_Init+0x40>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_Init+0x40>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f94f 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff ff46 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023c00 	.word	0x40023c00

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f967 	bl	8000c22 <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f92f 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	@ (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000004 	.word	0x20000004
 8000988:	2000000c 	.word	0x2000000c
 800098c:	20000008 	.word	0x20000008

08000990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	20000220 	.word	0x20000220

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000220 	.word	0x20000220

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff ffee 	bl	80009b8 <HAL_GetTick>
 80009dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4413      	add	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f6:	bf00      	nop
 80009f8:	f7ff ffde 	bl	80009b8 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000000c 	.word	0x2000000c

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	@ (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	@ (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	@ 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff8e 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff29 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff3e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff8e 	bl	8000b0c <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff31 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffa2 	bl	8000b74 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	e159      	b.n	8000f0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 8148 	bne.w	8000f06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d130      	bne.n	8000cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d017      	beq.n	8000d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d123      	bne.n	8000d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0203 	and.w	r2, r3, #3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a2 	beq.w	8000f06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a56      	ldr	r2, [pc, #344]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b54      	ldr	r3, [pc, #336]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a52      	ldr	r2, [pc, #328]	@ (8000f28 <HAL_GPIO_Init+0x2ec>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a49      	ldr	r2, [pc, #292]	@ (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x202>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a48      	ldr	r2, [pc, #288]	@ (8000f30 <HAL_GPIO_Init+0x2f4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x1fe>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a47      	ldr	r2, [pc, #284]	@ (8000f34 <HAL_GPIO_Init+0x2f8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x1fa>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a46      	ldr	r2, [pc, #280]	@ (8000f38 <HAL_GPIO_Init+0x2fc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x1f6>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <HAL_GPIO_Init+0x300>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x1f2>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	@ (8000f28 <HAL_GPIO_Init+0x2ec>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a24      	ldr	r2, [pc, #144]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f00:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	f67f aea2 	bls.w	8000c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e101      	b.n	800115a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d106      	bne.n	8000f76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f005 fb4d 	bl	8006610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f84:	d102      	bne.n	8000f8c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 ff6e 	bl	8002e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7c1a      	ldrb	r2, [r3, #16]
 8000f9e:	f88d 2000 	strb.w	r2, [sp]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa6:	f001 fe4d 	bl	8002c44 <USB_CoreInit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0ce      	b.n	800115a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 ff66 	bl	8002e94 <USB_SetCurrentMode>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0bf      	b.n	800115a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e04a      	b.n	8001076 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3315      	adds	r3, #21
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3314      	adds	r3, #20
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	b298      	uxth	r0, r3
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	332e      	adds	r3, #46	@ 0x2e
 800101c:	4602      	mov	r2, r0
 800101e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3318      	adds	r3, #24
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	331c      	adds	r3, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3320      	adds	r3, #32
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3324      	adds	r3, #36	@ 0x24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3af      	bcc.n	8000fe0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e044      	b.n	8001110 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	429a      	cmp	r2, r3
 8001118:	d3b5      	bcc.n	8001086 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7c1a      	ldrb	r2, [r3, #16]
 8001122:	f88d 2000 	strb.w	r2, [sp]
 8001126:	3304      	adds	r3, #4
 8001128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112a:	f001 feff 	bl	8002f2c <USB_DevInit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00c      	b.n	800115a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 ff43 	bl	8003fde <USB_DevDisconnect>

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_PCD_Start+0x1c>
 800117a:	2302      	movs	r3, #2
 800117c:	e022      	b.n	80011c4 <HAL_PCD_Start+0x62>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fe50 	bl	8002e50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fef1 	bl	8003f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b08d      	sub	sp, #52	@ 0x34
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 ffaf 	bl	8004146 <USB_GetMode>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 848c 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 ff13 	bl	8004020 <USB_ReadInterrupts>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8482 	beq.w	8001b06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 ff00 	bl	8004020 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f002 0202 	and.w	r2, r2, #2
 8001238:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 feee 	bl	8004020 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b10      	cmp	r3, #16
 800124c:	d161      	bne.n	8001312 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 020f 	and.w	r2, r3, #15
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0c5b      	lsrs	r3, r3, #17
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	2b02      	cmp	r3, #2
 8001288:	d124      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d035      	beq.n	8001302 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f002 fd25 	bl	8003cf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	441a      	add	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	e016      	b.n	8001302 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0c5b      	lsrs	r3, r3, #17
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d110      	bne.n	8001302 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6a38      	ldr	r0, [r7, #32]
 80012ec:	f002 fd04 	bl	8003cf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0210 	orr.w	r2, r2, #16
 8001310:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fe82 	bl	8004020 <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001322:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001326:	f040 80a7 	bne.w	8001478 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fe87 	bl	8004046 <USB_ReadDevAllOutEpInterrupt>
 8001338:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800133a:	e099      	b.n	8001470 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 808e 	beq.w	8001464 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f002 feab 	bl	80040ae <USB_ReadDevOutEPInterrupt>
 8001358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00c      	beq.n	800137e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	015a      	lsls	r2, r3, #5
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001370:	461a      	mov	r2, r3
 8001372:	2301      	movs	r3, #1
 8001374:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fea1 	bl	80020c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	015a      	lsls	r2, r3, #5
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001394:	461a      	mov	r2, r3
 8001396:	2308      	movs	r3, #8
 8001398:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800139a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 ff77 	bl	8002290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	015a      	lsls	r2, r3, #5
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013b8:	461a      	mov	r2, r3
 80013ba:	2310      	movs	r3, #16
 80013bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d030      	beq.n	800142a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d0:	2b80      	cmp	r3, #128	@ 0x80
 80013d2:	d109      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	78db      	ldrb	r3, [r3, #3]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2200      	movs	r2, #0
 800140a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f005 f9f8 	bl	8006808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001424:	461a      	mov	r2, r3
 8001426:	2302      	movs	r3, #2
 8001428:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	2320      	movs	r3, #32
 8001444:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800145c:	461a      	mov	r2, r3
 800145e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001462:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	3301      	adds	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f af62 	bne.w	800133c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fdcf 	bl	8004020 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800148c:	f040 80db 	bne.w	8001646 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fdf0 	bl	800407a <USB_ReadDevAllInEpInterrupt>
 800149a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014a0:	e0cd      	b.n	800163e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80c2 	beq.w	8001632 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fe16 	bl	80040ea <USB_ReadDevInEPInterrupt>
 80014be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d057      	beq.n	800157a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	2201      	movs	r2, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69f9      	ldr	r1, [r7, #28]
 80014e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80014ea:	4013      	ands	r3, r2
 80014ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014fa:	461a      	mov	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d132      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3320      	adds	r3, #32
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	331c      	adds	r3, #28
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4419      	add	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	3320      	adds	r3, #32
 800153e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d113      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3324      	adds	r3, #36	@ 0x24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001566:	461a      	mov	r2, r3
 8001568:	2101      	movs	r1, #1
 800156a:	f002 fe1d 	bl	80041a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f005 f8cc 	bl	8006712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001590:	461a      	mov	r2, r3
 8001592:	2308      	movs	r3, #8
 8001594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2310      	movs	r3, #16
 80015b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015da:	6a38      	ldr	r0, [r7, #32]
 80015dc:	f001 fe0a 	bl	80031f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	3310      	adds	r3, #16
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f005 f90f 	bl	800682c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	2302      	movs	r3, #2
 800161e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800162a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fcbb 	bl	8001fa8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f af2e 	bne.w	80014a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fce8 	bl	8004020 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800165a:	d122      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fea1 	bl	80023cc <HAL_PCDEx_LPM_Callback>
 800168a:	e002      	b.n	8001692 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f005 f8ad 	bl	80067ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 fcba 	bl	8004020 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016b6:	d112      	bne.n	80016de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 f869 	bl	80067a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fc9c 	bl	8004020 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f2:	f040 80b7 	bne.w	8001864 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2110      	movs	r1, #16
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fd6f 	bl	80031f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171a:	e046      	b.n	80017aa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800172e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001740:	0151      	lsls	r1, r2, #5
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	440a      	add	r2, r1
 8001746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800174a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800174e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800175c:	461a      	mov	r2, r3
 800175e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001762:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001766:	015a      	lsls	r2, r3, #5
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001774:	0151      	lsls	r1, r2, #5
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	440a      	add	r2, r1
 800177a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800177e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001794:	0151      	lsls	r1, r2, #5
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	440a      	add	r2, r1
 800179a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800179e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a6:	3301      	adds	r3, #1
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d3b2      	bcc.n	800171c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80017c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7bdb      	ldrb	r3, [r3, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017e2:	f043 030b 	orr.w	r3, r3, #11
 80017e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f8:	f043 030b 	orr.w	r3, r3, #11
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	e015      	b.n	800182c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800180e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001812:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001816:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001826:	f043 030b 	orr.w	r3, r3, #11
 800182a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800183a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800183e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800184e:	461a      	mov	r2, r3
 8001850:	f002 fcaa 	bl	80041a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fbd9 	bl	8004020 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001878:	d123      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fc6f 	bl	8004162 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fd2c 	bl	80032e6 <USB_GetDevSpeed>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	f001 f9c7 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 800189e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a4:	461a      	mov	r2, r3
 80018a6:	4620      	mov	r0, r4
 80018a8:	f001 fa30 	bl	8002d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f004 ff58 	bl	8006762 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fbaa 	bl	8004020 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d10a      	bne.n	80018ec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f004 ff35 	bl	8006746 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f002 0208 	and.w	r2, r2, #8
 80018ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fb95 	bl	8004020 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fc:	2b80      	cmp	r3, #128	@ 0x80
 80018fe:	d123      	bne.n	8001948 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001910:	e014      	b.n	800193c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fb08 	bl	8001f46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	461a      	mov	r2, r3
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	4293      	cmp	r3, r2
 8001946:	d3e4      	bcc.n	8001912 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f002 fb67 	bl	8004020 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001958:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800195c:	d13c      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
 8001962:	e02b      	b.n	80019bc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3318      	adds	r3, #24
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d115      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800198a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800198c:	2b00      	cmp	r3, #0
 800198e:	da12      	bge.n	80019b6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3317      	adds	r3, #23
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fac8 	bl	8001f46 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d3cd      	bcc.n	8001964 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fb1f 	bl	8004020 <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019ec:	d156      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f2:	e045      	b.n	8001a80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d12e      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da2b      	bge.n	8001a7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d121      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a76:	6053      	str	r3, [r2, #4]
            break;
 8001a78:	e008      	b.n	8001a8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d3b3      	bcc.n	80019f4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fabd 	bl	8004020 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f004 fecc 	bl	8006850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 faa7 	bl	8004020 <USB_ReadInterrupts>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d115      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f004 febc 	bl	800686c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e000      	b.n	8001b08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b06:	bf00      	nop
    }
  }
}
 8001b08:	3734      	adds	r7, #52	@ 0x34
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}

08001b0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_SetAddress+0x1a>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e012      	b.n	8001b4e <HAL_PCD_SetAddress+0x40>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fa06 	bl	8003f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	4608      	mov	r0, r1
 8001b60:	4611      	mov	r1, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	70fb      	strb	r3, [r7, #3]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	803b      	strh	r3, [r7, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da0f      	bge.n	8001b9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 020f 	and.w	r2, r3, #15
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3310      	adds	r3, #16
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	3304      	adds	r3, #4
 8001b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e00f      	b.n	8001bbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bc8:	883a      	ldrh	r2, [r7, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	78ba      	ldrb	r2, [r7, #2]
 8001bd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001be6:	78bb      	ldrb	r3, [r7, #2]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d102      	bne.n	8001bf2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_PCD_EP_Open+0xaa>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e00e      	b.n	8001c1e <HAL_PCD_EP_Open+0xc8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fb8e 	bl	8003330 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da0f      	bge.n	8001c5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3310      	adds	r3, #16
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3304      	adds	r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	705a      	strb	r2, [r3, #1]
 8001c58:	e00f      	b.n	8001c7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 020f 	and.w	r2, r3, #15
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_PCD_EP_Close+0x6e>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e00e      	b.n	8001cb2 <HAL_PCD_EP_Close+0x8c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fbcc 	bl	8003440 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	7afb      	ldrb	r3, [r7, #11]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	799b      	ldrb	r3, [r3, #6]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	799b      	ldrb	r3, [r3, #6]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6979      	ldr	r1, [r7, #20]
 8001d22:	f001 fc69 	bl	80035f8 <USB_EPStartXfer>

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3310      	adds	r3, #16
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	799b      	ldrb	r3, [r3, #6]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	799b      	ldrb	r3, [r3, #6]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	f001 fc17 	bl	80035f8 <USB_EPStartXfer>

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	7912      	ldrb	r2, [r2, #4]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e04f      	b.n	8001e92 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da0f      	bge.n	8001e1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 020f 	and.w	r2, r3, #15
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	3310      	adds	r3, #16
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3304      	adds	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	705a      	strb	r2, [r3, #1]
 8001e18:	e00d      	b.n	8001e36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_EP_SetStall+0x82>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e01d      	b.n	8001e92 <HAL_PCD_EP_SetStall+0xbe>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 ff9f 	bl	8003da8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7999      	ldrb	r1, [r3, #6]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e82:	461a      	mov	r2, r3
 8001e84:	f002 f990 	bl	80041a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	7912      	ldrb	r2, [r2, #4]
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e042      	b.n	8001f3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da0f      	bge.n	8001ee0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 020f 	and.w	r2, r3, #15
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3310      	adds	r3, #16
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	705a      	strb	r2, [r3, #1]
 8001ede:	e00f      	b.n	8001f00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_EP_ClrStall+0x86>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e00e      	b.n	8001f3e <HAL_PCD_EP_ClrStall+0xa4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 ffa8 	bl	8003e84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da0c      	bge.n	8001f74 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	3310      	adds	r3, #16
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e00c      	b.n	8001f8e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fdc7 	bl	8003b28 <USB_EPStopXfer>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d901      	bls.n	8001fe0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e06b      	b.n	80020b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d902      	bls.n	8001ffc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3303      	adds	r3, #3
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002004:	e02a      	b.n	800205c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	d902      	bls.n	8002022 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3303      	adds	r3, #3
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f001 fe1c 	bl	8003c7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	441a      	add	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	441a      	add	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	429a      	cmp	r2, r3
 8002070:	d809      	bhi.n	8002086 <PCD_WriteEmptyTxFifo+0xde>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207a:	429a      	cmp	r2, r3
 800207c:	d203      	bcs.n	8002086 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1bf      	bne.n	8002006 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	429a      	cmp	r2, r3
 8002090:	d811      	bhi.n	80020b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	333c      	adds	r3, #60	@ 0x3c
 80020d8:	3304      	adds	r3, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	799b      	ldrb	r3, [r3, #6]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d17b      	bne.n	80021ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a61      	ldr	r2, [pc, #388]	@ (8002288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	f240 80b9 	bls.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b3 	beq.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002122:	461a      	mov	r2, r3
 8002124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	e0a7      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002142:	461a      	mov	r2, r3
 8002144:	2320      	movs	r3, #32
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	e098      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 8093 	bne.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4a4b      	ldr	r2, [pc, #300]	@ (8002288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d90f      	bls.n	800217e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e07e      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	440b      	add	r3, r1
 80021a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021c8:	461a      	mov	r2, r3
 80021ca:	2101      	movs	r1, #1
 80021cc:	f001 ffec 	bl	80041a8 <USB_EP0_OutStart>
 80021d0:	e006      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	441a      	add	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fa78 	bl	80066dc <HAL_PCD_DataOutStageCallback>
 80021ec:	e046      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d124      	bne.n	8002240 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220c:	461a      	mov	r2, r3
 800220e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002212:	6093      	str	r3, [r2, #8]
 8002214:	e032      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222c:	461a      	mov	r2, r3
 800222e:	2320      	movs	r3, #32
 8002230:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fa4f 	bl	80066dc <HAL_PCD_DataOutStageCallback>
 800223e:	e01d      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002268:	461a      	mov	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f001 ff9c 	bl	80041a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f004 fa30 	bl	80066dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	4f54300a 	.word	0x4f54300a
 800228c:	4f54310a 	.word	0x4f54310a

08002290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	333c      	adds	r3, #60	@ 0x3c
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a15      	ldr	r2, [pc, #84]	@ (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90e      	bls.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f004 f9e7 	bl	80066b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d90c      	bls.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	799b      	ldrb	r3, [r3, #6]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002304:	461a      	mov	r2, r3
 8002306:	2101      	movs	r1, #1
 8002308:	f001 ff4e 	bl	80041a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	4f54300a 	.word	0x4f54300a

0800231c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	4613      	mov	r3, r2
 800232a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800233a:	883b      	ldrh	r3, [r7, #0]
 800233c:	0419      	lsls	r1, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	430a      	orrs	r2, r1
 8002346:	629a      	str	r2, [r3, #40]	@ 0x28
 8002348:	e028      	b.n	800239c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e00d      	b.n	800237a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3340      	adds	r3, #64	@ 0x40
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	3b01      	subs	r3, #1
 8002380:	429a      	cmp	r2, r3
 8002382:	d3ec      	bcc.n	800235e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	0418      	lsls	r0, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4302      	orrs	r2, r0
 8002394:	3340      	adds	r3, #64	@ 0x40
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e267      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d075      	beq.n	80024ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b85      	ldr	r3, [pc, #532]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b82      	ldr	r3, [pc, #520]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05b      	beq.n	80024ec <HAL_RCC_OscConfig+0x108>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d157      	bne.n	80024ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e242      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x74>
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b70      	ldr	r3, [pc, #448]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6f      	ldr	r2, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6d      	ldr	r3, [pc, #436]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6c      	ldr	r2, [pc, #432]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 800247c:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a68      	ldr	r2, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b66      	ldr	r3, [pc, #408]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fa8c 	bl	80009b8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fa88 	bl	80009b8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e207      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xc0>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fa78 	bl	80009b8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fa74 	bl	80009b8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1f3      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b51      	ldr	r3, [pc, #324]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0xe8>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b44      	ldr	r3, [pc, #272]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c7      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3b      	ldr	r3, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4937      	ldr	r1, [pc, #220]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCC_OscConfig+0x244>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fa2d 	bl	80009b8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fa29 	bl	80009b8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a8      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4925      	ldr	r1, [pc, #148]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x244>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fa0c 	bl	80009b8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe fa08 	bl	80009b8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e187      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_RCC_OscConfig+0x248>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe f9ec 	bl	80009b8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe f9e8 	bl	80009b8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e167      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_RCC_OscConfig+0x240>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x200>
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_OscConfig+0x248>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe f9d5 	bl	80009b8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e00e      	b.n	8002630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe f9d1 	bl	80009b8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d907      	bls.n	8002630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e150      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002624:	40023800 	.word	0x40023800
 8002628:	42470000 	.word	0x42470000
 800262c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ea      	bne.n	8002612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8097 	beq.w	8002778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b81      	ldr	r3, [pc, #516]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a7c      	ldr	r2, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b7a      	ldr	r3, [pc, #488]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b77      	ldr	r3, [pc, #476]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a73      	ldr	r2, [pc, #460]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe f991 	bl	80009b8 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe f98d 	bl	80009b8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e10c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <HAL_RCC_OscConfig+0x474>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x2ea>
 80026c0:	4b64      	ldr	r3, [pc, #400]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c4:	4a63      	ldr	r2, [pc, #396]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x30c>
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a5e      	ldr	r2, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026f0:	4b58      	ldr	r3, [pc, #352]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a57      	ldr	r2, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	4b55      	ldr	r3, [pc, #340]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a54      	ldr	r2, [pc, #336]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f952 	bl	80009b8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe f94e 	bl	80009b8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0cb      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCC_OscConfig+0x334>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe f93c 	bl	80009b8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe f938 	bl	80009b8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0b5      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a38      	ldr	r2, [pc, #224]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a1 	beq.w	80028c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002782:	4b34      	ldr	r3, [pc, #208]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d05c      	beq.n	8002848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d141      	bne.n	800281a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b31      	ldr	r3, [pc, #196]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe f90c 	bl	80009b8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe f908 	bl	80009b8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e087      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe f8e1 	bl	80009b8 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe f8dd 	bl	80009b8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e05c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x416>
 8002818:	e054      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f8ca 	bl	80009b8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe f8c6 	bl	80009b8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e045      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
 8002846:	e03d      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e038      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_RCC_OscConfig+0x4ec>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d028      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d121      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d11a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fd fff8 	bl	80009b8 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fd fff4 	bl	80009b8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	@ (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd ff58 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08006cf8 	.word	0x08006cf8
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	20000008 	.word	0x20000008

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b090      	sub	sp, #64	@ 0x40
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab8:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	f200 80a1 	bhi.w	8002c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad2:	e09b      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ad8:	e09b      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8002adc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ade:	e098      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b4d      	ldr	r3, [pc, #308]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	2200      	movs	r2, #0
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b0c:	fb03 f201 	mul.w	r2, r3, r1
 8002b10:	2300      	movs	r3, #0
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	4a43      	ldr	r2, [pc, #268]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b20:	460a      	mov	r2, r1
 8002b22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b26:	4413      	add	r3, r2
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	61fa      	str	r2, [r7, #28]
 8002b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b3a:	f7fd fb4b 	bl	80001d4 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4613      	mov	r3, r2
 8002b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b46:	e053      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b48:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	2200      	movs	r2, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	617a      	str	r2, [r7, #20]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b5a:	f04f 0b00 	mov.w	fp, #0
 8002b5e:	4652      	mov	r2, sl
 8002b60:	465b      	mov	r3, fp
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	ebb2 080a 	subs.w	r8, r2, sl
 8002b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b92:	ebb2 0408 	subs.w	r4, r2, r8
 8002b96:	eb63 0509 	sbc.w	r5, r3, r9
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	00eb      	lsls	r3, r5, #3
 8002ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba8:	00e2      	lsls	r2, r4, #3
 8002baa:	4614      	mov	r4, r2
 8002bac:	461d      	mov	r5, r3
 8002bae:	eb14 030a 	adds.w	r3, r4, sl
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	eb45 030b 	adc.w	r3, r5, fp
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	028b      	lsls	r3, r1, #10
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	028a      	lsls	r2, r1, #10
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	60fa      	str	r2, [r7, #12]
 8002be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be4:	f7fd faf6 	bl	80001d4 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002c00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c0a:	e002      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3740      	adds	r7, #64	@ 0x40
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	017d7840 	.word	0x017d7840

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004

08002c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c44:	b084      	sub	sp, #16
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	f107 001c 	add.w	r0, r7, #28
 8002c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d123      	bne.n	8002ca6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f001 fae2 	bl	8004264 <USB_CoreReset>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e01b      	b.n	8002cde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f001 fad6 	bl	8004264 <USB_CoreReset>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cd0:	e005      	b.n	8002cde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cde:	7fbb      	ldrb	r3, [r7, #30]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10b      	bne.n	8002cfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f043 0206 	orr.w	r2, r3, #6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d08:	b004      	add	sp, #16
 8002d0a:	4770      	bx	lr

08002d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d165      	bne.n	8002dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4a41      	ldr	r2, [pc, #260]	@ (8002e28 <USB_SetTurnaroundTime+0x11c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d906      	bls.n	8002d36 <USB_SetTurnaroundTime+0x2a>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	@ (8002e2c <USB_SetTurnaroundTime+0x120>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d202      	bcs.n	8002d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d30:	230f      	movs	r3, #15
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e062      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a3c      	ldr	r2, [pc, #240]	@ (8002e2c <USB_SetTurnaroundTime+0x120>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d306      	bcc.n	8002d4c <USB_SetTurnaroundTime+0x40>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a3b      	ldr	r2, [pc, #236]	@ (8002e30 <USB_SetTurnaroundTime+0x124>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d202      	bcs.n	8002d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d46:	230e      	movs	r3, #14
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e057      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <USB_SetTurnaroundTime+0x124>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d306      	bcc.n	8002d62 <USB_SetTurnaroundTime+0x56>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a37      	ldr	r2, [pc, #220]	@ (8002e34 <USB_SetTurnaroundTime+0x128>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d202      	bcs.n	8002d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d5c:	230d      	movs	r3, #13
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e04c      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a33      	ldr	r2, [pc, #204]	@ (8002e34 <USB_SetTurnaroundTime+0x128>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d306      	bcc.n	8002d78 <USB_SetTurnaroundTime+0x6c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a32      	ldr	r2, [pc, #200]	@ (8002e38 <USB_SetTurnaroundTime+0x12c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d802      	bhi.n	8002d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d72:	230c      	movs	r3, #12
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e041      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <USB_SetTurnaroundTime+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d906      	bls.n	8002d8e <USB_SetTurnaroundTime+0x82>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <USB_SetTurnaroundTime+0x130>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d802      	bhi.n	8002d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d88:	230b      	movs	r3, #11
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e036      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <USB_SetTurnaroundTime+0x130>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d906      	bls.n	8002da4 <USB_SetTurnaroundTime+0x98>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a29      	ldr	r2, [pc, #164]	@ (8002e40 <USB_SetTurnaroundTime+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d802      	bhi.n	8002da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d9e:	230a      	movs	r3, #10
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e02b      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a26      	ldr	r2, [pc, #152]	@ (8002e40 <USB_SetTurnaroundTime+0x134>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d906      	bls.n	8002dba <USB_SetTurnaroundTime+0xae>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <USB_SetTurnaroundTime+0x138>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d202      	bcs.n	8002dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002db4:	2309      	movs	r3, #9
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e020      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a21      	ldr	r2, [pc, #132]	@ (8002e44 <USB_SetTurnaroundTime+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d306      	bcc.n	8002dd0 <USB_SetTurnaroundTime+0xc4>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a20      	ldr	r2, [pc, #128]	@ (8002e48 <USB_SetTurnaroundTime+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d802      	bhi.n	8002dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e015      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <USB_SetTurnaroundTime+0x13c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d906      	bls.n	8002de6 <USB_SetTurnaroundTime+0xda>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <USB_SetTurnaroundTime+0x140>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d202      	bcs.n	8002de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002de0:	2307      	movs	r3, #7
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e00a      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002de6:	2306      	movs	r3, #6
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e007      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002df2:	2309      	movs	r3, #9
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e001      	b.n	8002dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	029b      	lsls	r3, r3, #10
 8002e10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	00d8acbf 	.word	0x00d8acbf
 8002e2c:	00e4e1c0 	.word	0x00e4e1c0
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	01067380 	.word	0x01067380
 8002e38:	011a499f 	.word	0x011a499f
 8002e3c:	01312cff 	.word	0x01312cff
 8002e40:	014ca43f 	.word	0x014ca43f
 8002e44:	016e3600 	.word	0x016e3600
 8002e48:	01a6ab1f 	.word	0x01a6ab1f
 8002e4c:	01e84800 	.word	0x01e84800

08002e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ec2:	200a      	movs	r0, #10
 8002ec4:	f7fd fd84 	bl	80009d0 <HAL_Delay>
      ms += 10U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	330a      	adds	r3, #10
 8002ecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f001 f939 	bl	8004146 <USB_GetMode>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d01e      	beq.n	8002f18 <USB_SetCurrentMode+0x84>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ede:	d9f0      	bls.n	8002ec2 <USB_SetCurrentMode+0x2e>
 8002ee0:	e01a      	b.n	8002f18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f7fd fd6b 	bl	80009d0 <HAL_Delay>
      ms += 10U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	330a      	adds	r3, #10
 8002efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f001 f920 	bl	8004146 <USB_GetMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <USB_SetCurrentMode+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f10:	d9f0      	bls.n	8002ef4 <USB_SetCurrentMode+0x60>
 8002f12:	e001      	b.n	8002f18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e005      	b.n	8002f24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f1c:	d101      	bne.n	8002f22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e009      	b.n	8002f60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3340      	adds	r3, #64	@ 0x40
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b0e      	cmp	r3, #14
 8002f64:	d9f2      	bls.n	8002f4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11c      	bne.n	8002fa8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fa6:	e00b      	b.n	8002fc0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fcc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f968 	bl	80032b4 <USB_SetDevSpeed>
 8002fe4:	e008      	b.n	8002ff8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f963 	bl	80032b4 <USB_SetDevSpeed>
 8002fee:	e003      	b.n	8002ff8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ff0:	2103      	movs	r1, #3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f95e 	bl	80032b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ff8:	2110      	movs	r1, #16
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8fa 	bl	80031f4 <USB_FlushTxFifo>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f924 	bl	8003258 <USB_FlushRxFifo>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800302c:	461a      	mov	r2, r3
 800302e:	2300      	movs	r3, #0
 8003030:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003038:	461a      	mov	r2, r3
 800303a:	2300      	movs	r3, #0
 800303c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e043      	b.n	80030cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800305a:	d118      	bne.n	800308e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800306e:	461a      	mov	r2, r3
 8003070:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e013      	b.n	80030a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003084:	461a      	mov	r2, r3
 8003086:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e008      	b.n	80030a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ac:	461a      	mov	r2, r3
 80030ae:	2300      	movs	r3, #0
 80030b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030be:	461a      	mov	r2, r3
 80030c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	3301      	adds	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030d0:	461a      	mov	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d3b5      	bcc.n	8003044 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e043      	b.n	8003166 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030f4:	d118      	bne.n	8003128 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e013      	b.n	800313a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e008      	b.n	800313a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003158:	461a      	mov	r2, r3
 800315a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800315e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3301      	adds	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800316a:	461a      	mov	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4293      	cmp	r3, r2
 8003170:	d3b5      	bcc.n	80030de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003184:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003192:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003194:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <USB_DevInit+0x2c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f043 0208 	orr.w	r2, r3, #8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031ec:	b004      	add	sp, #16
 80031ee:	4770      	bx	lr
 80031f0:	803c3800 	.word	0x803c3800

080031f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800320e:	d901      	bls.n	8003214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e01b      	b.n	800324c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	daf2      	bge.n	8003202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	019b      	lsls	r3, r3, #6
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003238:	d901      	bls.n	800323e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e006      	b.n	800324c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d0f0      	beq.n	800322c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003270:	d901      	bls.n	8003276 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e018      	b.n	80032a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	daf2      	bge.n	8003264 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2210      	movs	r2, #16
 8003286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003294:	d901      	bls.n	800329a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e006      	b.n	80032a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d0f0      	beq.n	8003288 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b087      	sub	sp, #28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0306 	and.w	r3, r3, #6
 80032fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
 800330a:	e00a      	b.n	8003322 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d002      	beq.n	8003318 <USB_GetDevSpeed+0x32>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d102      	bne.n	800331e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003318:	2302      	movs	r3, #2
 800331a:	75fb      	strb	r3, [r7, #23]
 800331c:	e001      	b.n	8003322 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800331e:	230f      	movs	r3, #15
 8003320:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d13a      	bne.n	80033c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800336a:	4313      	orrs	r3, r2
 800336c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d155      	bne.n	8003430 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	791b      	ldrb	r3, [r3, #4]
 800339e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	059b      	lsls	r3, r3, #22
 80033a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e036      	b.n	8003430 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11a      	bne.n	8003430 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003416:	430b      	orrs	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	440a      	add	r2, r1
 8003422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d161      	bne.n	8003520 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800346e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003472:	d11f      	bne.n	80034b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	0151      	lsls	r1, r2, #5
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	440a      	add	r2, r1
 800348a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800348e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003492:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	0151      	lsls	r1, r2, #5
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	440a      	add	r2, r1
 80034aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034d4:	4013      	ands	r3, r2
 80034d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034f8:	4013      	ands	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	0159      	lsls	r1, r3, #5
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	440b      	add	r3, r1
 8003512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003516:	4619      	mov	r1, r3
 8003518:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <USB_DeactivateEndpoint+0x1b0>)
 800351a:	4013      	ands	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
 800351e:	e060      	b.n	80035e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003536:	d11f      	bne.n	8003578 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	440a      	add	r2, r1
 800354e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003552:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003556:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	440a      	add	r2, r1
 800356e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003572:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	041b      	lsls	r3, r3, #16
 8003590:	43db      	mvns	r3, r3
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003598:	4013      	ands	r3, r2
 800359a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	43db      	mvns	r3, r3
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035bc:	4013      	ands	r3, r2
 80035be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	0159      	lsls	r1, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	4619      	mov	r1, r3
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <USB_DeactivateEndpoint+0x1b4>)
 80035de:	4013      	ands	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	ec337800 	.word	0xec337800
 80035f4:	eff37800 	.word	0xeff37800

080035f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	@ 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 817a 	bne.w	800390e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d132      	bne.n	8003688 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	0151      	lsls	r1, r2, #5
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	440a      	add	r2, r1
 8003638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800363c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003640:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	440a      	add	r2, r1
 800365c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003680:	0cdb      	lsrs	r3, r3, #19
 8003682:	04db      	lsls	r3, r3, #19
 8003684:	6113      	str	r3, [r2, #16]
 8003686:	e092      	b.n	80037ae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	440a      	add	r2, r1
 800369e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036a2:	0cdb      	lsrs	r3, r3, #19
 80036a4:	04db      	lsls	r3, r3, #19
 80036a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80036c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80036ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11a      	bne.n	8003708 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d903      	bls.n	80036e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	0151      	lsls	r1, r2, #5
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	440a      	add	r2, r1
 80036fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003704:	6113      	str	r3, [r2, #16]
 8003706:	e01b      	b.n	8003740 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003714:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6919      	ldr	r1, [r3, #16]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	440b      	add	r3, r1
 8003720:	1e59      	subs	r1, r3, #1
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	fbb1 f3f3 	udiv	r3, r1, r3
 800372a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800372c:	4ba2      	ldr	r3, [pc, #648]	@ (80039b8 <USB_EPStartXfer+0x3c0>)
 800372e:	400b      	ands	r3, r1
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	0148      	lsls	r0, r1, #5
 8003734:	69f9      	ldr	r1, [r7, #28]
 8003736:	4401      	add	r1, r0
 8003738:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	0148      	lsls	r0, r1, #5
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	4401      	add	r1, r0
 800375e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d11f      	bne.n	80037ae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003788:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800378c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d14b      	bne.n	800384c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	791b      	ldrb	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d128      	bne.n	800382a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d110      	bne.n	800380a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003802:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e00f      	b.n	800382a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003828:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003844:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e165      	b.n	8003b18 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	440a      	add	r2, r1
 8003862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003866:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800386a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d015      	beq.n	80038a0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 814d 	beq.w	8003b18 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	69f9      	ldr	r1, [r7, #28]
 8003896:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800389a:	4313      	orrs	r3, r2
 800389c:	634b      	str	r3, [r1, #52]	@ 0x34
 800389e:	e13b      	b.n	8003b18 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d110      	bne.n	80038d2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e00f      	b.n	80038f2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	0151      	lsls	r1, r2, #5
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	440a      	add	r2, r1
 80038e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	b298      	uxth	r0, r3
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4603      	mov	r3, r0
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f9b8 	bl	8003c7c <USB_WritePacket>
 800390c:	e104      	b.n	8003b18 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003928:	0cdb      	lsrs	r3, r3, #19
 800392a:	04db      	lsls	r3, r3, #19
 800392c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003948:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800394c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003950:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d131      	bne.n	80039bc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	69b9      	ldr	r1, [r7, #24]
 8003988:	0148      	lsls	r0, r1, #5
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	4401      	add	r1, r0
 800398e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003992:	4313      	orrs	r3, r2
 8003994:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039b4:	6113      	str	r3, [r2, #16]
 80039b6:	e061      	b.n	8003a7c <USB_EPStartXfer+0x484>
 80039b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d123      	bne.n	8003a0c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	69b9      	ldr	r1, [r7, #24]
 80039dc:	0148      	lsls	r0, r1, #5
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	4401      	add	r1, r0
 80039e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a08:	6113      	str	r3, [r2, #16]
 8003a0a:	e037      	b.n	8003a7c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4413      	add	r3, r2
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	8afa      	ldrh	r2, [r7, #22]
 8003a28:	fb03 f202 	mul.w	r2, r3, r2
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	04d9      	lsls	r1, r3, #19
 8003a42:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <USB_EPStartXfer+0x52c>)
 8003a44:	400b      	ands	r3, r1
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	0148      	lsls	r0, r1, #5
 8003a4a:	69f9      	ldr	r1, [r7, #28]
 8003a4c:	4401      	add	r1, r0
 8003a4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a52:	4313      	orrs	r3, r2
 8003a54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	0148      	lsls	r0, r1, #5
 8003a70:	69f9      	ldr	r1, [r7, #28]
 8003a72:	4401      	add	r1, r0
 8003a74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10d      	bne.n	8003a9e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	68d9      	ldr	r1, [r3, #12]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	791b      	ldrb	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d128      	bne.n	8003af8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	0151      	lsls	r1, r2, #5
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	440a      	add	r2, r1
 8003acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ad0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e00f      	b.n	8003af8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	1ff80000 	.word	0x1ff80000

08003b28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d14a      	bne.n	8003bdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b5e:	f040 8086 	bne.w	8003c6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ba8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d902      	bls.n	8003bc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8003bbe:	e056      	b.n	8003c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bd8:	d0e7      	beq.n	8003baa <USB_EPStopXfer+0x82>
 8003bda:	e048      	b.n	8003c6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf4:	d13b      	bne.n	8003c6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	0151      	lsls	r1, r2, #5
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	440a      	add	r2, r1
 8003c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d902      	bls.n	8003c54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
          break;
 8003c52:	e00c      	b.n	8003c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c6c:	d0e7      	beq.n	8003c3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	@ 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d123      	bne.n	8003cea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ca2:	88bb      	ldrh	r3, [r7, #4]
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e018      	b.n	8003ce2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	031a      	lsls	r2, r3, #12
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3e2      	bcc.n	8003cb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3724      	adds	r7, #36	@ 0x24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b08b      	sub	sp, #44	@ 0x2c
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	e014      	b.n	8003d4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	3301      	adds	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	3301      	adds	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	3301      	adds	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	3301      	adds	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	6a3a      	ldr	r2, [r7, #32]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d3e6      	bcc.n	8003d24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d56:	8bfb      	ldrh	r3, [r7, #30]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01e      	beq.n	8003d9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d66:	461a      	mov	r2, r3
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	701a      	strb	r2, [r3, #0]
      i++;
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	3301      	adds	r3, #1
 8003d86:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d8e:	8bfb      	ldrh	r3, [r7, #30]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d94:	8bfb      	ldrh	r3, [r7, #30]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ea      	bne.n	8003d70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	372c      	adds	r7, #44	@ 0x2c
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d12c      	bne.n	8003e1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db12      	blt.n	8003dfc <USB_EPSetStall+0x54>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003df6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e02b      	b.n	8003e76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db12      	blt.n	8003e56 <USB_EPSetStall+0xae>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00f      	beq.n	8003e56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d128      	bne.n	8003ef2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d003      	beq.n	8003ed0 <USB_EPClearStall+0x4c>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	791b      	ldrb	r3, [r3, #4]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d138      	bne.n	8003f42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e027      	b.n	8003f42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	791b      	ldrb	r3, [r3, #4]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d003      	beq.n	8003f22 <USB_EPClearStall+0x9e>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d10f      	bne.n	8003f42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fca:	f023 0302 	bic.w	r3, r3, #2
 8003fce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ff8:	f023 0303 	bic.w	r3, r3, #3
 8003ffc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	0c1b      	lsrs	r3, r3, #16
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	b29b      	uxth	r3, r3
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040dc:	68bb      	ldr	r3, [r7, #8]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	b2db      	uxtb	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	4618      	mov	r0, r3
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0301 	and.w	r3, r3, #1
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004180:	f023 0307 	bic.w	r3, r3, #7
 8004184:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	460b      	mov	r3, r1
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	333c      	adds	r3, #60	@ 0x3c
 80041be:	3304      	adds	r3, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4a26      	ldr	r2, [pc, #152]	@ (8004260 <USB_EP0_OutStart+0xb8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d90a      	bls.n	80041e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041dc:	d101      	bne.n	80041e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e037      	b.n	8004252 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004210:	f043 0318 	orr.w	r3, r3, #24
 8004214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004224:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004228:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10f      	bne.n	8004250 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800424a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800424e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	4f54300a 	.word	0x4f54300a

08004264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800427c:	d901      	bls.n	8004282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e01b      	b.n	80042ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	daf2      	bge.n	8004270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042a6:	d901      	bls.n	80042ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e006      	b.n	80042ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d0f0      	beq.n	800429a <USB_CoreReset+0x36>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80042d8:	f002 fc60 	bl	8006b9c <USBD_static_malloc>
 80042dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	32b0      	adds	r2, #176	@ 0xb0
 80042ee:	2100      	movs	r1, #0
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0d4      	b.n	80044a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80042f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80042fc:	2100      	movs	r1, #0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f002 fc90 	bl	8006c24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	32b0      	adds	r2, #176	@ 0xb0
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	32b0      	adds	r2, #176	@ 0xb0
 800431e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7c1b      	ldrb	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d138      	bne.n	80043a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004330:	4b5e      	ldr	r3, [pc, #376]	@ (80044ac <USBD_CDC_Init+0x1e4>)
 8004332:	7819      	ldrb	r1, [r3, #0]
 8004334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004338:	2202      	movs	r2, #2
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f002 fb0b 	bl	8006956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004340:	4b5a      	ldr	r3, [pc, #360]	@ (80044ac <USBD_CDC_Init+0x1e4>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3324      	adds	r3, #36	@ 0x24
 8004356:	2201      	movs	r2, #1
 8004358:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800435a:	4b55      	ldr	r3, [pc, #340]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 800435c:	7819      	ldrb	r1, [r3, #0]
 800435e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004362:	2202      	movs	r2, #2
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f002 faf6 	bl	8006956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800436a:	4b51      	ldr	r3, [pc, #324]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004382:	2201      	movs	r2, #1
 8004384:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004386:	4b4b      	ldr	r3, [pc, #300]	@ (80044b4 <USBD_CDC_Init+0x1ec>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3326      	adds	r3, #38	@ 0x26
 800439c:	2210      	movs	r2, #16
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e035      	b.n	800440e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80043a2:	4b42      	ldr	r3, [pc, #264]	@ (80044ac <USBD_CDC_Init+0x1e4>)
 80043a4:	7819      	ldrb	r1, [r3, #0]
 80043a6:	2340      	movs	r3, #64	@ 0x40
 80043a8:	2202      	movs	r2, #2
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f002 fad3 	bl	8006956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80043b0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ac <USBD_CDC_Init+0x1e4>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3324      	adds	r3, #36	@ 0x24
 80043c6:	2201      	movs	r2, #1
 80043c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80043ca:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 80043cc:	7819      	ldrb	r1, [r3, #0]
 80043ce:	2340      	movs	r3, #64	@ 0x40
 80043d0:	2202      	movs	r2, #2
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f002 fabf 	bl	8006956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80043d8:	4b35      	ldr	r3, [pc, #212]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043f0:	2201      	movs	r2, #1
 80043f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80043f4:	4b2f      	ldr	r3, [pc, #188]	@ (80044b4 <USBD_CDC_Init+0x1ec>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3326      	adds	r3, #38	@ 0x26
 800440a:	2210      	movs	r2, #16
 800440c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800440e:	4b29      	ldr	r3, [pc, #164]	@ (80044b4 <USBD_CDC_Init+0x1ec>)
 8004410:	7819      	ldrb	r1, [r3, #0]
 8004412:	2308      	movs	r3, #8
 8004414:	2203      	movs	r2, #3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f002 fa9d 	bl	8006956 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <USBD_CDC_Init+0x1ec>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3324      	adds	r3, #36	@ 0x24
 8004432:	2201      	movs	r2, #1
 8004434:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	33b0      	adds	r3, #176	@ 0xb0
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800446c:	2302      	movs	r3, #2
 800446e:	e018      	b.n	80044a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7c1b      	ldrb	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004478:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 800447a:	7819      	ldrb	r1, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f002 fb54 	bl	8006b34 <USBD_LL_PrepareReceive>
 800448c:	e008      	b.n	80044a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800448e:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <USBD_CDC_Init+0x1e8>)
 8004490:	7819      	ldrb	r1, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f002 fb4a 	bl	8006b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000097 	.word	0x20000097
 80044b0:	20000098 	.word	0x20000098
 80044b4:	20000099 	.word	0x20000099

080044b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80044c4:	4b3a      	ldr	r3, [pc, #232]	@ (80045b0 <USBD_CDC_DeInit+0xf8>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f002 fa69 	bl	80069a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80044d0:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <USBD_CDC_DeInit+0xf8>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3324      	adds	r3, #36	@ 0x24
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80044ea:	4b32      	ldr	r3, [pc, #200]	@ (80045b4 <USBD_CDC_DeInit+0xfc>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f002 fa56 	bl	80069a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80044f6:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <USBD_CDC_DeInit+0xfc>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800450e:	2200      	movs	r2, #0
 8004510:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004512:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <USBD_CDC_DeInit+0x100>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f002 fa42 	bl	80069a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800451e:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <USBD_CDC_DeInit+0x100>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3324      	adds	r3, #36	@ 0x24
 8004534:	2200      	movs	r2, #0
 8004536:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004538:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <USBD_CDC_DeInit+0x100>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3326      	adds	r3, #38	@ 0x26
 800454e:	2200      	movs	r2, #0
 8004550:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	32b0      	adds	r2, #176	@ 0xb0
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	33b0      	adds	r3, #176	@ 0xb0
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	32b0      	adds	r2, #176	@ 0xb0
 8004582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004586:	4618      	mov	r0, r3
 8004588:	f002 fb16 	bl	8006bb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	32b0      	adds	r2, #176	@ 0xb0
 8004596:	2100      	movs	r1, #0
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000097 	.word	0x20000097
 80045b4:	20000098 	.word	0x20000098
 80045b8:	20000099 	.word	0x20000099

080045bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	32b0      	adds	r2, #176	@ 0xb0
 80045d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0bf      	b.n	800476c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d050      	beq.n	800469a <USBD_CDC_Setup+0xde>
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	f040 80af 	bne.w	800475c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	88db      	ldrh	r3, [r3, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d03a      	beq.n	800467c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b25b      	sxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	da1b      	bge.n	8004648 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	33b0      	adds	r3, #176	@ 0xb0
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	88d2      	ldrh	r2, [r2, #6]
 800462c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	88db      	ldrh	r3, [r3, #6]
 8004632:	2b07      	cmp	r3, #7
 8004634:	bf28      	it	cs
 8004636:	2307      	movcs	r3, #7
 8004638:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	89fa      	ldrh	r2, [r7, #14]
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fd47 	bl	80060d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004646:	e090      	b.n	800476a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785a      	ldrb	r2, [r3, #1]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	88db      	ldrh	r3, [r3, #6]
 8004656:	2b3f      	cmp	r3, #63	@ 0x3f
 8004658:	d803      	bhi.n	8004662 <USBD_CDC_Setup+0xa6>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	88db      	ldrh	r3, [r3, #6]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	e000      	b.n	8004664 <USBD_CDC_Setup+0xa8>
 8004662:	2240      	movs	r2, #64	@ 0x40
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800466a:	6939      	ldr	r1, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004672:	461a      	mov	r2, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 fd59 	bl	800612c <USBD_CtlPrepareRx>
      break;
 800467a:	e076      	b.n	800476a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	33b0      	adds	r3, #176	@ 0xb0
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	7850      	ldrb	r0, [r2, #1]
 8004692:	2200      	movs	r2, #0
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	4798      	blx	r3
      break;
 8004698:	e067      	b.n	800476a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	785b      	ldrb	r3, [r3, #1]
 800469e:	2b0b      	cmp	r3, #11
 80046a0:	d851      	bhi.n	8004746 <USBD_CDC_Setup+0x18a>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <USBD_CDC_Setup+0xec>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046d9 	.word	0x080046d9
 80046ac:	08004755 	.word	0x08004755
 80046b0:	08004747 	.word	0x08004747
 80046b4:	08004747 	.word	0x08004747
 80046b8:	08004747 	.word	0x08004747
 80046bc:	08004747 	.word	0x08004747
 80046c0:	08004747 	.word	0x08004747
 80046c4:	08004747 	.word	0x08004747
 80046c8:	08004747 	.word	0x08004747
 80046cc:	08004747 	.word	0x08004747
 80046d0:	08004703 	.word	0x08004703
 80046d4:	0800472d 	.word	0x0800472d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d107      	bne.n	80046f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80046e4:	f107 030a 	add.w	r3, r7, #10
 80046e8:	2202      	movs	r2, #2
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 fcf1 	bl	80060d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046f2:	e032      	b.n	800475a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 fc7b 	bl	8005ff2 <USBD_CtlError>
            ret = USBD_FAIL;
 80046fc:	2303      	movs	r3, #3
 80046fe:	75fb      	strb	r3, [r7, #23]
          break;
 8004700:	e02b      	b.n	800475a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b03      	cmp	r3, #3
 800470c:	d107      	bne.n	800471e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800470e:	f107 030d 	add.w	r3, r7, #13
 8004712:	2201      	movs	r2, #1
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 fcdc 	bl	80060d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800471c:	e01d      	b.n	800475a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fc66 	bl	8005ff2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004726:	2303      	movs	r3, #3
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e016      	b.n	800475a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d00f      	beq.n	8004758 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f001 fc59 	bl	8005ff2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004740:	2303      	movs	r3, #3
 8004742:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004744:	e008      	b.n	8004758 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 fc52 	bl	8005ff2 <USBD_CtlError>
          ret = USBD_FAIL;
 800474e:	2303      	movs	r3, #3
 8004750:	75fb      	strb	r3, [r7, #23]
          break;
 8004752:	e002      	b.n	800475a <USBD_CDC_Setup+0x19e>
          break;
 8004754:	bf00      	nop
 8004756:	e008      	b.n	800476a <USBD_CDC_Setup+0x1ae>
          break;
 8004758:	bf00      	nop
      }
      break;
 800475a:	e006      	b.n	800476a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fc47 	bl	8005ff2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004764:	2303      	movs	r3, #3
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	bf00      	nop
  }

  return (uint8_t)ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	32b0      	adds	r2, #176	@ 0xb0
 8004792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800479a:	2303      	movs	r3, #3
 800479c:	e065      	b.n	800486a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	32b0      	adds	r2, #176	@ 0xb0
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f003 020f 	and.w	r2, r3, #15
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3318      	adds	r3, #24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02f      	beq.n	8004828 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3318      	adds	r3, #24
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 010f 	and.w	r1, r3, #15
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	460b      	mov	r3, r1
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	440b      	add	r3, r1
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4403      	add	r3, r0
 80047f0:	331c      	adds	r3, #28
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d112      	bne.n	8004828 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3318      	adds	r3, #24
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800481a:	78f9      	ldrb	r1, [r7, #3]
 800481c:	2300      	movs	r3, #0
 800481e:	2200      	movs	r2, #0
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f002 f966 	bl	8006af2 <USBD_LL_Transmit>
 8004826:	e01f      	b.n	8004868 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	33b0      	adds	r3, #176	@ 0xb0
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	33b0      	adds	r3, #176	@ 0xb0
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	32b0      	adds	r2, #176	@ 0xb0
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	32b0      	adds	r2, #176	@ 0xb0
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e01a      	b.n	80048da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 f964 	bl	8006b76 <USBD_LL_GetRxDataSize>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	33b0      	adds	r3, #176	@ 0xb0
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80048d4:	4611      	mov	r1, r2
 80048d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	32b0      	adds	r2, #176	@ 0xb0
 80048f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004900:	2303      	movs	r3, #3
 8004902:	e024      	b.n	800494e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	33b0      	adds	r3, #176	@ 0xb0
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d019      	beq.n	800494c <USBD_CDC_EP0_RxReady+0x6a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800491e:	2bff      	cmp	r3, #255	@ 0xff
 8004920:	d014      	beq.n	800494c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	33b0      	adds	r3, #176	@ 0xb0
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800493a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004942:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	22ff      	movs	r2, #255	@ 0xff
 8004948:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004960:	2182      	movs	r1, #130	@ 0x82
 8004962:	4818      	ldr	r0, [pc, #96]	@ (80049c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004964:	f000 fd0f 	bl	8005386 <USBD_GetEpDesc>
 8004968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800496a:	2101      	movs	r1, #1
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800496e:	f000 fd0a 	bl	8005386 <USBD_GetEpDesc>
 8004972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004974:	2181      	movs	r1, #129	@ 0x81
 8004976:	4813      	ldr	r0, [pc, #76]	@ (80049c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004978:	f000 fd05 	bl	8005386 <USBD_GetEpDesc>
 800497c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2210      	movs	r2, #16
 8004988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2200      	movs	r2, #0
 8004994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004998:	711a      	strb	r2, [r3, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ac:	711a      	strb	r2, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2243      	movs	r2, #67	@ 0x43
 80049b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049b8:	4b02      	ldr	r3, [pc, #8]	@ (80049c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000054 	.word	0x20000054

080049c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049d0:	2182      	movs	r1, #130	@ 0x82
 80049d2:	4818      	ldr	r0, [pc, #96]	@ (8004a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049d4:	f000 fcd7 	bl	8005386 <USBD_GetEpDesc>
 80049d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049da:	2101      	movs	r1, #1
 80049dc:	4815      	ldr	r0, [pc, #84]	@ (8004a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049de:	f000 fcd2 	bl	8005386 <USBD_GetEpDesc>
 80049e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049e4:	2181      	movs	r1, #129	@ 0x81
 80049e6:	4813      	ldr	r0, [pc, #76]	@ (8004a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80049e8:	f000 fccd 	bl	8005386 <USBD_GetEpDesc>
 80049ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2210      	movs	r2, #16
 80049f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2200      	movs	r2, #0
 8004a04:	711a      	strb	r2, [r3, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f042 0202 	orr.w	r2, r2, #2
 8004a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	711a      	strb	r2, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f042 0202 	orr.w	r2, r2, #2
 8004a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2243      	movs	r2, #67	@ 0x43
 8004a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a28:	4b02      	ldr	r3, [pc, #8]	@ (8004a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000054 	.word	0x20000054

08004a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a40:	2182      	movs	r1, #130	@ 0x82
 8004a42:	4818      	ldr	r0, [pc, #96]	@ (8004aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a44:	f000 fc9f 	bl	8005386 <USBD_GetEpDesc>
 8004a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	4815      	ldr	r0, [pc, #84]	@ (8004aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a4e:	f000 fc9a 	bl	8005386 <USBD_GetEpDesc>
 8004a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a54:	2181      	movs	r1, #129	@ 0x81
 8004a56:	4813      	ldr	r0, [pc, #76]	@ (8004aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a58:	f000 fc95 	bl	8005386 <USBD_GetEpDesc>
 8004a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2210      	movs	r2, #16
 8004a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d006      	beq.n	8004a7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a78:	711a      	strb	r2, [r3, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8c:	711a      	strb	r2, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2243      	movs	r2, #67	@ 0x43
 8004a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a98:	4b02      	ldr	r3, [pc, #8]	@ (8004aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000054 	.word	0x20000054

08004aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ab6:	4b03      	ldr	r3, [pc, #12]	@ (8004ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000010 	.word	0x20000010

08004ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e009      	b.n	8004af0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	33b0      	adds	r3, #176	@ 0xb0
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	32b0      	adds	r2, #176	@ 0xb0
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e008      	b.n	8004b34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	32b0      	adds	r2, #176	@ 0xb0
 8004b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e004      	b.n	8004b6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	32b0      	adds	r2, #176	@ 0xb0
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	32b0      	adds	r2, #176	@ 0xb0
 8004b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e018      	b.n	8004bdc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7c1b      	ldrb	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <USBD_CDC_ReceivePacket+0x68>)
 8004bb4:	7819      	ldrb	r1, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 ffb7 	bl	8006b34 <USBD_LL_PrepareReceive>
 8004bc6:	e008      	b.n	8004bda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <USBD_CDC_ReceivePacket+0x68>)
 8004bca:	7819      	ldrb	r1, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bd2:	2340      	movs	r3, #64	@ 0x40
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f001 ffad 	bl	8006b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000098 	.word	0x20000098

08004be8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e01f      	b.n	8004c40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	79fa      	ldrb	r2, [r7, #7]
 8004c32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 fe27 	bl	8006888 <USBD_LL_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e025      	b.n	8004cac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	32ae      	adds	r2, #174	@ 0xae
 8004c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00f      	beq.n	8004c9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	32ae      	adds	r2, #174	@ 0xae
 8004c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	f107 020e 	add.w	r2, r7, #14
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 fe2f 	bl	8006920 <USBD_LL_Start>
 8004cc2:	4603      	mov	r3, r0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	4611      	mov	r1, r2
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	4611      	mov	r1, r2
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 f90c 	bl	8005f7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d01a      	beq.n	8004dc0 <USBD_LL_SetupStage+0x72>
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d822      	bhi.n	8004dd4 <USBD_LL_SetupStage+0x86>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <USBD_LL_SetupStage+0x4a>
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d00a      	beq.n	8004dac <USBD_LL_SetupStage+0x5e>
 8004d96:	e01d      	b.n	8004dd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb63 	bl	800546c <USBD_StdDevReq>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
      break;
 8004daa:	e020      	b.n	8004dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fbcb 	bl	8005550 <USBD_StdItfReq>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbe:	e016      	b.n	8004dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fc2d 	bl	8005628 <USBD_StdEPReq>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd2:	e00c      	b.n	8004dee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004dda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 fdfc 	bl	80069e0 <USBD_LL_StallEP>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	bf00      	nop
  }

  return ret;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	460b      	mov	r3, r1
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d16e      	bne.n	8004eee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004e16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	f040 8098 	bne.w	8004f54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d913      	bls.n	8004e58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bf28      	it	cs
 8004e4a:	4613      	movcs	r3, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f001 f988 	bl	8006166 <USBD_CtlContinueRx>
 8004e56:	e07d      	b.n	8004f54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d014      	beq.n	8004e90 <USBD_LL_DataOutStage+0x98>
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d81d      	bhi.n	8004ea6 <USBD_LL_DataOutStage+0xae>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <USBD_LL_DataOutStage+0x7c>
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d003      	beq.n	8004e7a <USBD_LL_DataOutStage+0x82>
 8004e72:	e018      	b.n	8004ea6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	75bb      	strb	r3, [r7, #22]
            break;
 8004e78:	e018      	b.n	8004eac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	4619      	mov	r1, r3
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fa64 	bl	8005352 <USBD_CoreFindIF>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75bb      	strb	r3, [r7, #22]
            break;
 8004e8e:	e00d      	b.n	8004eac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa66 	bl	800536c <USBD_CoreFindEP>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	75bb      	strb	r3, [r7, #22]
            break;
 8004ea4:	e002      	b.n	8004eac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75bb      	strb	r3, [r7, #22]
            break;
 8004eaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004eac:	7dbb      	ldrb	r3, [r7, #22]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d119      	bne.n	8004ee6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d113      	bne.n	8004ee6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004ebe:	7dba      	ldrb	r2, [r7, #22]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	32ae      	adds	r2, #174	@ 0xae
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004ece:	7dba      	ldrb	r2, [r7, #22]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ed6:	7dba      	ldrb	r2, [r7, #22]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	32ae      	adds	r2, #174	@ 0xae
 8004edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 f94e 	bl	8006188 <USBD_CtlSendStatus>
 8004eec:	e032      	b.n	8004f54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa37 	bl	800536c <USBD_CoreFindEP>
 8004efe:	4603      	mov	r3, r0
 8004f00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f02:	7dbb      	ldrb	r3, [r7, #22]
 8004f04:	2bff      	cmp	r3, #255	@ 0xff
 8004f06:	d025      	beq.n	8004f54 <USBD_LL_DataOutStage+0x15c>
 8004f08:	7dbb      	ldrb	r3, [r7, #22]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d122      	bne.n	8004f54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d117      	bne.n	8004f4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f1a:	7dba      	ldrb	r2, [r7, #22]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	32ae      	adds	r2, #174	@ 0xae
 8004f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00f      	beq.n	8004f4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004f2a:	7dba      	ldrb	r2, [r7, #22]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004f32:	7dba      	ldrb	r2, [r7, #22]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	32ae      	adds	r2, #174	@ 0xae
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	7afa      	ldrb	r2, [r7, #11]
 8004f40:	4611      	mov	r1, r2
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4798      	blx	r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	e000      	b.n	8004f56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	460b      	mov	r3, r1
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d16f      	bne.n	8005052 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3314      	adds	r3, #20
 8004f76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d15a      	bne.n	8005038 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d914      	bls.n	8004fb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f001 f8b0 	bl	800610a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004faa:	2300      	movs	r3, #0
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f001 fdbf 	bl	8006b34 <USBD_LL_PrepareReceive>
 8004fb6:	e03f      	b.n	8005038 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d11c      	bne.n	8004ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d316      	bcc.n	8004ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20f      	bcs.n	8004ffe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f001 f891 	bl	800610a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f001 fd9c 	bl	8006b34 <USBD_LL_PrepareReceive>
 8004ffc:	e01c      	b.n	8005038 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d10f      	bne.n	800502a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800502a:	2180      	movs	r1, #128	@ 0x80
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f001 fcd7 	bl	80069e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f001 f8bb 	bl	80061ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03a      	beq.n	80050b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fe42 	bl	8004ccc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005050:	e032      	b.n	80050b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f985 	bl	800536c <USBD_CoreFindEP>
 8005062:	4603      	mov	r3, r0
 8005064:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	2bff      	cmp	r3, #255	@ 0xff
 800506a:	d025      	beq.n	80050b8 <USBD_LL_DataInStage+0x15a>
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d122      	bne.n	80050b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b03      	cmp	r3, #3
 800507c:	d11c      	bne.n	80050b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800507e:	7dfa      	ldrb	r2, [r7, #23]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	32ae      	adds	r2, #174	@ 0xae
 8005084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800508e:	7dfa      	ldrb	r2, [r7, #23]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005096:	7dfa      	ldrb	r2, [r7, #23]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	32ae      	adds	r2, #174	@ 0xae
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	7afa      	ldrb	r2, [r7, #11]
 80050a4:	4611      	mov	r1, r2
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	4798      	blx	r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80050b4:	7dbb      	ldrb	r3, [r7, #22]
 80050b6:	e000      	b.n	80050ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d014      	beq.n	8005128 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6852      	ldr	r2, [r2, #4]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	4611      	mov	r1, r2
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005128:	2340      	movs	r3, #64	@ 0x40
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fc11 	bl	8006956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	@ 0x40
 8005140:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005144:	2340      	movs	r3, #64	@ 0x40
 8005146:	2200      	movs	r2, #0
 8005148:	2180      	movs	r1, #128	@ 0x80
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 fc03 	bl	8006956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2240      	movs	r2, #64	@ 0x40
 800515a:	621a      	str	r2, [r3, #32]

  return ret;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b04      	cmp	r3, #4
 8005198:	d006      	beq.n	80051a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2204      	movs	r2, #4
 80051ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d106      	bne.n	80051e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d110      	bne.n	8005224 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	32ae      	adds	r2, #174	@ 0xae
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e01c      	b.n	800528a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d115      	bne.n	8005288 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	32ae      	adds	r2, #174	@ 0xae
 8005266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32ae      	adds	r2, #174	@ 0xae
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	4611      	mov	r1, r2
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	32ae      	adds	r2, #174	@ 0xae
 80052a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e01c      	b.n	80052ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d115      	bne.n	80052ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	32ae      	adds	r2, #174	@ 0xae
 80052ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	32ae      	adds	r2, #174	@ 0xae
 80052de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	4611      	mov	r1, r2
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	4611      	mov	r1, r2
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005344:	2303      	movs	r3, #3
 8005346:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800535e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005378:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	885b      	ldrh	r3, [r3, #2]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d91f      	bls.n	80053ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80053b2:	e013      	b.n	80053dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80053b4:	f107 030a 	add.w	r3, r7, #10
 80053b8:	4619      	mov	r1, r3
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f000 f81b 	bl	80053f6 <USBD_GetNextDesc>
 80053c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d108      	bne.n	80053dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	789b      	ldrb	r3, [r3, #2]
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d008      	beq.n	80053ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	885b      	ldrh	r3, [r3, #2]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d8e5      	bhi.n	80053b4 <USBD_GetEpDesc+0x2e>
 80053e8:	e000      	b.n	80053ec <USBD_GetEpDesc+0x66>
          break;
 80053ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80053ec:	693b      	ldr	r3, [r7, #16]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	4413      	add	r3, r2
 800540e:	b29a      	uxth	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3301      	adds	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800544c:	8a3b      	ldrh	r3, [r7, #16]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	b21a      	sxth	r2, r3
 8005452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005456:	4313      	orrs	r3, r2
 8005458:	b21b      	sxth	r3, r3
 800545a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800545c:	89fb      	ldrh	r3, [r7, #14]
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d005      	beq.n	8005492 <USBD_StdDevReq+0x26>
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d857      	bhi.n	800553a <USBD_StdDevReq+0xce>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <USBD_StdDevReq+0x42>
 800548e:	2b20      	cmp	r3, #32
 8005490:	d153      	bne.n	800553a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	32ae      	adds	r2, #174	@ 0xae
 800549c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e04a      	b.n	8005544 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d83b      	bhi.n	800552e <USBD_StdDevReq+0xc2>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <USBD_StdDevReq+0x50>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	08005511 	.word	0x08005511
 80054c0:	08005525 	.word	0x08005525
 80054c4:	0800552f 	.word	0x0800552f
 80054c8:	0800551b 	.word	0x0800551b
 80054cc:	0800552f 	.word	0x0800552f
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	0800552f 	.word	0x0800552f
 80054dc:	08005507 	.word	0x08005507
 80054e0:	080054f9 	.word	0x080054f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa3c 	bl	8005964 <USBD_GetDescriptor>
          break;
 80054ec:	e024      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fba1 	bl	8005c38 <USBD_SetAddress>
          break;
 80054f6:	e01f      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fbe0 	bl	8005cc0 <USBD_SetConfig>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
          break;
 8005504:	e018      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc83 	bl	8005e14 <USBD_GetConfig>
          break;
 800550e:	e013      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fcb4 	bl	8005e80 <USBD_GetStatus>
          break;
 8005518:	e00e      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fce3 	bl	8005ee8 <USBD_SetFeature>
          break;
 8005522:	e009      	b.n	8005538 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fd07 	bl	8005f3a <USBD_ClrFeature>
          break;
 800552c:	e004      	b.n	8005538 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fd5e 	bl	8005ff2 <USBD_CtlError>
          break;
 8005536:	bf00      	nop
      }
      break;
 8005538:	e004      	b.n	8005544 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fd58 	bl	8005ff2 <USBD_CtlError>
      break;
 8005542:	bf00      	nop
  }

  return ret;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop

08005550 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d005      	beq.n	8005576 <USBD_StdItfReq+0x26>
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d852      	bhi.n	8005614 <USBD_StdItfReq+0xc4>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <USBD_StdItfReq+0x26>
 8005572:	2b20      	cmp	r3, #32
 8005574:	d14e      	bne.n	8005614 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	2b02      	cmp	r3, #2
 8005582:	d840      	bhi.n	8005606 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	889b      	ldrh	r3, [r3, #4]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d836      	bhi.n	80055fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	889b      	ldrh	r3, [r3, #4]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fedb 	bl	8005352 <USBD_CoreFindIF>
 800559c:	4603      	mov	r3, r0
 800559e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2bff      	cmp	r3, #255	@ 0xff
 80055a4:	d01d      	beq.n	80055e2 <USBD_StdItfReq+0x92>
 80055a6:	7bbb      	ldrb	r3, [r7, #14]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11a      	bne.n	80055e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80055ac:	7bba      	ldrb	r2, [r7, #14]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	32ae      	adds	r2, #174	@ 0xae
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00f      	beq.n	80055dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80055bc:	7bba      	ldrb	r2, [r7, #14]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80055c4:	7bba      	ldrb	r2, [r7, #14]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	32ae      	adds	r2, #174	@ 0xae
 80055ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055da:	e004      	b.n	80055e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80055dc:	2303      	movs	r3, #3
 80055de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055e0:	e001      	b.n	80055e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80055e2:	2303      	movs	r3, #3
 80055e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	88db      	ldrh	r3, [r3, #6]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d110      	bne.n	8005610 <USBD_StdItfReq+0xc0>
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fdc7 	bl	8006188 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055fa:	e009      	b.n	8005610 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcf7 	bl	8005ff2 <USBD_CtlError>
          break;
 8005604:	e004      	b.n	8005610 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fcf2 	bl	8005ff2 <USBD_CtlError>
          break;
 800560e:	e000      	b.n	8005612 <USBD_StdItfReq+0xc2>
          break;
 8005610:	bf00      	nop
      }
      break;
 8005612:	e004      	b.n	800561e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fceb 	bl	8005ff2 <USBD_CtlError>
      break;
 800561c:	bf00      	nop
  }

  return ret;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	889b      	ldrh	r3, [r3, #4]
 800563a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d007      	beq.n	8005658 <USBD_StdEPReq+0x30>
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	f200 817f 	bhi.w	800594c <USBD_StdEPReq+0x324>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02a      	beq.n	80056a8 <USBD_StdEPReq+0x80>
 8005652:	2b20      	cmp	r3, #32
 8005654:	f040 817a 	bne.w	800594c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fe85 	bl	800536c <USBD_CoreFindEP>
 8005662:	4603      	mov	r3, r0
 8005664:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005666:	7b7b      	ldrb	r3, [r7, #13]
 8005668:	2bff      	cmp	r3, #255	@ 0xff
 800566a:	f000 8174 	beq.w	8005956 <USBD_StdEPReq+0x32e>
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f040 8170 	bne.w	8005956 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005676:	7b7a      	ldrb	r2, [r7, #13]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800567e:	7b7a      	ldrb	r2, [r7, #13]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	32ae      	adds	r2, #174	@ 0xae
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8163 	beq.w	8005956 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005690:	7b7a      	ldrb	r2, [r7, #13]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32ae      	adds	r2, #174	@ 0xae
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056a6:	e156      	b.n	8005956 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d008      	beq.n	80056c2 <USBD_StdEPReq+0x9a>
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	f300 8145 	bgt.w	8005940 <USBD_StdEPReq+0x318>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 809b 	beq.w	80057f2 <USBD_StdEPReq+0x1ca>
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d03c      	beq.n	800573a <USBD_StdEPReq+0x112>
 80056c0:	e13e      	b.n	8005940 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d002      	beq.n	80056d4 <USBD_StdEPReq+0xac>
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d016      	beq.n	8005700 <USBD_StdEPReq+0xd8>
 80056d2:	e02c      	b.n	800572e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <USBD_StdEPReq+0xce>
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b80      	cmp	r3, #128	@ 0x80
 80056de:	d00a      	beq.n	80056f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 f97b 	bl	80069e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056ea:	2180      	movs	r1, #128	@ 0x80
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f977 	bl	80069e0 <USBD_LL_StallEP>
 80056f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056f4:	e020      	b.n	8005738 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fc7a 	bl	8005ff2 <USBD_CtlError>
              break;
 80056fe:	e01b      	b.n	8005738 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	885b      	ldrh	r3, [r3, #2]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <USBD_StdEPReq+0xfe>
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	2b80      	cmp	r3, #128	@ 0x80
 8005712:	d008      	beq.n	8005726 <USBD_StdEPReq+0xfe>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	88db      	ldrh	r3, [r3, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 f95d 	bl	80069e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fd2e 	bl	8006188 <USBD_CtlSendStatus>

              break;
 800572c:	e004      	b.n	8005738 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fc5e 	bl	8005ff2 <USBD_CtlError>
              break;
 8005736:	bf00      	nop
          }
          break;
 8005738:	e107      	b.n	800594a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d002      	beq.n	800574c <USBD_StdEPReq+0x124>
 8005746:	2b03      	cmp	r3, #3
 8005748:	d016      	beq.n	8005778 <USBD_StdEPReq+0x150>
 800574a:	e04b      	b.n	80057e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <USBD_StdEPReq+0x146>
 8005752:	7bbb      	ldrb	r3, [r7, #14]
 8005754:	2b80      	cmp	r3, #128	@ 0x80
 8005756:	d00a      	beq.n	800576e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 f93f 	bl	80069e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 f93b 	bl	80069e0 <USBD_LL_StallEP>
 800576a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800576c:	e040      	b.n	80057f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fc3e 	bl	8005ff2 <USBD_CtlError>
              break;
 8005776:	e03b      	b.n	80057f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	885b      	ldrh	r3, [r3, #2]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d136      	bne.n	80057ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 f945 	bl	8006a1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fcf7 	bl	8006188 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fde4 	bl	800536c <USBD_CoreFindEP>
 80057a4:	4603      	mov	r3, r0
 80057a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057a8:	7b7b      	ldrb	r3, [r7, #13]
 80057aa:	2bff      	cmp	r3, #255	@ 0xff
 80057ac:	d01f      	beq.n	80057ee <USBD_StdEPReq+0x1c6>
 80057ae:	7b7b      	ldrb	r3, [r7, #13]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11c      	bne.n	80057ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80057b4:	7b7a      	ldrb	r2, [r7, #13]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80057bc:	7b7a      	ldrb	r2, [r7, #13]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32ae      	adds	r2, #174	@ 0xae
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057cc:	7b7a      	ldrb	r2, [r7, #13]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32ae      	adds	r2, #174	@ 0xae
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80057e2:	e004      	b.n	80057ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fc03 	bl	8005ff2 <USBD_CtlError>
              break;
 80057ec:	e000      	b.n	80057f0 <USBD_StdEPReq+0x1c8>
              break;
 80057ee:	bf00      	nop
          }
          break;
 80057f0:	e0ab      	b.n	800594a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d002      	beq.n	8005804 <USBD_StdEPReq+0x1dc>
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d032      	beq.n	8005868 <USBD_StdEPReq+0x240>
 8005802:	e097      	b.n	8005934 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <USBD_StdEPReq+0x1f2>
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	2b80      	cmp	r3, #128	@ 0x80
 800580e:	d004      	beq.n	800581a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fbed 	bl	8005ff2 <USBD_CtlError>
                break;
 8005818:	e091      	b.n	800593e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800581a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da0b      	bge.n	800583a <USBD_StdEPReq+0x212>
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3310      	adds	r3, #16
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	3304      	adds	r3, #4
 8005838:	e00b      	b.n	8005852 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2202      	movs	r2, #2
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fc37 	bl	80060d4 <USBD_CtlSendData>
              break;
 8005866:	e06a      	b.n	800593e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800586c:	2b00      	cmp	r3, #0
 800586e:	da11      	bge.n	8005894 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3324      	adds	r3, #36	@ 0x24
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d117      	bne.n	80058ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fbb0 	bl	8005ff2 <USBD_CtlError>
                  break;
 8005892:	e054      	b.n	800593e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb9d 	bl	8005ff2 <USBD_CtlError>
                  break;
 80058b8:	e041      	b.n	800593e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da0b      	bge.n	80058da <USBD_StdEPReq+0x2b2>
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	3310      	adds	r3, #16
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	3304      	adds	r3, #4
 80058d8:	e00b      	b.n	80058f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	3304      	adds	r3, #4
 80058f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <USBD_StdEPReq+0x2d8>
 80058fa:	7bbb      	ldrb	r3, [r7, #14]
 80058fc:	2b80      	cmp	r3, #128	@ 0x80
 80058fe:	d103      	bne.n	8005908 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e00e      	b.n	8005926 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 f8a5 	bl	8006a5c <USBD_LL_IsStallEP>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2202      	movs	r2, #2
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fbd1 	bl	80060d4 <USBD_CtlSendData>
              break;
 8005932:	e004      	b.n	800593e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb5b 	bl	8005ff2 <USBD_CtlError>
              break;
 800593c:	bf00      	nop
          }
          break;
 800593e:	e004      	b.n	800594a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fb55 	bl	8005ff2 <USBD_CtlError>
          break;
 8005948:	bf00      	nop
      }
      break;
 800594a:	e005      	b.n	8005958 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fb4f 	bl	8005ff2 <USBD_CtlError>
      break;
 8005954:	e000      	b.n	8005958 <USBD_StdEPReq+0x330>
      break;
 8005956:	bf00      	nop
  }

  return ret;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	885b      	ldrh	r3, [r3, #2]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	2b06      	cmp	r3, #6
 8005986:	f200 8128 	bhi.w	8005bda <USBD_GetDescriptor+0x276>
 800598a:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <USBD_GetDescriptor+0x2c>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059c5 	.word	0x080059c5
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005bdb 	.word	0x08005bdb
 80059a0:	08005bdb 	.word	0x08005bdb
 80059a4:	08005b7b 	.word	0x08005b7b
 80059a8:	08005ba7 	.word	0x08005ba7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	7c12      	ldrb	r2, [r2, #16]
 80059b8:	f107 0108 	add.w	r1, r7, #8
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
 80059c0:	60f8      	str	r0, [r7, #12]
      break;
 80059c2:	e112      	b.n	8005bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7c1b      	ldrb	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	f107 0208 	add.w	r2, r7, #8
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
 80059dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059e6:	e100      	b.n	8005bea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	f107 0208 	add.w	r2, r7, #8
 80059f4:	4610      	mov	r0, r2
 80059f6:	4798      	blx	r3
 80059f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	2202      	movs	r2, #2
 8005a00:	701a      	strb	r2, [r3, #0]
      break;
 8005a02:	e0f2      	b.n	8005bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	885b      	ldrh	r3, [r3, #2]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b05      	cmp	r3, #5
 8005a0c:	f200 80ac 	bhi.w	8005b68 <USBD_GetDescriptor+0x204>
 8005a10:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <USBD_GetDescriptor+0xb4>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a65 	.word	0x08005a65
 8005a20:	08005a99 	.word	0x08005a99
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005b01 	.word	0x08005b01
 8005a2c:	08005b35 	.word	0x08005b35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7c12      	ldrb	r2, [r2, #16]
 8005a48:	f107 0108 	add.w	r1, r7, #8
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a52:	e091      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 facb 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005a5c:	7afb      	ldrb	r3, [r7, #11]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	72fb      	strb	r3, [r7, #11]
          break;
 8005a62:	e089      	b.n	8005b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	7c12      	ldrb	r2, [r2, #16]
 8005a7c:	f107 0108 	add.w	r1, r7, #8
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
 8005a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a86:	e077      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fab1 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	3301      	adds	r3, #1
 8005a94:	72fb      	strb	r3, [r7, #11]
          break;
 8005a96:	e06f      	b.n	8005b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	7c12      	ldrb	r2, [r2, #16]
 8005ab0:	f107 0108 	add.w	r1, r7, #8
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aba:	e05d      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa97 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aca:	e055      	b.n	8005b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	7c12      	ldrb	r2, [r2, #16]
 8005ae4:	f107 0108 	add.w	r1, r7, #8
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aee:	e043      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa7d 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	3301      	adds	r3, #1
 8005afc:	72fb      	strb	r3, [r7, #11]
          break;
 8005afe:	e03b      	b.n	8005b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	7c12      	ldrb	r2, [r2, #16]
 8005b18:	f107 0108 	add.w	r1, r7, #8
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
 8005b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b22:	e029      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa63 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	72fb      	strb	r3, [r7, #11]
          break;
 8005b32:	e021      	b.n	8005b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	7c12      	ldrb	r2, [r2, #16]
 8005b4c:	f107 0108 	add.w	r1, r7, #8
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
 8005b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b56:	e00f      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa49 	bl	8005ff2 <USBD_CtlError>
            err++;
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	3301      	adds	r3, #1
 8005b64:	72fb      	strb	r3, [r7, #11]
          break;
 8005b66:	e007      	b.n	8005b78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa41 	bl	8005ff2 <USBD_CtlError>
          err++;
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	3301      	adds	r3, #1
 8005b74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005b76:	bf00      	nop
      }
      break;
 8005b78:	e037      	b.n	8005bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	7c1b      	ldrb	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8a:	f107 0208 	add.w	r2, r7, #8
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4798      	blx	r3
 8005b92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b94:	e029      	b.n	8005bea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa2a 	bl	8005ff2 <USBD_CtlError>
        err++;
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ba4:	e021      	b.n	8005bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7c1b      	ldrb	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10d      	bne.n	8005bca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f107 0208 	add.w	r2, r7, #8
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
 8005bbe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	2207      	movs	r2, #7
 8005bc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bc8:	e00f      	b.n	8005bea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa10 	bl	8005ff2 <USBD_CtlError>
        err++;
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd8:	e007      	b.n	8005bea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa08 	bl	8005ff2 <USBD_CtlError>
      err++;
 8005be2:	7afb      	ldrb	r3, [r7, #11]
 8005be4:	3301      	adds	r3, #1
 8005be6:	72fb      	strb	r3, [r7, #11]
      break;
 8005be8:	bf00      	nop
  }

  if (err != 0U)
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d11e      	bne.n	8005c2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d016      	beq.n	8005c26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88da      	ldrh	r2, [r3, #6]
 8005c02:	893b      	ldrh	r3, [r7, #8]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bf28      	it	cs
 8005c08:	4613      	movcs	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c0e:	893b      	ldrh	r3, [r7, #8]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68f9      	ldr	r1, [r7, #12]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa5d 	bl	80060d4 <USBD_CtlSendData>
 8005c1a:	e009      	b.n	8005c30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9e7 	bl	8005ff2 <USBD_CtlError>
 8005c24:	e004      	b.n	8005c30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 faae 	bl	8006188 <USBD_CtlSendStatus>
 8005c2c:	e000      	b.n	8005c30 <USBD_GetDescriptor+0x2cc>
    return;
 8005c2e:	bf00      	nop
  }
}
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop

08005c38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	889b      	ldrh	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d131      	bne.n	8005cae <USBD_SetAddress+0x76>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	88db      	ldrh	r3, [r3, #6]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d12d      	bne.n	8005cae <USBD_SetAddress+0x76>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	885b      	ldrh	r3, [r3, #2]
 8005c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c58:	d829      	bhi.n	8005cae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d104      	bne.n	8005c7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9bc 	bl	8005ff2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7a:	e01d      	b.n	8005cb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 ff13 	bl	8006ab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa7a 	bl	8006188 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca2:	e009      	b.n	8005cb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cac:	e004      	b.n	8005cb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f99e 	bl	8005ff2 <USBD_CtlError>
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	885b      	ldrh	r3, [r3, #2]
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005cd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d905      	bls.n	8005cec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f985 	bl	8005ff2 <USBD_CtlError>
    return USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e08c      	b.n	8005e06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d002      	beq.n	8005cfe <USBD_SetConfig+0x3e>
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d029      	beq.n	8005d50 <USBD_SetConfig+0x90>
 8005cfc:	e075      	b.n	8005dea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005cfe:	4b44      	ldr	r3, [pc, #272]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d06:	4b42      	ldr	r3, [pc, #264]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d10:	4b3f      	ldr	r3, [pc, #252]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe ffe3 	bl	8004ce2 <USBD_SetClassConfig>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f962 	bl	8005ff2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d36:	e065      	b.n	8005e04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa25 	bl	8006188 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d46:	e05d      	b.n	8005e04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa1d 	bl	8006188 <USBD_CtlSendStatus>
      break;
 8005d4e:	e059      	b.n	8005e04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005d50:	4b2f      	ldr	r3, [pc, #188]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d112      	bne.n	8005d7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005d60:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d6a:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fe ffd2 	bl	8004d1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa06 	bl	8006188 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d7c:	e042      	b.n	8005e04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005d7e:	4b24      	ldr	r3, [pc, #144]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d02a      	beq.n	8005de2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fe ffc0 	bl	8004d1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fe ff99 	bl	8004ce2 <USBD_SetClassConfig>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f918 	bl	8005ff2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fe ffa5 	bl	8004d1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005dd8:	e014      	b.n	8005e04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9d4 	bl	8006188 <USBD_CtlSendStatus>
      break;
 8005de0:	e010      	b.n	8005e04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9d0 	bl	8006188 <USBD_CtlSendStatus>
      break;
 8005de8:	e00c      	b.n	8005e04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f900 	bl	8005ff2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005df2:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <USBD_SetConfig+0x150>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fe ff8e 	bl	8004d1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	73fb      	strb	r3, [r7, #15]
      break;
 8005e02:	bf00      	nop
  }

  return ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000224 	.word	0x20000224

08005e14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d004      	beq.n	8005e30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f8e2 	bl	8005ff2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e2e:	e023      	b.n	8005e78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	dc02      	bgt.n	8005e42 <USBD_GetConfig+0x2e>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dc03      	bgt.n	8005e48 <USBD_GetConfig+0x34>
 8005e40:	e015      	b.n	8005e6e <USBD_GetConfig+0x5a>
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d00b      	beq.n	8005e5e <USBD_GetConfig+0x4a>
 8005e46:	e012      	b.n	8005e6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3308      	adds	r3, #8
 8005e52:	2201      	movs	r2, #1
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f93c 	bl	80060d4 <USBD_CtlSendData>
        break;
 8005e5c:	e00c      	b.n	8005e78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3304      	adds	r3, #4
 8005e62:	2201      	movs	r2, #1
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f934 	bl	80060d4 <USBD_CtlSendData>
        break;
 8005e6c:	e004      	b.n	8005e78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f8be 	bl	8005ff2 <USBD_CtlError>
        break;
 8005e76:	bf00      	nop
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d81e      	bhi.n	8005ed6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	88db      	ldrh	r3, [r3, #6]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d004      	beq.n	8005eaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8a5 	bl	8005ff2 <USBD_CtlError>
        break;
 8005ea8:	e01a      	b.n	8005ee0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f043 0202 	orr.w	r2, r3, #2
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	2202      	movs	r2, #2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f900 	bl	80060d4 <USBD_CtlSendData>
      break;
 8005ed4:	e004      	b.n	8005ee0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f88a 	bl	8005ff2 <USBD_CtlError>
      break;
 8005ede:	bf00      	nop
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d107      	bne.n	8005f0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f940 	bl	8006188 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f08:	e013      	b.n	8005f32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	885b      	ldrh	r3, [r3, #2]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d10b      	bne.n	8005f2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f930 	bl	8006188 <USBD_CtlSendStatus>
}
 8005f28:	e003      	b.n	8005f32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f860 	bl	8005ff2 <USBD_CtlError>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d80b      	bhi.n	8005f6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	885b      	ldrh	r3, [r3, #2]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d10c      	bne.n	8005f74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f910 	bl	8006188 <USBD_CtlSendStatus>
      }
      break;
 8005f68:	e004      	b.n	8005f74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f840 	bl	8005ff2 <USBD_CtlError>
      break;
 8005f72:	e000      	b.n	8005f76 <USBD_ClrFeature+0x3c>
      break;
 8005f74:	bf00      	nop
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fa40 	bl	800542e <SWAPBYTE>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff fa33 	bl	800542e <SWAPBYTE>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fa26 	bl	800542e <SWAPBYTE>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	80da      	strh	r2, [r3, #6]
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ffc:	2180      	movs	r1, #128	@ 0x80
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fcee 	bl	80069e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006004:	2100      	movs	r1, #0
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fcea 	bl	80069e0 <USBD_LL_StallEP>
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d036      	beq.n	8006098 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800602e:	6938      	ldr	r0, [r7, #16]
 8006030:	f000 f836 	bl	80060a0 <USBD_GetLen>
 8006034:	4603      	mov	r3, r0
 8006036:	3301      	adds	r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	4413      	add	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	701a      	strb	r2, [r3, #0]
  idx++;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	3301      	adds	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4413      	add	r3, r2
 800605a:	2203      	movs	r2, #3
 800605c:	701a      	strb	r2, [r3, #0]
  idx++;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	3301      	adds	r3, #1
 8006062:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006064:	e013      	b.n	800608e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	4413      	add	r3, r2
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	7812      	ldrb	r2, [r2, #0]
 8006070:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3301      	adds	r3, #1
 8006076:	613b      	str	r3, [r7, #16]
    idx++;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	3301      	adds	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4413      	add	r3, r2
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
    idx++;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	3301      	adds	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e7      	bne.n	8006066 <USBD_GetString+0x52>
 8006096:	e000      	b.n	800609a <USBD_GetString+0x86>
    return;
 8006098:	bf00      	nop
  }
}
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060b0:	e005      	b.n	80060be <USBD_GetLen+0x1e>
  {
    len++;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	3301      	adds	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f5      	bne.n	80060b2 <USBD_GetLen+0x12>
  }

  return len;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	2100      	movs	r1, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fcf9 	bl	8006af2 <USBD_LL_Transmit>

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	2100      	movs	r1, #0
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fce8 	bl	8006af2 <USBD_LL_Transmit>

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2203      	movs	r2, #3
 800613c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	2100      	movs	r1, #0
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fcec 	bl	8006b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	2100      	movs	r1, #0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fcdb 	bl	8006b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2204      	movs	r2, #4
 8006194:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fca7 	bl	8006af2 <USBD_LL_Transmit>

  return USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2205      	movs	r2, #5
 80061ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061be:	2300      	movs	r3, #0
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fcb5 	bl	8006b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061d8:	2200      	movs	r2, #0
 80061da:	4912      	ldr	r1, [pc, #72]	@ (8006224 <MX_USB_DEVICE_Init+0x50>)
 80061dc:	4812      	ldr	r0, [pc, #72]	@ (8006228 <MX_USB_DEVICE_Init+0x54>)
 80061de:	f7fe fd03 	bl	8004be8 <USBD_Init>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061e8:	f7fa fadc 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061ec:	490f      	ldr	r1, [pc, #60]	@ (800622c <MX_USB_DEVICE_Init+0x58>)
 80061ee:	480e      	ldr	r0, [pc, #56]	@ (8006228 <MX_USB_DEVICE_Init+0x54>)
 80061f0:	f7fe fd2a 	bl	8004c48 <USBD_RegisterClass>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061fa:	f7fa fad3 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061fe:	490c      	ldr	r1, [pc, #48]	@ (8006230 <MX_USB_DEVICE_Init+0x5c>)
 8006200:	4809      	ldr	r0, [pc, #36]	@ (8006228 <MX_USB_DEVICE_Init+0x54>)
 8006202:	f7fe fc61 	bl	8004ac8 <USBD_CDC_RegisterInterface>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800620c:	f7fa faca 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006210:	4805      	ldr	r0, [pc, #20]	@ (8006228 <MX_USB_DEVICE_Init+0x54>)
 8006212:	f7fe fd4f 	bl	8004cb4 <USBD_Start>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800621c:	f7fa fac2 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006220:	bf00      	nop
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200000b0 	.word	0x200000b0
 8006228:	20000228 	.word	0x20000228
 800622c:	2000001c 	.word	0x2000001c
 8006230:	2000009c 	.word	0x2000009c

08006234 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006238:	2200      	movs	r2, #0
 800623a:	4905      	ldr	r1, [pc, #20]	@ (8006250 <CDC_Init_FS+0x1c>)
 800623c:	4805      	ldr	r0, [pc, #20]	@ (8006254 <CDC_Init_FS+0x20>)
 800623e:	f7fe fc5d 	bl	8004afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006242:	4905      	ldr	r1, [pc, #20]	@ (8006258 <CDC_Init_FS+0x24>)
 8006244:	4803      	ldr	r0, [pc, #12]	@ (8006254 <CDC_Init_FS+0x20>)
 8006246:	f7fe fc7b 	bl	8004b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800624a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800624c:	4618      	mov	r0, r3
 800624e:	bd80      	pop	{r7, pc}
 8006250:	2000090c 	.word	0x2000090c
 8006254:	20000228 	.word	0x20000228
 8006258:	2000050c 	.word	0x2000050c

0800625c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006260:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006262:	4618      	mov	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	6039      	str	r1, [r7, #0]
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	4613      	mov	r3, r2
 800627a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b23      	cmp	r3, #35	@ 0x23
 8006280:	f200 808c 	bhi.w	800639c <CDC_Control_FS+0x130>
 8006284:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <CDC_Control_FS+0x20>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	0800639d 	.word	0x0800639d
 8006290:	0800639d 	.word	0x0800639d
 8006294:	0800639d 	.word	0x0800639d
 8006298:	0800639d 	.word	0x0800639d
 800629c:	0800639d 	.word	0x0800639d
 80062a0:	0800639d 	.word	0x0800639d
 80062a4:	0800639d 	.word	0x0800639d
 80062a8:	0800639d 	.word	0x0800639d
 80062ac:	0800639d 	.word	0x0800639d
 80062b0:	0800639d 	.word	0x0800639d
 80062b4:	0800639d 	.word	0x0800639d
 80062b8:	0800639d 	.word	0x0800639d
 80062bc:	0800639d 	.word	0x0800639d
 80062c0:	0800639d 	.word	0x0800639d
 80062c4:	0800639d 	.word	0x0800639d
 80062c8:	0800639d 	.word	0x0800639d
 80062cc:	0800639d 	.word	0x0800639d
 80062d0:	0800639d 	.word	0x0800639d
 80062d4:	0800639d 	.word	0x0800639d
 80062d8:	0800639d 	.word	0x0800639d
 80062dc:	0800639d 	.word	0x0800639d
 80062e0:	0800639d 	.word	0x0800639d
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	0800639d 	.word	0x0800639d
 80062ec:	0800639d 	.word	0x0800639d
 80062f0:	0800639d 	.word	0x0800639d
 80062f4:	0800639d 	.word	0x0800639d
 80062f8:	0800639d 	.word	0x0800639d
 80062fc:	0800639d 	.word	0x0800639d
 8006300:	0800639d 	.word	0x0800639d
 8006304:	0800639d 	.word	0x0800639d
 8006308:	0800639d 	.word	0x0800639d
 800630c:	0800631d 	.word	0x0800631d
 8006310:	08006357 	.word	0x08006357
 8006314:	0800639d 	.word	0x0800639d
 8006318:	0800639d 	.word	0x0800639d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781a      	ldrb	r2, [r3, #0]
 8006320:	4b22      	ldr	r3, [pc, #136]	@ (80063ac <CDC_Control_FS+0x140>)
 8006322:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785a      	ldrb	r2, [r3, #1]
 8006328:	4b20      	ldr	r3, [pc, #128]	@ (80063ac <CDC_Control_FS+0x140>)
 800632a:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	789a      	ldrb	r2, [r3, #2]
 8006330:	4b1e      	ldr	r3, [pc, #120]	@ (80063ac <CDC_Control_FS+0x140>)
 8006332:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	78da      	ldrb	r2, [r3, #3]
 8006338:	4b1c      	ldr	r3, [pc, #112]	@ (80063ac <CDC_Control_FS+0x140>)
 800633a:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	791a      	ldrb	r2, [r3, #4]
 8006340:	4b1a      	ldr	r3, [pc, #104]	@ (80063ac <CDC_Control_FS+0x140>)
 8006342:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	795a      	ldrb	r2, [r3, #5]
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <CDC_Control_FS+0x140>)
 800634a:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	799a      	ldrb	r2, [r3, #6]
 8006350:	4b16      	ldr	r3, [pc, #88]	@ (80063ac <CDC_Control_FS+0x140>)
 8006352:	719a      	strb	r2, [r3, #6]

    break;
 8006354:	e023      	b.n	800639e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buffer[0];
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <CDC_Control_FS+0x140>)
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	4a12      	ldr	r2, [pc, #72]	@ (80063ac <CDC_Control_FS+0x140>)
 8006364:	7852      	ldrb	r2, [r2, #1]
 8006366:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	3302      	adds	r3, #2
 800636c:	4a0f      	ldr	r2, [pc, #60]	@ (80063ac <CDC_Control_FS+0x140>)
 800636e:	7892      	ldrb	r2, [r2, #2]
 8006370:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	3303      	adds	r3, #3
 8006376:	4a0d      	ldr	r2, [pc, #52]	@ (80063ac <CDC_Control_FS+0x140>)
 8006378:	78d2      	ldrb	r2, [r2, #3]
 800637a:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	3304      	adds	r3, #4
 8006380:	4a0a      	ldr	r2, [pc, #40]	@ (80063ac <CDC_Control_FS+0x140>)
 8006382:	7912      	ldrb	r2, [r2, #4]
 8006384:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3305      	adds	r3, #5
 800638a:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <CDC_Control_FS+0x140>)
 800638c:	7952      	ldrb	r2, [r2, #5]
 800638e:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	3306      	adds	r3, #6
 8006394:	4a05      	ldr	r2, [pc, #20]	@ (80063ac <CDC_Control_FS+0x140>)
 8006396:	7992      	ldrb	r2, [r2, #6]
 8006398:	701a      	strb	r2, [r3, #0]

    break;
 800639a:	e000      	b.n	800639e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800639c:	bf00      	nop
  }

  return (USBD_OK);
 800639e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000504 	.word	0x20000504

080063b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4809      	ldr	r0, [pc, #36]	@ (80063e4 <CDC_Receive_FS+0x34>)
 80063be:	f7fe fbbf 	bl	8004b40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063c2:	4808      	ldr	r0, [pc, #32]	@ (80063e4 <CDC_Receive_FS+0x34>)
 80063c4:	f7fe fbda 	bl	8004b7c <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t) *Len;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	73fb      	strb	r3, [r7, #15]
  USBRxHandler(UserRxBufferFS,len);
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	4619      	mov	r1, r3
 80063d2:	4805      	ldr	r0, [pc, #20]	@ (80063e8 <CDC_Receive_FS+0x38>)
 80063d4:	f7fa f876 	bl	80004c4 <USBRxHandler>
  return (USBD_OK);
 80063d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000228 	.word	0x20000228
 80063e8:	2000050c 	.word	0x2000050c

080063ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80063fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006402:	4618      	mov	r0, r3
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	6039      	str	r1, [r7, #0]
 800641a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2212      	movs	r2, #18
 8006420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006422:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	200000cc 	.word	0x200000cc

08006434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2204      	movs	r2, #4
 8006444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006446:	4b03      	ldr	r3, [pc, #12]	@ (8006454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	200000e0 	.word	0x200000e0

08006458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4907      	ldr	r1, [pc, #28]	@ (800648c <USBD_FS_ProductStrDescriptor+0x34>)
 800646e:	4808      	ldr	r0, [pc, #32]	@ (8006490 <USBD_FS_ProductStrDescriptor+0x38>)
 8006470:	f7ff fdd0 	bl	8006014 <USBD_GetString>
 8006474:	e004      	b.n	8006480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4904      	ldr	r1, [pc, #16]	@ (800648c <USBD_FS_ProductStrDescriptor+0x34>)
 800647a:	4805      	ldr	r0, [pc, #20]	@ (8006490 <USBD_FS_ProductStrDescriptor+0x38>)
 800647c:	f7ff fdca 	bl	8006014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006480:	4b02      	ldr	r3, [pc, #8]	@ (800648c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000d0c 	.word	0x20000d0c
 8006490:	08006cb0 	.word	0x08006cb0

08006494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	4904      	ldr	r1, [pc, #16]	@ (80064b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064a4:	4804      	ldr	r0, [pc, #16]	@ (80064b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064a6:	f7ff fdb5 	bl	8006014 <USBD_GetString>
  return USBD_StrDesc;
 80064aa:	4b02      	ldr	r3, [pc, #8]	@ (80064b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000d0c 	.word	0x20000d0c
 80064b8:	08006cc8 	.word	0x08006cc8

080064bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	221a      	movs	r2, #26
 80064cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064ce:	f000 f843 	bl	8006558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064d2:	4b02      	ldr	r3, [pc, #8]	@ (80064dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200000e4 	.word	0x200000e4

080064e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4907      	ldr	r1, [pc, #28]	@ (8006514 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064f6:	4808      	ldr	r0, [pc, #32]	@ (8006518 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064f8:	f7ff fd8c 	bl	8006014 <USBD_GetString>
 80064fc:	e004      	b.n	8006508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	4904      	ldr	r1, [pc, #16]	@ (8006514 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006502:	4805      	ldr	r0, [pc, #20]	@ (8006518 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006504:	f7ff fd86 	bl	8006014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006508:	4b02      	ldr	r3, [pc, #8]	@ (8006514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000d0c 	.word	0x20000d0c
 8006518:	08006cdc 	.word	0x08006cdc

0800651c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	4907      	ldr	r1, [pc, #28]	@ (8006550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006532:	4808      	ldr	r0, [pc, #32]	@ (8006554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006534:	f7ff fd6e 	bl	8006014 <USBD_GetString>
 8006538:	e004      	b.n	8006544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4904      	ldr	r1, [pc, #16]	@ (8006550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800653e:	4805      	ldr	r0, [pc, #20]	@ (8006554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006540:	f7ff fd68 	bl	8006014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006544:	4b02      	ldr	r3, [pc, #8]	@ (8006550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000d0c 	.word	0x20000d0c
 8006554:	08006ce8 	.word	0x08006ce8

08006558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4413      	add	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800656c:	2208      	movs	r2, #8
 800656e:	4906      	ldr	r1, [pc, #24]	@ (8006588 <Get_SerialNum+0x30>)
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f80d 	bl	8006590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006576:	2204      	movs	r2, #4
 8006578:	4904      	ldr	r1, [pc, #16]	@ (800658c <Get_SerialNum+0x34>)
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f808 	bl	8006590 <IntToUnicode>
  }
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200000e6 	.word	0x200000e6
 800658c:	200000f6 	.word	0x200000f6

08006590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
 80065a6:	e027      	b.n	80065f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	0f1b      	lsrs	r3, r3, #28
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d80b      	bhi.n	80065c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	0f1b      	lsrs	r3, r3, #28
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4619      	mov	r1, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	440b      	add	r3, r1
 80065c0:	3230      	adds	r2, #48	@ 0x30
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	e00a      	b.n	80065de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	0f1b      	lsrs	r3, r3, #28
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4619      	mov	r1, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	440b      	add	r3, r1
 80065d8:	3237      	adds	r2, #55	@ 0x37
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	3301      	adds	r3, #1
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	3301      	adds	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
 80065f8:	7dfa      	ldrb	r2, [r7, #23]
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d3d3      	bcc.n	80065a8 <IntToUnicode+0x18>
  }
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006630:	d13a      	bne.n	80066a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	4b1e      	ldr	r3, [pc, #120]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	4a1d      	ldr	r2, [pc, #116]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	6313      	str	r3, [r2, #48]	@ 0x30
 8006642:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800664e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006654:	2302      	movs	r3, #2
 8006656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800665c:	2303      	movs	r3, #3
 800665e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006660:	230a      	movs	r3, #10
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4619      	mov	r1, r3
 800666a:	4812      	ldr	r0, [pc, #72]	@ (80066b4 <HAL_PCD_MspInit+0xa4>)
 800666c:	f7fa fae6 	bl	8000c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006674:	4a0e      	ldr	r2, [pc, #56]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667a:	6353      	str	r3, [r2, #52]	@ 0x34
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006684:	4a0a      	ldr	r2, [pc, #40]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 8006686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800668a:	6453      	str	r3, [r2, #68]	@ 0x44
 800668c:	4b08      	ldr	r3, [pc, #32]	@ (80066b0 <HAL_PCD_MspInit+0xa0>)
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006698:	2200      	movs	r2, #0
 800669a:	2100      	movs	r1, #0
 800669c:	2043      	movs	r0, #67	@ 0x43
 800669e:	f7fa fa96 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066a2:	2043      	movs	r0, #67	@ 0x43
 80066a4:	f7fa faaf 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066a8:	bf00      	nop
 80066aa:	3728      	adds	r7, #40	@ 0x28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40020000 	.word	0x40020000

080066b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fe fb3d 	bl	8004d4e <USBD_LL_SetupStage>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	4619      	mov	r1, r3
 8006706:	f7fe fb77 	bl	8004df8 <USBD_LL_DataOutStage>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	3320      	adds	r3, #32
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	4619      	mov	r1, r3
 800673a:	f7fe fc10 	bl	8004f5e <USBD_LL_DataInStage>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fd4a 	bl	80051ee <USBD_LL_SOF>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	79db      	ldrb	r3, [r3, #7]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d001      	beq.n	800677a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006776:	f7fa f815 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006780:	7bfa      	ldrb	r2, [r7, #15]
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe fcee 	bl	8005166 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe fc96 	bl	80050c2 <USBD_LL_Reset>
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fce9 	bl	8005186 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7adb      	ldrb	r3, [r3, #11]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <HAL_PCD_SuspendCallback+0x48>)
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	4a03      	ldr	r2, [pc, #12]	@ (80067e8 <HAL_PCD_SuspendCallback+0x48>)
 80067da:	f043 0306 	orr.w	r3, r3, #6
 80067de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed00 	.word	0xe000ed00

080067ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fcdf 	bl	80051be <USBD_LL_Resume>
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fd37 	bl	8005292 <USBD_LL_IsoOUTIncomplete>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fcf3 	bl	800522e <USBD_LL_IsoINIncomplete>
}
 8006848:	bf00      	nop
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fd49 	bl	80052f6 <USBD_LL_DevConnected>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fd46 	bl	800530c <USBD_LL_DevDisconnected>
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d13c      	bne.n	8006912 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006898:	4a20      	ldr	r2, [pc, #128]	@ (800691c <USBD_LL_Init+0x94>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1e      	ldr	r2, [pc, #120]	@ (800691c <USBD_LL_Init+0x94>)
 80068a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068a8:	4b1c      	ldr	r3, [pc, #112]	@ (800691c <USBD_LL_Init+0x94>)
 80068aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80068ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80068b0:	4b1a      	ldr	r3, [pc, #104]	@ (800691c <USBD_LL_Init+0x94>)
 80068b2:	2204      	movs	r2, #4
 80068b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068b6:	4b19      	ldr	r3, [pc, #100]	@ (800691c <USBD_LL_Init+0x94>)
 80068b8:	2202      	movs	r2, #2
 80068ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068bc:	4b17      	ldr	r3, [pc, #92]	@ (800691c <USBD_LL_Init+0x94>)
 80068be:	2200      	movs	r2, #0
 80068c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80068c2:	4b16      	ldr	r3, [pc, #88]	@ (800691c <USBD_LL_Init+0x94>)
 80068c4:	2202      	movs	r2, #2
 80068c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068c8:	4b14      	ldr	r3, [pc, #80]	@ (800691c <USBD_LL_Init+0x94>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80068ce:	4b13      	ldr	r3, [pc, #76]	@ (800691c <USBD_LL_Init+0x94>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <USBD_LL_Init+0x94>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <USBD_LL_Init+0x94>)
 80068dc:	2200      	movs	r2, #0
 80068de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <USBD_LL_Init+0x94>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068e6:	480d      	ldr	r0, [pc, #52]	@ (800691c <USBD_LL_Init+0x94>)
 80068e8:	f7fa fb2c 	bl	8000f44 <HAL_PCD_Init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80068f2:	f7f9 ff57 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80068f6:	2180      	movs	r1, #128	@ 0x80
 80068f8:	4808      	ldr	r0, [pc, #32]	@ (800691c <USBD_LL_Init+0x94>)
 80068fa:	f7fb fd56 	bl	80023aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80068fe:	2240      	movs	r2, #64	@ 0x40
 8006900:	2100      	movs	r1, #0
 8006902:	4806      	ldr	r0, [pc, #24]	@ (800691c <USBD_LL_Init+0x94>)
 8006904:	f7fb fd0a 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006908:	2280      	movs	r2, #128	@ 0x80
 800690a:	2101      	movs	r1, #1
 800690c:	4803      	ldr	r0, [pc, #12]	@ (800691c <USBD_LL_Init+0x94>)
 800690e:	f7fb fd05 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000f0c 	.word	0x20000f0c

08006920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006936:	4618      	mov	r0, r3
 8006938:	f7fa fc13 	bl	8001162 <HAL_PCD_Start>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 f942 	bl	8006bcc <USBD_Get_USB_Status>
 8006948:	4603      	mov	r3, r0
 800694a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800694c:	7bbb      	ldrb	r3, [r7, #14]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	4608      	mov	r0, r1
 8006960:	4611      	mov	r1, r2
 8006962:	461a      	mov	r2, r3
 8006964:	4603      	mov	r3, r0
 8006966:	70fb      	strb	r3, [r7, #3]
 8006968:	460b      	mov	r3, r1
 800696a:	70bb      	strb	r3, [r7, #2]
 800696c:	4613      	mov	r3, r2
 800696e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800697e:	78bb      	ldrb	r3, [r7, #2]
 8006980:	883a      	ldrh	r2, [r7, #0]
 8006982:	78f9      	ldrb	r1, [r7, #3]
 8006984:	f7fb f8e7 	bl	8001b56 <HAL_PCD_EP_Open>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f91c 	bl	8006bcc <USBD_Get_USB_Status>
 8006994:	4603      	mov	r3, r0
 8006996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006998:	7bbb      	ldrb	r3, [r7, #14]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fb f930 	bl	8001c26 <HAL_PCD_EP_Close>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f8fd 	bl	8006bcc <USBD_Get_USB_Status>
 80069d2:	4603      	mov	r3, r0
 80069d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fb f9e8 	bl	8001dd4 <HAL_PCD_EP_SetStall>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f8de 	bl	8006bcc <USBD_Get_USB_Status>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fb fa2c 	bl	8001e9a <HAL_PCD_EP_ClrStall>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f8bf 	bl	8006bcc <USBD_Get_USB_Status>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0b      	bge.n	8006a90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	3316      	adds	r3, #22
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	e00b      	b.n	8006aa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006aa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fb f81b 	bl	8001b0e <HAL_PCD_SetAddress>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f874 	bl	8006bcc <USBD_Get_USB_Status>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	460b      	mov	r3, r1
 8006b00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b10:	7af9      	ldrb	r1, [r7, #11]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	f7fb f923 	bl	8001d60 <HAL_PCD_EP_Transmit>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f853 	bl	8006bcc <USBD_Get_USB_Status>
 8006b26:	4603      	mov	r3, r0
 8006b28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	460b      	mov	r3, r1
 8006b42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b52:	7af9      	ldrb	r1, [r7, #11]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	f7fb f8af 	bl	8001cba <HAL_PCD_EP_Receive>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f832 	bl	8006bcc <USBD_Get_USB_Status>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fb f8cf 	bl	8001d30 <HAL_PCD_EP_GetRxCount>
 8006b92:	4603      	mov	r3, r0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	@ (8006bb4 <USBD_static_malloc+0x18>)
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	200013f0 	.word	0x200013f0

08006bb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d817      	bhi.n	8006c10 <USBD_Get_USB_Status+0x44>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <USBD_Get_USB_Status+0x1c>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006bff 	.word	0x08006bff
 8006bf0:	08006c05 	.word	0x08006c05
 8006bf4:	08006c0b 	.word	0x08006c0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006bfc:	e00b      	b.n	8006c16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	73fb      	strb	r3, [r7, #15]
    break;
 8006c02:	e008      	b.n	8006c16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
    break;
 8006c08:	e005      	b.n	8006c16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c0e:	e002      	b.n	8006c16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	73fb      	strb	r3, [r7, #15]
    break;
 8006c14:	bf00      	nop
  }
  return usb_status;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <memset>:
 8006c24:	4402      	add	r2, r0
 8006c26:	4603      	mov	r3, r0
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d100      	bne.n	8006c2e <memset+0xa>
 8006c2c:	4770      	bx	lr
 8006c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c32:	e7f9      	b.n	8006c28 <memset+0x4>

08006c34 <__libc_init_array>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4d0d      	ldr	r5, [pc, #52]	@ (8006c6c <__libc_init_array+0x38>)
 8006c38:	4c0d      	ldr	r4, [pc, #52]	@ (8006c70 <__libc_init_array+0x3c>)
 8006c3a:	1b64      	subs	r4, r4, r5
 8006c3c:	10a4      	asrs	r4, r4, #2
 8006c3e:	2600      	movs	r6, #0
 8006c40:	42a6      	cmp	r6, r4
 8006c42:	d109      	bne.n	8006c58 <__libc_init_array+0x24>
 8006c44:	4d0b      	ldr	r5, [pc, #44]	@ (8006c74 <__libc_init_array+0x40>)
 8006c46:	4c0c      	ldr	r4, [pc, #48]	@ (8006c78 <__libc_init_array+0x44>)
 8006c48:	f000 f826 	bl	8006c98 <_init>
 8006c4c:	1b64      	subs	r4, r4, r5
 8006c4e:	10a4      	asrs	r4, r4, #2
 8006c50:	2600      	movs	r6, #0
 8006c52:	42a6      	cmp	r6, r4
 8006c54:	d105      	bne.n	8006c62 <__libc_init_array+0x2e>
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5c:	4798      	blx	r3
 8006c5e:	3601      	adds	r6, #1
 8006c60:	e7ee      	b.n	8006c40 <__libc_init_array+0xc>
 8006c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c66:	4798      	blx	r3
 8006c68:	3601      	adds	r6, #1
 8006c6a:	e7f2      	b.n	8006c52 <__libc_init_array+0x1e>
 8006c6c:	08006d10 	.word	0x08006d10
 8006c70:	08006d10 	.word	0x08006d10
 8006c74:	08006d10 	.word	0x08006d10
 8006c78:	08006d14 	.word	0x08006d14

08006c7c <memcpy>:
 8006c7c:	440a      	add	r2, r1
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c84:	d100      	bne.n	8006c88 <memcpy+0xc>
 8006c86:	4770      	bx	lr
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c92:	4291      	cmp	r1, r2
 8006c94:	d1f9      	bne.n	8006c8a <memcpy+0xe>
 8006c96:	bd10      	pop	{r4, pc}

08006c98 <_init>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr

08006ca4 <_fini>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr
